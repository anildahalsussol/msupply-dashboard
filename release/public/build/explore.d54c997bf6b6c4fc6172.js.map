{"version":3,"sources":["webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/utils/set.ts","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogMessageAnsi.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/core/utils/reselect.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["updateExploreUIState","exploreId","uiStateFragment","dispatch","Object","_actionTypes__WEBPACK_IMPORTED_MODULE_7__","tslib__WEBPACK_IMPORTED_MODULE_0__","stateSave","addQueryRow","index","getState","query","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_4__","explore","queries","changeDatasource","datasource","_this","this","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_3__","get","newDataSourceInstance","_a","sent","currentDataSourceInstance","datasourceInstance","importQueries","loadDatasource","console","error","error_1","runQueries","changeQuery","override","changeSize","height","width","changeTime","range","clearQueries","initializeExplore","datasourceName","containerWidth","eventBridge","ui","exploreDatasources","getExternal","map","ds","value","name","meta","length","instance","error_2","error_3","loadDatasourceSuccess","supportsGraph","metrics","supportsLogs","logs","supportsTable","tables","StartPage","pluginExports","ExploreStartPage","historyKey","id","history","app_core_store__WEBPACK_IMPORTED_MODULE_2__","getObject","set","showingStartPage","Boolean","sourceDataSource","targetDataSource","importedQueries","nextQueries","q","i","requestedDatasourceName","datasourceError","testDatasource","testResult","status","message","error_4","statusText","Promise","reject","init","resolve","modifyQueries","modification","modifier","preventSubmit","ignoreUIState","showingLogs","showingGraph","showingTable","interval","runQueriesForType","format","instant","valueWithRefId","data","resultType","queryOptions","resultGetter","queryIntervals","scanning","datasourceId","forEach","rowIndex","transaction","now","Date","options","res","emit","latency","queryTransactions","results","transactionId","result","scanner","find","qt","hints","getQueryHints","nextQueryTransactions","done","nextHistory","lodash__WEBPACK_IMPORTED_MODULE_1___default","a","size","queryTransactionSuccess","response_1","response","cancelled","errorDetails","Error","queryTransactionFailure","scanStart","setQueries","rawQueries","splitClose","itemId","splitOpen","leftState","app_types_explore__WEBPACK_IMPORTED_MODULE_6__","left","queryState","location","urlState","itemState","slice","right","split","urlStates","leftUrlState","dedupStrategy","rightUrlState","app_core_actions__WEBPACK_IMPORTED_MODULE_5__","togglePanelActionCreator","actionCreator","isPanelVisible","uiFragmentStateUpdate","shouldRunQueries","type","toggleGraph","toggleLogs","toggleTable","changeDedupStrategy","refreshExplore","initialized","update","refreshQueries","refreshRange","from","_TimePicker__WEBPACK_IMPORTED_MODULE_8__","to","initialQueries","initialRange","DATE_FORMAT","DEFAULT_RANGE","parseTime","isUtc","ensureString","moment__WEBPACK_IMPORTED_MODULE_2___default","isMoment","indexOf","time","isNaN","parseInt","utc","TimePicker","_super","props","call","handleChangeFrom","e","setState","fromRaw","target","handleChangeTo","toRaw","handleClickApply","onChangeTime","state","app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_3__","isOpen","rangeString","app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_4__","handleClickLeft","move","handleClickPicker","handleClickRight","handleClickRefresh","handleClickRelativeOption","dropdownRef","el","dropdownEl","refreshInterval","getDerivedStateFromProps","prototype","direction","nextTo","nextFrom","step","timespan","valueOf","nextRange","nextTimeRange","raw","getTimeOptions","renderDropdown","timeOptions","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","ref","className","keys","section","group","key","option","active","display","onClick","_grafana_ui__WEBPACK_IMPORTED_MODULE_5__","onChange","render","react__WEBPACK_IMPORTED_MODULE_1__","Panel","apply","arguments","onClickToggle","onToggle","iconClass","loaderClass","loading","label","children","ErrorBoundary","errorInfo","componentDidCatch","style","whiteSpace","toString","componentStack","Legend_LegendItem","LegendItem","onClickLabel","series","tslib_es6","hidden","seriesClasses","classnames_default","graph-legend-series-hidden","react_default","color","title","alias","react","explore_Legend","Legend","event","onToggleSeries","ctrlKey","metaKey","shiftKey","hiddenSeries","items","has","defaultProps","time_format","ticks","min","max","secPerTick","FLOT_OPTIONS","legend","show","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","margin","labelMarginX","selection","mode","Graph_Graph","Graph","dynamicOptions","Set","showAllTimeSeries","onPlotSelected","ranges","moment_default","xaxis","onShowAllTimeSeries","draw","exclusive","oneSeriesVisible","d","nextHiddenSeries","filter","availableSeries","b","it","values","next","add","intersect","delete","getGraphData","componentDidMount","$el","jquery_js_exposed_default","bind","componentDidUpdate","prevProps","prevState","equal","componentWillUnmount","unbind","getDynamicOptions","datemath","timezone","timeformat","userOptions","ts","getFlotPairs","plot","_b","_c","Fragment","__webpack_exports__","Explore","getRef","changedByScanner","onStopScanning","onClickExample","onModifyQueries","action","modifyQuery","onResize","onStartScanning","scanPreviousRange","timepickerRef","current","scanStopAction","renderEmptyState","_NoDataSourceCallToAction__WEBPACK_IMPORTED_MODULE_18__","exploreEvents","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_15__","createRef","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_14__","_d","initialDatasource","app_core_store__WEBPACK_IMPORTED_MODULE_5__","_TimePicker__WEBPACK_IMPORTED_MODULE_12__","offsetWidth","removeAllListeners","datasourceLoading","datasourceMissing","queryKeys","exploreClass","_ExploreToolbar__WEBPACK_IMPORTED_MODULE_16__","_Error__WEBPACK_IMPORTED_MODULE_6__","_QueryRows__WEBPACK_IMPORTED_MODULE_10__","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","disableHeight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_7__","_GraphContainer__WEBPACK_IMPORTED_MODULE_8__","_TableContainer__WEBPACK_IMPORTED_MODULE_11__","onClickCell","_LogsContainer__WEBPACK_IMPORTED_MODULE_9__","PureComponent","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_13__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_17__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","item","__webpack_require__","Alert","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","GraphContainer","onClickGraphButton","timeRange","graphResult","graphHeight","_Panel__WEBPACK_IMPORTED_MODULE_6__","_Graph__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_4__","some","LogsContainer","onClickLogsButton","handleDedupStrategyChange","hangleToggleLogLevel","hiddenLogLevels","toggleLogLevelAction","logsHighlighterExpressions","logsResult","dedupedResult","scanRange","_Panel__WEBPACK_IMPORTED_MODULE_7__","_Logs__WEBPACK_IMPORTED_MODULE_6__","app_core_logs_model__WEBPACK_IMPORTED_MODULE_4__","none","dedupedData","highlighterExpressions","onDedupStrategyChange","onToggleLogLevel","_state_actions__WEBPACK_IMPORTED_MODULE_5__","app_features_explore_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","app_features_explore_state_selectors__WEBPACK_IMPORTED_MODULE_9__","QueryRows","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","QueryRow","onExecuteQuery","onChangeQuery","getHighlighterExpression","updateLogsHighlights","onClickAddButton","onClickClearButton","onClickHintFix","onClickRemoveButton","removeQueryRowAction","lodash__WEBPACK_IMPORTED_MODULE_2___default","debounce","expressions","highlightLogsExpressionAction","log","transactions","t","transactionWithError","undefined","hint","getFirstHintFromTransactions","queryError","QueryField","ExploreQueryField","_QueryTransactionStatus__WEBPACK_IMPORTED_MODULE_6__","onExecuteHint","onQueryChange","_QueryEditor__WEBPACK_IMPORTED_MODULE_5__","initialQuery","_state_actions__WEBPACK_IMPORTED_MODULE_7__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_8__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_4__","QueryEditor","element","initTimeSrv","loader","app_core_services_AngularLoader__WEBPACK_IMPORTED_MODULE_2__","scopeProps","ctrl","refresh","events","panel","targets","dashboard","component","load","destroy","app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_3__","getTimezone","timeRangeUpdated","TableContainer","onClickTableButton","tableResult","_Table__WEBPACK_IMPORTED_MODULE_5__","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","columnKey","Header","rowValue","row","tableModel","columnNames","columns","text","filterable","react__WEBPACK_IMPORTED_MODULE_2___default","accessor","test","Cell","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","rows","getTdProps","minRows","resolveData","cells","zipObject","prepareRows","showPagination","react__WEBPACK_IMPORTED_MODULE_2__","IconSide","createResponsiveButton","defaultOptions","iconSide","buttonClassName","iconClassName","splitted","UnConnectedExploreToolbar","onChangeDatasource","onClearAll","clearAll","onRunQuery","runQuery","onCloseTimePicker","selectedDatasource","closeSplit","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_4__","datasources","app_core_components_ClickOutsideWrapper_ClickOutsideWrapper__WEBPACK_IMPORTED_MODULE_7__","_TimePicker__WEBPACK_IMPORTED_MODULE_6__","ExploreToolbar","react_redux__WEBPACK_IMPORTED_MODULE_2__","exploreItem","NoDataSourceCallToAction","theme","_grafana_ui__WEBPACK_IMPORTED_MODULE_3__","footer","href","ctaElement","icon","cardClassName","emotion__WEBPACK_IMPORTED_MODULE_2__","templateObject_1","breakpoints","lg","callToActionElement","ToggleButtonGroup","transparent","ToggleButton","selected","tooltip","btnClassName","button","stopPropagation","src","content","placement","LogLabelStatsRow","logLabelStatsModel","count","proportion","percent","Math","round","barStyle","logs-stats-row--active","LogLabelStats_LogLabelStats","LogLabelStats","rowCount","stats","onClickClose","topRows","activeRow","otherRows","insertActiveRow","otherCount","reduce","sum","total","otherProportion","stat","LogLabel_LogLabel","LogLabel","showStats","onClickStats","allRows","getRows","logs_model","plain","LogLabels_LogLabels","LogLabels","labels","LogMessageAnsi_LogMessageAnsi","LogMessageAnsi","chunks","prevValue","ansicolor","parse","spans","span","css","accumulated","line","match","replace","_","character","toUpperCase","chunk","LogRow_LogRow","LogRow","fieldCount","fieldLabel","fieldStats","fieldValue","parsed","parser","parsedFieldHighlights","showFieldStats","onClickHighlight","fieldText","getLabelFromField","getValueFromField","matcher","buildMatcher","onMouseOverMessage","mouseMessageTimer","setTimeout","parseMessage","onMouseOutMessage","clearTimeout","entry","getFields","showDuplicates","showLabels","showLocalTime","showUtc","hasAnsi","previewHighlights","lodash_default","isEqual","searchWords","highlights","needsHighlighter","highlightClassName","logs-row__match-highlight--preview","duplicates","logLevel","timeLocal","timeFromNow","timestamp","uniqueLabels","onMouseEnter","onMouseLeave","main_default","autoEscape","highlightTag","textToHighlight","findChunks","utils_text","graphOptions","stack","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","Logs","deferLogs","renderAll","onChangeDedup","dedup","onChangeLabels","checked","onChangeLocalTime","onChangeUtc","rawLevel","hiddenRawLevels","Array","level","onClickScan","preventDefault","onClickStopScan","renderAll_1","PREVIEW_LIMIT","deferLogsTimer","renderAllTimer","hasData","hasLabel","hasUniqueLabels","dedupCount","push","kind","Number","processedRows","firstRows","lastRows","scanText","rangeutil","timeSeries","time_series2","components_ToggleButtonGroup_ToggleButtonGroup","dedupType","LabelsMap","ElapsedTime","elapsed","tick","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","clearInterval","toFixed","QueryTransactionStatus_QueryTransactionStatusItem","QueryTransactionStatusItem","explore_ElapsedTime","QueryTransactionStatus_QueryTransactionStatus","QueryTransactionStatus","createLodashMemoizedSelector","es","lodash","args","_i","acc","val","JSON","stringify","exploreItemUIStateSelector","deduplicatedLogsSelector","filteredData","Wrapper","resetExploreAction","_grafana_ui__WEBPACK_IMPORTED_MODULE_7__","autoHeightMin","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__","_Explore__WEBPACK_IMPORTED_MODULE_6__","app_types_explore__WEBPACK_IMPORTED_MODULE_4__"],"mappings":"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","file":"explore.d54c997bf6b6c4fc6172.js","sourcesContent":["// Libraries\r\nimport _ from 'lodash';\r\n\r\n// Services & Utils\r\nimport store from 'app/core/store';\r\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\r\nimport { Emitter } from 'app/core/core';\r\nimport {\r\n  LAST_USED_DATASOURCE_KEY,\r\n  clearQueryKeys,\r\n  ensureQueries,\r\n  generateEmptyQuery,\r\n  hasNonEmptyQuery,\r\n  makeTimeSeriesList,\r\n  updateHistory,\r\n  buildQueryTransaction,\r\n  serializeStateToUrlParam,\r\n  parseUrlState,\r\n} from 'app/core/utils/explore';\r\n\r\n// Actions\r\nimport { updateLocation } from 'app/core/actions';\r\n\r\n// Types\r\nimport {\r\n  RawTimeRange,\r\n  TimeRange,\r\n  DataSourceApi,\r\n  DataQuery,\r\n  DataSourceSelectItem,\r\n  QueryHint,\r\n  QueryFixAction,\r\n} from '@grafana/ui/src/types';\r\nimport { ExploreId, ExploreUrlState, RangeScanner, ResultType, QueryOptions, ExploreUIState } from 'app/types/explore';\r\nimport {\r\n  updateDatasourceInstanceAction,\r\n  changeQueryAction,\r\n  changeSizeAction,\r\n  ChangeSizePayload,\r\n  changeTimeAction,\r\n  scanStopAction,\r\n  clearQueriesAction,\r\n  initializeExploreAction,\r\n  loadDatasourceMissingAction,\r\n  loadDatasourceFailureAction,\r\n  loadDatasourcePendingAction,\r\n  queriesImportedAction,\r\n  LoadDatasourceSuccessPayload,\r\n  loadDatasourceSuccessAction,\r\n  modifyQueriesAction,\r\n  queryTransactionFailureAction,\r\n  queryTransactionStartAction,\r\n  queryTransactionSuccessAction,\r\n  scanRangeAction,\r\n  scanStartAction,\r\n  setQueriesAction,\r\n  splitCloseAction,\r\n  splitOpenAction,\r\n  addQueryRowAction,\r\n  toggleGraphAction,\r\n  toggleLogsAction,\r\n  toggleTableAction,\r\n  ToggleGraphPayload,\r\n  ToggleLogsPayload,\r\n  ToggleTablePayload,\r\n  updateUIStateAction,\r\n  runQueriesAction,\r\n} from './actionTypes';\r\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\r\nimport { LogsDedupStrategy } from 'app/core/logs_model';\r\nimport { ThunkResult } from 'app/types';\r\nimport { parseTime } from '../TimePicker';\r\n\r\n/**\r\n * Updates UI state and save it to the URL\r\n */\r\nconst updateExploreUIState = (exploreId, uiStateFragment: Partial<ExploreUIState>) => {\r\n  return dispatch => {\r\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\r\n    dispatch(stateSave());\r\n  };\r\n};\r\n\r\n/**\r\n * Adds a query row after the row with the given index.\r\n */\r\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    const query = generateEmptyQuery(getState().explore[exploreId].queries, index);\r\n\r\n    dispatch(addQueryRowAction({ exploreId, index, query }));\r\n  };\r\n}\r\n\r\n/**\r\n * Loads a new datasource identified by the given name.\r\n */\r\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\r\n  return async (dispatch, getState) => {\r\n    const newDataSourceInstance = await getDatasourceSrv().get(datasource);\r\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\r\n    const queries = getState().explore[exploreId].queries;\r\n\r\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\r\n\r\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\r\n\r\n    try {\r\n      await dispatch(loadDatasource(exploreId, newDataSourceInstance));\r\n    } catch (error) {\r\n      console.error(error);\r\n      return;\r\n    }\r\n\r\n    dispatch(runQueries(exploreId));\r\n  };\r\n}\r\n\r\n/**\r\n * Query change handler for the query row with the given index.\r\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\r\n */\r\nexport function changeQuery(\r\n  exploreId: ExploreId,\r\n  query: DataQuery,\r\n  index: number,\r\n  override: boolean\r\n): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    // Null query means reset\r\n    if (query === null) {\r\n      query = { ...generateEmptyQuery(getState().explore[exploreId].queries) };\r\n    }\r\n\r\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\r\n    if (override) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Keep track of the Explore container size, in particular the width.\r\n * The width will be used to calculate graph intervals (number of datapoints).\r\n */\r\nexport function changeSize(\r\n  exploreId: ExploreId,\r\n  { height, width }: { height: number; width: number }\r\n): ActionOf<ChangeSizePayload> {\r\n  return changeSizeAction({ exploreId, height, width });\r\n}\r\n\r\n/**\r\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\r\n */\r\nexport function changeTime(exploreId: ExploreId, range: TimeRange): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(changeTimeAction({ exploreId, range }));\r\n    dispatch(runQueries(exploreId));\r\n  };\r\n}\r\n\r\n/**\r\n * Clear all queries and results.\r\n */\r\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(scanStopAction({ exploreId }));\r\n    dispatch(clearQueriesAction({ exploreId }));\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Initialize Explore state with state from the URL and the React component.\r\n * Call this only on components for with the Explore state has not been initialized.\r\n */\r\nexport function initializeExplore(\r\n  exploreId: ExploreId,\r\n  datasourceName: string,\r\n  queries: DataQuery[],\r\n  range: RawTimeRange,\r\n  containerWidth: number,\r\n  eventBridge: Emitter,\r\n  ui: ExploreUIState\r\n): ThunkResult<void> {\r\n  return async dispatch => {\r\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\r\n      .getExternal()\r\n      .map(ds => ({\r\n        value: ds.name,\r\n        name: ds.name,\r\n        meta: ds.meta,\r\n      }));\r\n\r\n    dispatch(\r\n      initializeExploreAction({\r\n        exploreId,\r\n        containerWidth,\r\n        eventBridge,\r\n        exploreDatasources,\r\n        queries,\r\n        range,\r\n        ui,\r\n      })\r\n    );\r\n\r\n    if (exploreDatasources.length >= 1) {\r\n      let instance;\r\n\r\n      if (datasourceName) {\r\n        try {\r\n          instance = await getDatasourceSrv().get(datasourceName);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n      // Checking on instance here because requested datasource could be deleted already\r\n      if (!instance) {\r\n        instance = await getDatasourceSrv().get();\r\n      }\r\n\r\n      dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: instance }));\r\n\r\n      try {\r\n        await dispatch(loadDatasource(exploreId, instance));\r\n      } catch (error) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      dispatch(runQueries(exploreId, true));\r\n    } else {\r\n      dispatch(loadDatasourceMissingAction({ exploreId }));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Datasource loading was successfully completed. The instance is stored in the state as well in case we need to\r\n * run datasource-specific code. Existing queries are imported to the new datasource if an importer exists,\r\n * e.g., Prometheus -> Loki queries.\r\n */\r\nexport const loadDatasourceSuccess = (exploreId: ExploreId, instance: any): ActionOf<LoadDatasourceSuccessPayload> => {\r\n  // Capabilities\r\n  const supportsGraph = instance.meta.metrics;\r\n  const supportsLogs = instance.meta.logs;\r\n  const supportsTable = instance.meta.tables;\r\n  // Custom components\r\n  const StartPage = instance.pluginExports.ExploreStartPage;\r\n\r\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\r\n  const history = store.getObject(historyKey, []);\r\n  // Save last-used datasource\r\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\r\n\r\n  return loadDatasourceSuccessAction({\r\n    exploreId,\r\n    StartPage,\r\n    datasourceInstance: instance,\r\n    history,\r\n    showingStartPage: Boolean(StartPage),\r\n    supportsGraph,\r\n    supportsLogs,\r\n    supportsTable,\r\n  });\r\n};\r\n\r\nexport function importQueries(\r\n  exploreId: ExploreId,\r\n  queries: DataQuery[],\r\n  sourceDataSource: DataSourceApi,\r\n  targetDataSource: DataSourceApi\r\n) {\r\n  return async dispatch => {\r\n    let importedQueries = queries;\r\n    // Check if queries can be imported from previously selected datasource\r\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\r\n      // Keep same queries if same type of datasource\r\n      importedQueries = [...queries];\r\n    } else if (targetDataSource.importQueries) {\r\n      // Datasource-specific importers\r\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\r\n    } else {\r\n      // Default is blank queries\r\n      importedQueries = ensureQueries();\r\n    }\r\n\r\n    const nextQueries = importedQueries.map((q, i) => ({\r\n      ...q,\r\n      ...generateEmptyQuery(queries),\r\n    }));\r\n\r\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\r\n  };\r\n}\r\n\r\n/**\r\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\r\n */\r\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\r\n  return async (dispatch, getState) => {\r\n    const datasourceName = instance.name;\r\n\r\n    // Keep ID to track selection\r\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\r\n    let datasourceError = null;\r\n\r\n    try {\r\n      const testResult = await instance.testDatasource();\r\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\r\n    } catch (error) {\r\n      datasourceError = (error && error.statusText) || 'Network error';\r\n    }\r\n\r\n    if (datasourceError) {\r\n      dispatch(loadDatasourceFailureAction({ exploreId, error: datasourceError }));\r\n      return Promise.reject(`${datasourceName} loading failed`);\r\n    }\r\n\r\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\r\n      // User already changed datasource again, discard results\r\n      return;\r\n    }\r\n\r\n    if (instance.init) {\r\n      instance.init();\r\n    }\r\n\r\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\r\n      // User already changed datasource again, discard results\r\n      return;\r\n    }\r\n\r\n    dispatch(loadDatasourceSuccess(exploreId, instance));\r\n    return Promise.resolve();\r\n  };\r\n}\r\n\r\n/**\r\n * Action to modify a query given a datasource-specific modifier action.\r\n * @param exploreId Explore area\r\n * @param modification Action object with a type, e.g., ADD_FILTER\r\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\r\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\r\n */\r\nexport function modifyQueries(\r\n  exploreId: ExploreId,\r\n  modification: QueryFixAction,\r\n  index: number,\r\n  modifier: any\r\n): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\r\n    if (!modification.preventSubmit) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Mark a query transaction as failed with an error extracted from the query response.\r\n * The transaction will be marked as `done`.\r\n */\r\nexport function queryTransactionFailure(\r\n  exploreId: ExploreId,\r\n  transactionId: string,\r\n  response: any,\r\n  datasourceId: string\r\n): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\r\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\r\n      // Navigated away, queries did not matter\r\n      return;\r\n    }\r\n\r\n    // Transaction might have been discarded\r\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\r\n      return;\r\n    }\r\n\r\n    console.error(response);\r\n\r\n    let error: string;\r\n    let errorDetails: string;\r\n    if (response.data) {\r\n      if (typeof response.data === 'string') {\r\n        error = response.data;\r\n      } else if (response.data.error) {\r\n        error = response.data.error;\r\n        if (response.data.response) {\r\n          errorDetails = response.data.response;\r\n        }\r\n      } else {\r\n        throw new Error('Could not handle error response');\r\n      }\r\n    } else if (response.message) {\r\n      error = response.message;\r\n    } else if (typeof response === 'string') {\r\n      error = response;\r\n    } else {\r\n      error = 'Unknown error during query transaction. Please check JS console logs.';\r\n    }\r\n\r\n    // Mark transactions as complete\r\n    const nextQueryTransactions = queryTransactions.map(qt => {\r\n      if (qt.id === transactionId) {\r\n        return {\r\n          ...qt,\r\n          error,\r\n          errorDetails,\r\n          done: true,\r\n        };\r\n      }\r\n      return qt;\r\n    });\r\n\r\n    dispatch(queryTransactionFailureAction({ exploreId, queryTransactions: nextQueryTransactions }));\r\n  };\r\n}\r\n\r\n/**\r\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\r\n * If the transaction was started by a scanner, it keeps on scanning for more results.\r\n * Side-effect: the query is stored in localStorage.\r\n * @param exploreId Explore area\r\n * @param transactionId ID\r\n * @param result Response from `datasourceInstance.query()`\r\n * @param latency Duration between request and response\r\n * @param queries Queries from all query rows\r\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\r\n */\r\nexport function queryTransactionSuccess(\r\n  exploreId: ExploreId,\r\n  transactionId: string,\r\n  result: any,\r\n  latency: number,\r\n  queries: DataQuery[],\r\n  datasourceId: string\r\n): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\r\n\r\n    // If datasource already changed, results do not matter\r\n    if (datasourceInstance.meta.id !== datasourceId) {\r\n      return;\r\n    }\r\n\r\n    // Transaction might have been discarded\r\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\r\n    if (!transaction) {\r\n      return;\r\n    }\r\n\r\n    // Get query hints\r\n    let hints: QueryHint[];\r\n    if (datasourceInstance.getQueryHints) {\r\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\r\n    }\r\n\r\n    // Mark transactions as complete and attach result\r\n    const nextQueryTransactions = queryTransactions.map(qt => {\r\n      if (qt.id === transactionId) {\r\n        return {\r\n          ...qt,\r\n          hints,\r\n          latency,\r\n          result,\r\n          done: true,\r\n        };\r\n      }\r\n      return qt;\r\n    });\r\n\r\n    // Side-effect: Saving history in localstorage\r\n    const nextHistory = updateHistory(history, datasourceId, queries);\r\n\r\n    dispatch(\r\n      queryTransactionSuccessAction({\r\n        exploreId,\r\n        history: nextHistory,\r\n        queryTransactions: nextQueryTransactions,\r\n      })\r\n    );\r\n\r\n    // Keep scanning for results if this was the last scanning transaction\r\n    if (scanning) {\r\n      if (_.size(result) === 0) {\r\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\r\n        if (!other) {\r\n          const range = scanner();\r\n          dispatch(scanRangeAction({ exploreId, range }));\r\n        }\r\n      } else {\r\n        // We can stop scanning if we have a result\r\n        dispatch(scanStopAction({ exploreId }));\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\r\n */\r\nexport function runQueries(exploreId: ExploreId, ignoreUIState = false) {\r\n  return (dispatch, getState) => {\r\n    const {\r\n      datasourceInstance,\r\n      queries,\r\n      showingLogs,\r\n      showingGraph,\r\n      showingTable,\r\n      supportsGraph,\r\n      supportsLogs,\r\n      supportsTable,\r\n    } = getState().explore[exploreId];\r\n\r\n    if (!hasNonEmptyQuery(queries)) {\r\n      dispatch(clearQueriesAction({ exploreId }));\r\n      dispatch(stateSave()); // Remember to saves to state and update location\r\n      return;\r\n    }\r\n\r\n    // Some datasource's query builders allow per-query interval limits,\r\n    // but we're using the datasource interval limit for now\r\n    const interval = datasourceInstance.interval;\r\n\r\n    dispatch(runQueriesAction());\r\n    // Keep table queries first since they need to return quickly\r\n    if ((ignoreUIState || showingTable) && supportsTable) {\r\n      dispatch(\r\n        runQueriesForType(\r\n          exploreId,\r\n          'Table',\r\n          {\r\n            interval,\r\n            format: 'table',\r\n            instant: true,\r\n            valueWithRefId: true,\r\n          },\r\n          data => data[0]\r\n        )\r\n      );\r\n    }\r\n    if ((ignoreUIState || showingGraph) && supportsGraph) {\r\n      dispatch(\r\n        runQueriesForType(\r\n          exploreId,\r\n          'Graph',\r\n          {\r\n            interval,\r\n            format: 'time_series',\r\n            instant: false,\r\n          },\r\n          makeTimeSeriesList\r\n        )\r\n      );\r\n    }\r\n    if ((ignoreUIState || showingLogs) && supportsLogs) {\r\n      dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }));\r\n    }\r\n\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Helper action to build a query transaction object and handing the query to the datasource.\r\n * @param exploreId Explore area\r\n * @param resultType Result viewer that will be associated with this query result\r\n * @param queryOptions Query options as required by the datasource's `query()` function.\r\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\r\n */\r\nfunction runQueriesForType(\r\n  exploreId: ExploreId,\r\n  resultType: ResultType,\r\n  queryOptions: QueryOptions,\r\n  resultGetter?: any\r\n) {\r\n  return async (dispatch, getState) => {\r\n    const { datasourceInstance, eventBridge, queries, queryIntervals, range, scanning } = getState().explore[exploreId];\r\n    const datasourceId = datasourceInstance.meta.id;\r\n\r\n    // Run all queries concurrently\r\n    queries.forEach(async (query, rowIndex) => {\r\n      const transaction = buildQueryTransaction(\r\n        query,\r\n        rowIndex,\r\n        resultType,\r\n        queryOptions,\r\n        range,\r\n        queryIntervals,\r\n        scanning\r\n      );\r\n      dispatch(queryTransactionStartAction({ exploreId, resultType, rowIndex, transaction }));\r\n      try {\r\n        const now = Date.now();\r\n        const res = await datasourceInstance.query(transaction.options);\r\n        eventBridge.emit('data-received', res.data || []);\r\n        const latency = Date.now() - now;\r\n        const { queryTransactions } = getState().explore[exploreId];\r\n        const results = resultGetter ? resultGetter(res.data, transaction, queryTransactions) : res.data;\r\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\r\n      } catch (response) {\r\n        eventBridge.emit('data-error', response);\r\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Start a scan for more results using the given scanner.\r\n * @param exploreId Explore area\r\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\r\n */\r\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\r\n  return dispatch => {\r\n    // Register the scanner\r\n    dispatch(scanStartAction({ exploreId, scanner }));\r\n    // Scanning must trigger query run, and return the new range\r\n    const range = scanner();\r\n    // Set the new range to be displayed\r\n    dispatch(scanRangeAction({ exploreId, range }));\r\n  };\r\n}\r\n\r\n/**\r\n * Reset queries to the given queries. Any modifications will be discarded.\r\n * Use this action for clicks on query examples. Triggers a query run.\r\n */\r\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    // Inject react keys into query objects\r\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery(getState().explore[exploreId].queries) }));\r\n    dispatch(setQueriesAction({ exploreId, queries }));\r\n    dispatch(runQueries(exploreId));\r\n  };\r\n}\r\n\r\n/**\r\n * Close the split view and save URL state.\r\n */\r\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\r\n  return dispatch => {\r\n    dispatch(splitCloseAction({ itemId }));\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Open the split view and copy the left state to be the right state.\r\n * The right state is automatically initialized.\r\n * The copy keeps all query modifications but wipes the query results.\r\n */\r\nexport function splitOpen(): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    // Clone left state to become the right state\r\n    const leftState = getState().explore[ExploreId.left];\r\n    const queryState = getState().location.query[ExploreId.left] as string;\r\n    const urlState = parseUrlState(queryState);\r\n    const itemState = {\r\n      ...leftState,\r\n      queryTransactions: [],\r\n      queries: leftState.queries.slice(),\r\n      exploreId: ExploreId.right,\r\n      urlState,\r\n    };\r\n    dispatch(splitOpenAction({ itemState }));\r\n    dispatch(stateSave());\r\n  };\r\n}\r\n\r\n/**\r\n * Saves Explore state to URL using the `left` and `right` parameters.\r\n * If split view is not active, `right` will not be set.\r\n */\r\nexport function stateSave() {\r\n  return (dispatch, getState) => {\r\n    const { left, right, split } = getState().explore;\r\n    const urlStates: { [index: string]: string } = {};\r\n    const leftUrlState: ExploreUrlState = {\r\n      datasource: left.datasourceInstance.name,\r\n      queries: left.queries.map(clearQueryKeys),\r\n      range: left.range,\r\n      ui: {\r\n        showingGraph: left.showingGraph,\r\n        showingLogs: left.showingLogs,\r\n        showingTable: left.showingTable,\r\n        dedupStrategy: left.dedupStrategy,\r\n      },\r\n    };\r\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\r\n    if (split) {\r\n      const rightUrlState: ExploreUrlState = {\r\n        datasource: right.datasourceInstance.name,\r\n        queries: right.queries.map(clearQueryKeys),\r\n        range: right.range,\r\n        ui: {\r\n          showingGraph: right.showingGraph,\r\n          showingLogs: right.showingLogs,\r\n          showingTable: right.showingTable,\r\n          dedupStrategy: right.dedupStrategy,\r\n        },\r\n      };\r\n\r\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\r\n    }\r\n\r\n    dispatch(updateLocation({ query: urlStates }));\r\n  };\r\n}\r\n\r\n/**\r\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\r\n * queries won't be run\r\n */\r\nconst togglePanelActionCreator = (\r\n  actionCreator:\r\n    | ActionCreator<ToggleGraphPayload>\r\n    | ActionCreator<ToggleLogsPayload>\r\n    | ActionCreator<ToggleTablePayload>\r\n) => (exploreId: ExploreId, isPanelVisible: boolean) => {\r\n  return dispatch => {\r\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\r\n    const shouldRunQueries = !isPanelVisible;\r\n\r\n    switch (actionCreator.type) {\r\n      case toggleGraphAction.type:\r\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\r\n        break;\r\n      case toggleLogsAction.type:\r\n        uiFragmentStateUpdate = { showingLogs: !isPanelVisible };\r\n        break;\r\n      case toggleTableAction.type:\r\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\r\n        break;\r\n    }\r\n\r\n    dispatch(actionCreator({ exploreId }));\r\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\r\n\r\n    if (shouldRunQueries) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\r\n */\r\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\r\n\r\n/**\r\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\r\n */\r\nexport const toggleLogs = togglePanelActionCreator(toggleLogsAction);\r\n\r\n/**\r\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\r\n */\r\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\r\n\r\n/**\r\n * Change logs deduplication strategy and update URL.\r\n */\r\nexport const changeDedupStrategy = (exploreId, dedupStrategy: LogsDedupStrategy) => {\r\n  return dispatch => {\r\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\r\n  };\r\n};\r\n\r\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\r\n  return (dispatch, getState) => {\r\n    const itemState = getState().explore[exploreId];\r\n    if (!itemState.initialized) {\r\n      return;\r\n    }\r\n\r\n    const { urlState, update, containerWidth, eventBridge } = itemState;\r\n    const { datasource, queries, range, ui } = urlState;\r\n    const refreshQueries = queries.map(q => ({ ...q, ...generateEmptyQuery(itemState.queries) }));\r\n    const refreshRange = { from: parseTime(range.from), to: parseTime(range.to) };\r\n\r\n    // need to refresh datasource\r\n    if (update.datasource) {\r\n      const initialQueries = ensureQueries(queries);\r\n      const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\r\n      dispatch(initializeExplore(exploreId, datasource, initialQueries, initialRange, containerWidth, eventBridge, ui));\r\n      return;\r\n    }\r\n\r\n    if (update.range) {\r\n      dispatch(changeTimeAction({ exploreId, range: refreshRange as TimeRange }));\r\n    }\r\n\r\n    // need to refresh ui state\r\n    if (update.ui) {\r\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\r\n    }\r\n\r\n    // need to refresh queries\r\n    if (update.queries) {\r\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\r\n    }\r\n\r\n    // always run queries when refresh is needed\r\n    if (update.queries || update.ui || update.range) {\r\n      dispatch(runQueries(exploreId));\r\n    }\r\n  };\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\nimport { Input, RawTimeRange, TimeRange } from '@grafana/ui';\r\n\r\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\r\nexport const DEFAULT_RANGE = {\r\n  from: 'now-6h',\r\n  to: 'now',\r\n};\r\n\r\n/**\r\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\r\n * @param value Epoch or relative time\r\n */\r\nexport function parseTime(value: string | moment.Moment, isUtc = false, ensureString = false): string | moment.Moment {\r\n  if (moment.isMoment(value)) {\r\n    if (ensureString) {\r\n      return value.format(DATE_FORMAT);\r\n    }\r\n    return value;\r\n  }\r\n  if ((value as string).indexOf('now') !== -1) {\r\n    return value;\r\n  }\r\n  let time: any = value;\r\n  // Possible epoch\r\n  if (!isNaN(time)) {\r\n    time = parseInt(time, 10);\r\n  }\r\n  time = isUtc ? moment.utc(time) : moment(time);\r\n  return time.format(DATE_FORMAT);\r\n}\r\n\r\ninterface TimePickerProps {\r\n  isOpen?: boolean;\r\n  isUtc?: boolean;\r\n  range?: RawTimeRange;\r\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\r\n}\r\n\r\ninterface TimePickerState {\r\n  isOpen: boolean;\r\n  isUtc: boolean;\r\n  rangeString: string;\r\n  refreshInterval?: string;\r\n  initialRange?: RawTimeRange;\r\n\r\n  // Input-controlled text, keep these in a shape that is human-editable\r\n  fromRaw: string;\r\n  toRaw: string;\r\n}\r\n\r\n/**\r\n * TimePicker with dropdown menu for relative dates.\r\n *\r\n * Initialize with a range that is either based on relative time strings,\r\n * or on Moment objects.\r\n * Internally the component needs to keep a string representation in `fromRaw`\r\n * and `toRaw` for the controlled inputs.\r\n * When a time is picked, `onChangeTime` is called with the new range that\r\n * is again based on relative time strings or Moment objects.\r\n */\r\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\r\n  dropdownEl: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: props.isOpen,\r\n      isUtc: props.isUtc,\r\n      rangeString: '',\r\n      fromRaw: '',\r\n      toRaw: '',\r\n      initialRange: DEFAULT_RANGE,\r\n      refreshInterval: '',\r\n    };\r\n  } //Temp solution... How do detect if ds supports table format?\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (state.initialRange && state.initialRange === props.range) {\r\n      return state;\r\n    }\r\n\r\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\r\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\r\n\r\n    // Ensure internal string format\r\n    const fromRaw = parseTime(from, props.isUtc, true);\r\n    const toRaw = parseTime(to, props.isUtc, true);\r\n    const range = {\r\n      from: fromRaw,\r\n      to: toRaw,\r\n    };\r\n\r\n    return {\r\n      ...state,\r\n      fromRaw,\r\n      toRaw,\r\n      initialRange: props.range,\r\n      rangeString: rangeUtil.describeTimeRange(range),\r\n    };\r\n  }\r\n\r\n  move(direction: number, scanning?: boolean): RawTimeRange {\r\n    const { onChangeTime } = this.props;\r\n    const { fromRaw, toRaw } = this.state;\r\n    const from = dateMath.parse(fromRaw, false);\r\n    const to = dateMath.parse(toRaw, true);\r\n    const step = scanning ? 1 : 2;\r\n    const timespan = (to.valueOf() - from.valueOf()) / step;\r\n\r\n    let nextTo, nextFrom;\r\n    if (direction === -1) {\r\n      nextTo = to.valueOf() - timespan;\r\n      nextFrom = from.valueOf() - timespan;\r\n    } else if (direction === 1) {\r\n      nextTo = to.valueOf() + timespan;\r\n      nextFrom = from.valueOf() + timespan;\r\n      if (nextTo > Date.now() && to.valueOf() < Date.now()) {\r\n        nextTo = Date.now();\r\n        nextFrom = from.valueOf();\r\n      }\r\n    } else {\r\n      nextTo = to.valueOf();\r\n      nextFrom = from.valueOf();\r\n    }\r\n\r\n    const nextRange = {\r\n      from: moment(nextFrom),\r\n      to: moment(nextTo),\r\n    };\r\n\r\n    const nextTimeRange: TimeRange = {\r\n      raw: nextRange,\r\n      from: nextRange.from,\r\n      to: nextRange.to,\r\n    };\r\n\r\n    this.setState(\r\n      {\r\n        rangeString: rangeUtil.describeTimeRange(nextRange),\r\n        fromRaw: nextRange.from.format(DATE_FORMAT),\r\n        toRaw: nextRange.to.format(DATE_FORMAT),\r\n      },\r\n      () => {\r\n        onChangeTime(nextTimeRange, scanning);\r\n      }\r\n    );\r\n\r\n    return nextRange;\r\n  }\r\n\r\n  handleChangeFrom = e => {\r\n    this.setState({\r\n      fromRaw: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeTo = e => {\r\n    this.setState({\r\n      toRaw: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClickApply = () => {\r\n    const { onChangeTime } = this.props;\r\n    let range;\r\n    this.setState(\r\n      state => {\r\n        const { toRaw, fromRaw } = this.state;\r\n        range = {\r\n          from: dateMath.parse(fromRaw, false),\r\n          to: dateMath.parse(toRaw, true),\r\n        };\r\n        const rangeString = rangeUtil.describeTimeRange(range);\r\n        return {\r\n          isOpen: false,\r\n          rangeString,\r\n        };\r\n      },\r\n      () => {\r\n        if (onChangeTime) {\r\n          onChangeTime(range);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClickLeft = () => this.move(-1);\r\n  handleClickPicker = () => {\r\n    this.setState(state => ({\r\n      isOpen: !state.isOpen,\r\n    }));\r\n  };\r\n  handleClickRight = () => this.move(1);\r\n  handleClickRefresh = () => {};\r\n  handleClickRelativeOption = range => {\r\n    const { onChangeTime } = this.props;\r\n    const rangeString = rangeUtil.describeTimeRange(range);\r\n    this.setState(\r\n      {\r\n        toRaw: range.to,\r\n        fromRaw: range.from,\r\n        isOpen: false,\r\n        rangeString,\r\n      },\r\n      () => {\r\n        if (onChangeTime) {\r\n          onChangeTime(range);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  getTimeOptions() {\r\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\r\n  }\r\n\r\n  dropdownRef = el => {\r\n    this.dropdownEl = el;\r\n  };\r\n\r\n  renderDropdown() {\r\n    const { fromRaw, isOpen, toRaw } = this.state;\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n    const timeOptions = this.getTimeOptions();\r\n    return (\r\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\r\n        <div className=\"popover-box\">\r\n          <div className=\"popover-box__header\">\r\n            <span className=\"popover-box__title\">Quick ranges</span>\r\n          </div>\r\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\r\n            {Object.keys(timeOptions).map(section => {\r\n              const group = timeOptions[section];\r\n              return (\r\n                <ul key={section}>\r\n                  {group.map(option => (\r\n                    <li className={option.active ? 'active' : ''} key={option.display}>\r\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"popover-box\">\r\n          <div className=\"popover-box__header\">\r\n            <span className=\"popover-box__title\">Custom range</span>\r\n          </div>\r\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\r\n            <label className=\"small\">From:</label>\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form max-width-28\">\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"gf-form-input input-large timepicker-from\"\r\n                  value={fromRaw}\r\n                  onChange={this.handleChangeFrom}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <label className=\"small\">To:</label>\r\n            <div className=\"gf-form-inline\">\r\n              <div className=\"gf-form max-width-28\">\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"gf-form-input input-large timepicker-to\"\r\n                  value={toRaw}\r\n                  onChange={this.handleChangeTo}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"gf-form\">\r\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\r\n                Apply\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isUtc, rangeString, refreshInterval } = this.state;\r\n\r\n    return (\r\n      <div className=\"timepicker\">\r\n        <div className=\"navbar-buttons\">\r\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\r\n            <i className=\"fa fa-chevron-left\" />\r\n          </button>\r\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\r\n            <i className=\"fa fa-clock-o\" />\r\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\r\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\r\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\r\n          </button>\r\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\r\n            <i className=\"fa fa-chevron-right\" />\r\n          </button>\r\n        </div>\r\n        {this.renderDropdown()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  label: string;\r\n  loading?: boolean;\r\n  onToggle: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default class Panel extends PureComponent<Props> {\r\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\r\n\r\n  render() {\r\n    const { isOpen, loading } = this.props;\r\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\r\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\r\n    return (\r\n      <div className=\"explore-panel panel-container\">\r\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\r\n          <div className=\"explore-panel__header-buttons\">\r\n            <span className={iconClass} />\r\n          </div>\r\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\r\n        </div>\r\n        {isOpen && (\r\n          <div className=\"explore-panel__body\">\r\n            <div className={loaderClass} />\r\n            {this.props.children}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundary extends Component<{}, any> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div className=\"explore-container\">\r\n          <h3>An unexpected error happened.</h3>\r\n          <details style={{ whiteSpace: 'pre-wrap' }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React, { MouseEvent, PureComponent } from 'react';\r\nimport classNames from 'classnames';\r\nimport { TimeSeries } from 'app/core/core';\r\n\r\ninterface LegendProps {\r\n  data: TimeSeries[];\r\n  hiddenSeries: Set<string>;\r\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\r\n}\r\n\r\ninterface LegendItemProps {\r\n  hidden: boolean;\r\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\r\n  series: TimeSeries;\r\n}\r\n\r\nclass LegendItem extends PureComponent<LegendItemProps> {\r\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\r\n\r\n  render() {\r\n    const { hidden, series } = this.props;\r\n    const seriesClasses = classNames({\r\n      'graph-legend-series-hidden': hidden,\r\n    });\r\n    return (\r\n      <div className={`graph-legend-series ${seriesClasses}`}>\r\n        <div className=\"graph-legend-icon\">\r\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\r\n        </div>\r\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\r\n          {series.alias}\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Legend extends PureComponent<LegendProps> {\r\n  static defaultProps = {\r\n    onToggleSeries: () => {},\r\n  };\r\n\r\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\r\n    const { onToggleSeries } = this.props;\r\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\r\n    onToggleSeries(series, !exclusive);\r\n  };\r\n\r\n  render() {\r\n    const { data, hiddenSeries } = this.props;\r\n    const items = data || [];\r\n    return (\r\n      <div className=\"graph-legend ps\">\r\n        {items.map((series, i) => (\r\n          <LegendItem\r\n            hidden={hiddenSeries.has(series.alias)}\r\n            // Workaround to resolve conflicts since series visibility tracks the alias property\r\n            key={`${series.id}-${i}`}\r\n            onClickLabel={this.onClickLabel}\r\n            series={series}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import $ from 'jquery';\r\nimport React, { PureComponent } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport 'vendor/flot/jquery.flot';\r\nimport 'vendor/flot/jquery.flot.time';\r\nimport 'vendor/flot/jquery.flot.selection';\r\nimport 'vendor/flot/jquery.flot.stack';\r\n\r\nimport { RawTimeRange } from '@grafana/ui';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nimport Legend from './Legend';\r\nimport { equal, intersect } from './utils/set';\r\n\r\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\r\n\r\n// Copied from graph.ts\r\nfunction time_format(ticks, min, max) {\r\n  if (min && max && ticks) {\r\n    const range = max - min;\r\n    const secPerTick = range / ticks / 1000;\r\n    const oneDay = 86400000;\r\n    const oneYear = 31536000000;\r\n\r\n    if (secPerTick <= 45) {\r\n      return '%H:%M:%S';\r\n    }\r\n    if (secPerTick <= 7200 || range <= oneDay) {\r\n      return '%H:%M';\r\n    }\r\n    if (secPerTick <= 80000) {\r\n      return '%m/%d %H:%M';\r\n    }\r\n    if (secPerTick <= 2419200 || range <= oneYear) {\r\n      return '%m/%d';\r\n    }\r\n    return '%Y-%m';\r\n  }\r\n\r\n  return '%H:%M';\r\n}\r\n\r\nconst FLOT_OPTIONS = {\r\n  legend: {\r\n    show: false,\r\n  },\r\n  series: {\r\n    lines: {\r\n      linewidth: 1,\r\n      zero: false,\r\n    },\r\n    shadowSize: 0,\r\n  },\r\n  grid: {\r\n    minBorderMargin: 0,\r\n    markings: [],\r\n    backgroundColor: null,\r\n    borderWidth: 0,\r\n    // hoverable: true,\r\n    clickable: true,\r\n    color: '#a1a1a1',\r\n    margin: { left: 0, right: 0 },\r\n    labelMarginX: 0,\r\n  },\r\n  selection: {\r\n    mode: 'x',\r\n    color: '#666',\r\n  },\r\n  // crosshair: {\r\n  //   mode: 'x',\r\n  // },\r\n};\r\n\r\ninterface GraphProps {\r\n  data: any[];\r\n  height?: number;\r\n  width?: number;\r\n  id?: string;\r\n  range: RawTimeRange;\r\n  split?: boolean;\r\n  userOptions?: any;\r\n  onChangeTime?: (range: RawTimeRange) => void;\r\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\r\n}\r\n\r\ninterface GraphState {\r\n  /**\r\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\r\n   * Consequently, all series sharing the same alias will share visibility state.\r\n   */\r\n  hiddenSeries: Set<string>;\r\n  showAllTimeSeries: boolean;\r\n}\r\n\r\nexport class Graph extends PureComponent<GraphProps, GraphState> {\r\n  $el: any;\r\n  dynamicOptions = null;\r\n\r\n  state = {\r\n    hiddenSeries: new Set(),\r\n    showAllTimeSeries: false,\r\n  };\r\n\r\n  getGraphData() {\r\n    const { data } = this.props;\r\n\r\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n    this.$el = $(`#${this.props.id}`);\r\n    this.$el.bind('plotselected', this.onPlotSelected);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\r\n    if (\r\n      prevProps.data !== this.props.data ||\r\n      prevProps.range !== this.props.range ||\r\n      prevProps.split !== this.props.split ||\r\n      prevProps.height !== this.props.height ||\r\n      prevProps.width !== this.props.width ||\r\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\r\n    ) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.$el.unbind('plotselected', this.onPlotSelected);\r\n  }\r\n\r\n  onPlotSelected = (event, ranges) => {\r\n    if (this.props.onChangeTime) {\r\n      const range = {\r\n        from: moment(ranges.xaxis.from),\r\n        to: moment(ranges.xaxis.to),\r\n      };\r\n      this.props.onChangeTime(range);\r\n    }\r\n  };\r\n\r\n  getDynamicOptions() {\r\n    const { range, width } = this.props;\r\n    const ticks = (width || 0) / 100;\r\n    let { from, to } = range;\r\n    if (!moment.isMoment(from)) {\r\n      from = dateMath.parse(from, false);\r\n    }\r\n    if (!moment.isMoment(to)) {\r\n      to = dateMath.parse(to, true);\r\n    }\r\n    const min = from.valueOf();\r\n    const max = to.valueOf();\r\n    return {\r\n      xaxis: {\r\n        mode: 'time',\r\n        min: min,\r\n        max: max,\r\n        label: 'Datetime',\r\n        ticks: ticks,\r\n        timezone: 'browser',\r\n        timeformat: time_format(ticks, min, max),\r\n      },\r\n    };\r\n  }\r\n\r\n  onShowAllTimeSeries = () => {\r\n    this.setState(\r\n      {\r\n        showAllTimeSeries: true,\r\n      },\r\n      this.draw\r\n    );\r\n  };\r\n\r\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\r\n    this.setState((state, props) => {\r\n      const { data, onToggleSeries } = props;\r\n      const { hiddenSeries } = state;\r\n\r\n      // Deduplicate series as visibility tracks the alias property\r\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\r\n\r\n      let nextHiddenSeries = new Set();\r\n      if (exclusive) {\r\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\r\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\r\n        }\r\n      } else {\r\n        // Prune hidden series no longer part of those available from the most recent query\r\n        const availableSeries = new Set(data.map(d => d.alias));\r\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\r\n        if (nextHiddenSeries.has(series.alias)) {\r\n          nextHiddenSeries.delete(series.alias);\r\n        } else {\r\n          nextHiddenSeries.add(series.alias);\r\n        }\r\n      }\r\n      if (onToggleSeries) {\r\n        onToggleSeries(series.alias, nextHiddenSeries);\r\n      }\r\n      return {\r\n        hiddenSeries: nextHiddenSeries,\r\n      };\r\n    }, this.draw);\r\n  };\r\n\r\n  draw() {\r\n    const { userOptions = {} } = this.props;\r\n    const { hiddenSeries } = this.state;\r\n    const data = this.getGraphData();\r\n\r\n    const $el = $(`#${this.props.id}`);\r\n    let series = [{ data: [[0, 0]] }];\r\n\r\n    if (data && data.length > 0) {\r\n      series = data\r\n        .filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias))\r\n        .map((ts: TimeSeries) => ({\r\n          color: ts.color,\r\n          label: ts.label,\r\n          data: ts.getFlotPairs('null'),\r\n        }));\r\n    }\r\n\r\n    this.dynamicOptions = this.getDynamicOptions();\r\n\r\n    const options = {\r\n      ...FLOT_OPTIONS,\r\n      ...this.dynamicOptions,\r\n      ...userOptions,\r\n    };\r\n\r\n    $.plot($el, series, options);\r\n  }\r\n\r\n  render() {\r\n    const { height = 100, id = 'graph' } = this.props;\r\n    const { hiddenSeries } = this.state;\r\n    const data = this.getGraphData();\r\n\r\n    return (\r\n      <>\r\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\r\n          <div className=\"time-series-disclaimer\">\r\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\r\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\r\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\r\n              this.props.data.length\r\n            }`}</span>\r\n          </div>\r\n        )}\r\n        <div id={id} className=\"explore-graph\" style={{ height }} />\r\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","/**\r\n * Performs a shallow comparison of two sets with the same item type.\r\n */\r\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n  const it = a.values();\r\n  while (true) {\r\n    const { value, done } = it.next();\r\n    if (done) {\r\n      return true;\r\n    }\r\n    if (!b.has(value)) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a new set with items in both sets using shallow comparison.\r\n */\r\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\r\n  const result = new Set<T>();\r\n  const it = b.values();\r\n  while (true) {\r\n    const { value, done } = it.next();\r\n    if (done) {\r\n      return result;\r\n    }\r\n    if (a.has(value)) {\r\n      result.add(value);\r\n    }\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { ComponentClass } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\n// @ts-ignore\r\nimport { connect } from 'react-redux';\r\n// @ts-ignore\r\nimport _ from 'lodash';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\n// Services & Utils\r\nimport store from 'app/core/store';\r\n\r\n// Components\r\nimport { Alert } from './Error';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport GraphContainer from './GraphContainer';\r\nimport LogsContainer from './LogsContainer';\r\nimport QueryRows from './QueryRows';\r\nimport TableContainer from './TableContainer';\r\nimport TimePicker, { parseTime } from './TimePicker';\r\n\r\n// Actions\r\nimport {\r\n  changeSize,\r\n  changeTime,\r\n  initializeExplore,\r\n  modifyQueries,\r\n  scanStart,\r\n  setQueries,\r\n  refreshExplore,\r\n} from './state/actions';\r\n\r\n// Types\r\nimport { RawTimeRange, TimeRange, DataQuery, ExploreStartPageProps, ExploreDataSourceApi } from '@grafana/ui';\r\nimport { ExploreItemState, ExploreUrlState, RangeScanner, ExploreId, ExploreUpdateState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\nimport { LAST_USED_DATASOURCE_KEY, ensureQueries, DEFAULT_RANGE, DEFAULT_UI_STATE } from 'app/core/utils/explore';\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { ExploreToolbar } from './ExploreToolbar';\r\nimport { scanStopAction } from './state/actionTypes';\r\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\r\n\r\ninterface ExploreProps {\r\n  StartPage?: ComponentClass<ExploreStartPageProps>;\r\n  changeSize: typeof changeSize;\r\n  changeTime: typeof changeTime;\r\n  datasourceError: string;\r\n  datasourceInstance: ExploreDataSourceApi;\r\n  datasourceLoading: boolean | null;\r\n  datasourceMissing: boolean;\r\n  exploreId: ExploreId;\r\n  initializeExplore: typeof initializeExplore;\r\n  initialized: boolean;\r\n  modifyQueries: typeof modifyQueries;\r\n  range: RawTimeRange;\r\n  update: ExploreUpdateState;\r\n  refreshExplore: typeof refreshExplore;\r\n  scanner?: RangeScanner;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  scanStart: typeof scanStart;\r\n  scanStopAction: typeof scanStopAction;\r\n  setQueries: typeof setQueries;\r\n  split: boolean;\r\n  showingStartPage?: boolean;\r\n  supportsGraph: boolean | null;\r\n  supportsLogs: boolean | null;\r\n  supportsTable: boolean | null;\r\n  queryKeys: string[];\r\n  urlState: ExploreUrlState;\r\n}\r\n\r\n/**\r\n * Explore provides an area for quick query iteration for a given datasource.\r\n * Once a datasource is selected it populates the query section at the top.\r\n * When queries are run, their results are being displayed in the main section.\r\n * The datasource determines what kind of query editor it brings, and what kind\r\n * of results viewers it supports. The state is managed entirely in Redux.\r\n *\r\n * SPLIT VIEW\r\n *\r\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\r\n * Since there can be multiple Explores (e.g., left and right) each action needs\r\n * the `exploreId` as first parameter so that the reducer knows which Explore state\r\n * is affected.\r\n *\r\n * DATASOURCE REQUESTS\r\n *\r\n * A click on Run Query creates transactions for all DataQueries for all expanded\r\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\r\n * saves the result. The result viewers construct their data from the currently existing\r\n * transactions.\r\n *\r\n * The result viewers determine some of the query options sent to the datasource, e.g.,\r\n * `format`, to indicate eventual transformations by the datasources' result transformers.\r\n */\r\nexport class Explore extends React.PureComponent<ExploreProps> {\r\n  el: any;\r\n  exploreEvents: Emitter;\r\n  /**\r\n   * Timepicker to control scanning\r\n   */\r\n  timepickerRef: React.RefObject<TimePicker>;\r\n\r\n  constructor(props: ExploreProps) {\r\n    super(props);\r\n    this.exploreEvents = new Emitter();\r\n    this.timepickerRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { exploreId, urlState, initialized } = this.props;\r\n    const { datasource, queries, range = DEFAULT_RANGE, ui = DEFAULT_UI_STATE } = (urlState || {}) as ExploreUrlState;\r\n    const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\r\n    const initialQueries: DataQuery[] = ensureQueries(queries);\r\n    const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\r\n    const width = this.el ? this.el.offsetWidth : 0;\r\n\r\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\r\n    if (!initialized) {\r\n      this.props.initializeExplore(\r\n        exploreId,\r\n        initialDatasource,\r\n        initialQueries,\r\n        initialRange,\r\n        width,\r\n        this.exploreEvents,\r\n        ui\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.exploreEvents.removeAllListeners();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ExploreProps) {\r\n    this.refreshExplore();\r\n  }\r\n\r\n  getRef = (el: any) => {\r\n    this.el = el;\r\n  };\r\n\r\n  onChangeTime = (range: TimeRange, changedByScanner?: boolean) => {\r\n    if (this.props.scanning && !changedByScanner) {\r\n      this.onStopScanning();\r\n    }\r\n    this.props.changeTime(this.props.exploreId, range);\r\n  };\r\n\r\n  // Use this in help pages to set page to a single query\r\n  onClickExample = (query: DataQuery) => {\r\n    this.props.setQueries(this.props.exploreId, [query]);\r\n  };\r\n\r\n  onClickLabel = (key: string, value: string) => {\r\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\r\n  };\r\n\r\n  onModifyQueries = (action: any, index?: number) => {\r\n    const { datasourceInstance } = this.props;\r\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\r\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\r\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\r\n    }\r\n  };\r\n\r\n  onResize = (size: { height: number; width: number }) => {\r\n    this.props.changeSize(this.props.exploreId, size);\r\n  };\r\n\r\n  onStartScanning = () => {\r\n    // Scanner will trigger a query\r\n    const scanner = this.scanPreviousRange;\r\n    this.props.scanStart(this.props.exploreId, scanner);\r\n  };\r\n\r\n  scanPreviousRange = (): RawTimeRange => {\r\n    // Calling move() on the timepicker will trigger this.onChangeTime()\r\n    return this.timepickerRef.current.move(-1, true);\r\n  };\r\n\r\n  onStopScanning = () => {\r\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\r\n  };\r\n\r\n  refreshExplore = () => {\r\n    const { exploreId, update } = this.props;\r\n\r\n    if (update.queries || update.ui || update.range || update.datasource) {\r\n      this.props.refreshExplore(exploreId);\r\n    }\r\n  };\r\n\r\n  renderEmptyState = () => {\r\n    return (\r\n      <div className=\"explore-container\">\r\n        <NoDataSourceCallToAction />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      StartPage,\r\n      datasourceInstance,\r\n      datasourceError,\r\n      datasourceLoading,\r\n      datasourceMissing,\r\n      exploreId,\r\n      showingStartPage,\r\n      split,\r\n      supportsGraph,\r\n      supportsLogs,\r\n      supportsTable,\r\n      queryKeys,\r\n    } = this.props;\r\n    const exploreClass = split ? 'explore explore-split' : 'explore';\r\n\r\n    return (\r\n      <div className={exploreClass} ref={this.getRef}>\r\n        <ExploreToolbar exploreId={exploreId} timepickerRef={this.timepickerRef} onChangeTime={this.onChangeTime} />\r\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\r\n        {datasourceMissing ? this.renderEmptyState() : null}\r\n\r\n        {datasourceError && (\r\n          <div className=\"explore-container\">\r\n            <Alert message={`Error connecting to datasource: ${datasourceError}`} />\r\n          </div>\r\n        )}\r\n\r\n        {datasourceInstance && !datasourceError && (\r\n          <div className=\"explore-container\">\r\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\r\n            <AutoSizer onResize={this.onResize} disableHeight>\r\n              {({ width }) => {\r\n                if (width === 0) {\r\n                  return null;\r\n                }\r\n\r\n                return (\r\n                  <main className=\"m-t-2\" style={{ width }}>\r\n                    <ErrorBoundary>\r\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\r\n                      {!showingStartPage && (\r\n                        <>\r\n                          {supportsGraph && !supportsLogs && <GraphContainer width={width} exploreId={exploreId} />}\r\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\r\n                          {supportsLogs && (\r\n                            <LogsContainer\r\n                              width={width}\r\n                              exploreId={exploreId}\r\n                              onChangeTime={this.onChangeTime}\r\n                              onClickLabel={this.onClickLabel}\r\n                              onStartScanning={this.onStartScanning}\r\n                              onStopScanning={this.onStopScanning}\r\n                            />\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </ErrorBoundary>\r\n                  </main>\r\n                );\r\n              }}\r\n            </AutoSizer>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\r\n  const explore = state.explore;\r\n  const { split } = explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const {\r\n    StartPage,\r\n    datasourceError,\r\n    datasourceInstance,\r\n    datasourceLoading,\r\n    datasourceMissing,\r\n    initialized,\r\n    range,\r\n    showingStartPage,\r\n    supportsGraph,\r\n    supportsLogs,\r\n    supportsTable,\r\n    queryKeys,\r\n    urlState,\r\n    update,\r\n  } = item;\r\n  return {\r\n    StartPage,\r\n    datasourceError,\r\n    datasourceInstance,\r\n    datasourceLoading,\r\n    datasourceMissing,\r\n    initialized,\r\n    range,\r\n    showingStartPage,\r\n    split,\r\n    supportsGraph,\r\n    supportsLogs,\r\n    supportsTable,\r\n    queryKeys,\r\n    urlState,\r\n    update,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changeSize,\r\n  changeTime,\r\n  initializeExplore,\r\n  modifyQueries,\r\n  refreshExplore,\r\n  scanStart,\r\n  scanStopAction,\r\n  setQueries,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Explore)\r\n);\r\n","import React, { FC } from 'react';\r\n\r\ninterface Props {\r\n  message: any;\r\n}\r\n\r\nexport const Alert: FC<Props> = props => {\r\n  const { message } = props;\r\n  return (\r\n    <div className=\"gf-form-group section\">\r\n      <div className=\"alert-error alert\">\r\n        <div className=\"alert-icon\">\r\n          <i className=\"fa fa-exclamation-triangle\" />\r\n        </div>\r\n        <div className=\"alert-body\">\r\n          <div className=\"alert-title\">{message}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { TimeRange, RawTimeRange } from '@grafana/ui';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { toggleGraph, changeTime } from './state/actions';\r\nimport Graph from './Graph';\r\nimport Panel from './Panel';\r\n\r\ninterface GraphContainerProps {\r\n  exploreId: ExploreId;\r\n  graphResult?: any[];\r\n  loading: boolean;\r\n  range: RawTimeRange;\r\n  showingGraph: boolean;\r\n  showingTable: boolean;\r\n  split: boolean;\r\n  toggleGraph: typeof toggleGraph;\r\n  changeTime: typeof changeTime;\r\n  width: number;\r\n}\r\n\r\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\r\n  onClickGraphButton = () => {\r\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\r\n  };\r\n\r\n  onChangeTime = (timeRange: TimeRange) => {\r\n    this.props.changeTime(this.props.exploreId, timeRange);\r\n  };\r\n\r\n  render() {\r\n    const { exploreId, graphResult, loading, showingGraph, showingTable, range, split, width } = this.props;\r\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\r\n\r\n    if (!graphResult) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\r\n        <Graph\r\n          data={graphResult}\r\n          height={graphHeight}\r\n          id={`explore-graph-${exploreId}`}\r\n          onChangeTime={this.onChangeTime}\r\n          range={range}\r\n          split={split}\r\n          width={width}\r\n        />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const { split } = explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\r\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\r\n  return { graphResult, loading, range, showingGraph, showingTable, split };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleGraph,\r\n  changeTime,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(GraphContainer)\r\n);\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\nimport { RawTimeRange, TimeRange, LogLevel } from '@grafana/ui';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { LogsModel, LogsDedupStrategy } from 'app/core/logs_model';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { toggleLogs, changeDedupStrategy } from './state/actions';\r\nimport Logs from './Logs';\r\nimport Panel from './Panel';\r\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\r\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\r\n\r\ninterface LogsContainerProps {\r\n  exploreId: ExploreId;\r\n  loading: boolean;\r\n  logsHighlighterExpressions?: string[];\r\n  logsResult?: LogsModel;\r\n  dedupedResult?: LogsModel;\r\n  onChangeTime: (range: TimeRange) => void;\r\n  onClickLabel: (key: string, value: string) => void;\r\n  onStartScanning: () => void;\r\n  onStopScanning: () => void;\r\n  range: RawTimeRange;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  showingLogs: boolean;\r\n  toggleLogs: typeof toggleLogs;\r\n  toggleLogLevelAction: typeof toggleLogLevelAction;\r\n  changeDedupStrategy: typeof changeDedupStrategy;\r\n  dedupStrategy: LogsDedupStrategy;\r\n  hiddenLogLevels: Set<LogLevel>;\r\n  width: number;\r\n}\r\n\r\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\r\n  onClickLogsButton = () => {\r\n    this.props.toggleLogs(this.props.exploreId, this.props.showingLogs);\r\n  };\r\n\r\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\r\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\r\n  };\r\n\r\n  hangleToggleLogLevel = (hiddenLogLevels: Set<LogLevel>) => {\r\n    const { exploreId } = this.props;\r\n    this.props.toggleLogLevelAction({\r\n      exploreId,\r\n      hiddenLogLevels,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      exploreId,\r\n      loading,\r\n      logsHighlighterExpressions,\r\n      logsResult,\r\n      dedupedResult,\r\n      onChangeTime,\r\n      onClickLabel,\r\n      onStartScanning,\r\n      onStopScanning,\r\n      range,\r\n      showingLogs,\r\n      scanning,\r\n      scanRange,\r\n      width,\r\n      hiddenLogLevels,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\r\n        <Logs\r\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\r\n          data={logsResult}\r\n          dedupedData={dedupedResult}\r\n          exploreId={exploreId}\r\n          key={logsResult && logsResult.id}\r\n          highlighterExpressions={logsHighlighterExpressions}\r\n          loading={loading}\r\n          onChangeTime={onChangeTime}\r\n          onClickLabel={onClickLabel}\r\n          onStartScanning={onStartScanning}\r\n          onStopScanning={onStopScanning}\r\n          onDedupStrategyChange={this.handleDedupStrategyChange}\r\n          onToggleLogLevel={this.hangleToggleLogLevel}\r\n          range={range}\r\n          scanning={scanning}\r\n          scanRange={scanRange}\r\n          width={width}\r\n          hiddenLogLevels={hiddenLogLevels}\r\n        />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, range } = item;\r\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\r\n  const { showingLogs, dedupStrategy } = exploreItemUIStateSelector(item);\r\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\r\n  const dedupedResult = deduplicatedLogsSelector(item);\r\n\r\n  return {\r\n    loading,\r\n    logsHighlighterExpressions,\r\n    logsResult,\r\n    scanning,\r\n    scanRange,\r\n    showingLogs,\r\n    range,\r\n    dedupStrategy,\r\n    hiddenLogLevels,\r\n    dedupedResult,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleLogs,\r\n  changeDedupStrategy,\r\n  toggleLogLevelAction,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(LogsContainer)\r\n);\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Components\r\nimport QueryRow from './QueryRow';\r\n\r\n// Types\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { ExploreId } from 'app/types/explore';\r\n\r\ninterface QueryRowsProps {\r\n  className?: string;\r\n  exploreEvents: Emitter;\r\n  exploreId: ExploreId;\r\n  queryKeys: string[];\r\n}\r\n\r\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\r\n  render() {\r\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\r\n    return (\r\n      <div className={className}>\r\n        {queryKeys.map((key, index) => {\r\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\nimport _ from 'lodash';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\n// Components\r\nimport QueryEditor from './QueryEditor';\r\nimport QueryTransactionStatus from './QueryTransactionStatus';\r\n\r\n// Actions\r\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\r\n\r\n// Types\r\nimport { StoreState } from 'app/types';\r\nimport { RawTimeRange, DataQuery, ExploreDataSourceApi, QueryHint, QueryFixAction } from '@grafana/ui';\r\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\r\n\r\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\r\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\r\n  if (transaction) {\r\n    return transaction.hints[0];\r\n  }\r\n  return undefined;\r\n}\r\n\r\ninterface QueryRowProps {\r\n  addQueryRow: typeof addQueryRow;\r\n  changeQuery: typeof changeQuery;\r\n  className?: string;\r\n  exploreId: ExploreId;\r\n  datasourceInstance: ExploreDataSourceApi;\r\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\r\n  history: HistoryItem[];\r\n  index: number;\r\n  query: DataQuery;\r\n  modifyQueries: typeof modifyQueries;\r\n  queryTransactions: QueryTransaction[];\r\n  exploreEvents: Emitter;\r\n  range: RawTimeRange;\r\n  removeQueryRowAction: typeof removeQueryRowAction;\r\n  runQueries: typeof runQueries;\r\n}\r\n\r\nexport class QueryRow extends PureComponent<QueryRowProps> {\r\n  onExecuteQuery = () => {\r\n    const { exploreId } = this.props;\r\n    this.props.runQueries(exploreId);\r\n  };\r\n\r\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\r\n    const { datasourceInstance, exploreId, index } = this.props;\r\n    this.props.changeQuery(exploreId, query, index, override);\r\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\r\n      // Live preview of log search matches. Only use on first row for now\r\n      this.updateLogsHighlights(query);\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log('QueryRow will unmount');\r\n  }\r\n\r\n  onClickAddButton = () => {\r\n    const { exploreId, index } = this.props;\r\n    this.props.addQueryRow(exploreId, index);\r\n  };\r\n\r\n  onClickClearButton = () => {\r\n    this.onChangeQuery(null, true);\r\n  };\r\n\r\n  onClickHintFix = (action: QueryFixAction) => {\r\n    const { datasourceInstance, exploreId, index } = this.props;\r\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\r\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\r\n      this.props.modifyQueries(exploreId, action, index, modifier);\r\n    }\r\n  };\r\n\r\n  onClickRemoveButton = () => {\r\n    const { exploreId, index } = this.props;\r\n    this.props.removeQueryRowAction({ exploreId, index });\r\n  };\r\n\r\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\r\n    const { datasourceInstance } = this.props;\r\n    if (datasourceInstance.getHighlighterExpression) {\r\n      const { exploreId } = this.props;\r\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\r\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\r\n    }\r\n  }, 500);\r\n\r\n  render() {\r\n    const { datasourceInstance, history, index, query, queryTransactions, exploreEvents, range } = this.props;\r\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\r\n    const transactionWithError = transactions.find(t => t.error !== undefined);\r\n    const hint = getFirstHintFromTransactions(transactions);\r\n    const queryError = transactionWithError ? transactionWithError.error : null;\r\n    const QueryField = datasourceInstance.pluginExports.ExploreQueryField;\r\n    return (\r\n      <div className=\"query-row\">\r\n        <div className=\"query-row-status\">\r\n          <QueryTransactionStatus transactions={transactions} />\r\n        </div>\r\n        <div className=\"query-row-field flex-shrink-1\">\r\n          {QueryField ? (\r\n            <QueryField\r\n              datasource={datasourceInstance}\r\n              query={query}\r\n              error={queryError}\r\n              hint={hint}\r\n              history={history}\r\n              onExecuteQuery={this.onExecuteQuery}\r\n              onExecuteHint={this.onClickHintFix}\r\n              onQueryChange={this.onChangeQuery}\r\n            />\r\n          ) : (\r\n            <QueryEditor\r\n              datasource={datasourceInstance}\r\n              error={queryError}\r\n              onQueryChange={this.onChangeQuery}\r\n              onExecuteQuery={this.onExecuteQuery}\r\n              initialQuery={query}\r\n              exploreEvents={exploreEvents}\r\n              range={range}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"gf-form-inline flex-shrink-0\">\r\n          <div className=\"gf-form\">\r\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\r\n              <i className=\"fa fa-times\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"gf-form\">\r\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\r\n              <i className=\"fa fa-plus\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"gf-form\">\r\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\r\n              <i className=\"fa fa-minus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId, index }) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { datasourceInstance, history, queries, queryTransactions, range } = item;\r\n  const query = queries[index];\r\n  return { datasourceInstance, history, query, queryTransactions, range };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addQueryRow,\r\n  changeQuery,\r\n  highlightLogsExpressionAction,\r\n  modifyQueries,\r\n  removeQueryRowAction,\r\n  runQueries,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(QueryRow)\r\n);\r\n","// Libraries\r\nimport React, { PureComponent } from 'react';\r\n\r\n// Services\r\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\r\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\r\n\r\n// Types\r\nimport { Emitter } from 'app/core/utils/emitter';\r\nimport { RawTimeRange, DataQuery } from '@grafana/ui';\r\nimport 'app/features/plugins/plugin_loader';\r\n\r\ninterface QueryEditorProps {\r\n  datasource: any;\r\n  error?: string | JSX.Element;\r\n  onExecuteQuery?: () => void;\r\n  onQueryChange?: (value: DataQuery) => void;\r\n  initialQuery: DataQuery;\r\n  exploreEvents: Emitter;\r\n  range: RawTimeRange;\r\n}\r\n\r\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\r\n  element: any;\r\n  component: AngularComponent;\r\n\r\n  async componentDidMount() {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\r\n    this.initTimeSrv(range);\r\n\r\n    const loader = getAngularLoader();\r\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\r\n    const target = { datasource: datasource.name, ...initialQuery };\r\n    const scopeProps = {\r\n      ctrl: {\r\n        datasource,\r\n        target,\r\n        refresh: () => {\r\n          this.props.onQueryChange(target);\r\n          this.props.onExecuteQuery();\r\n        },\r\n        onQueryChange: () => {\r\n          this.props.onQueryChange(target);\r\n        },\r\n        events: exploreEvents,\r\n        panel: { datasource, targets: [target] },\r\n        dashboard: {},\r\n      },\r\n    };\r\n\r\n    this.component = loader.load(this.element, scopeProps, template);\r\n    this.props.onQueryChange(target);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.component) {\r\n      this.component.destroy();\r\n    }\r\n  }\r\n\r\n  initTimeSrv(range) {\r\n    const timeSrv = getTimeSrv();\r\n    timeSrv.init({\r\n      time: range,\r\n      refresh: false,\r\n      getTimezone: () => 'utc',\r\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\r\nimport { StoreState } from 'app/types';\r\n\r\nimport { toggleTable } from './state/actions';\r\nimport Table from './Table';\r\nimport Panel from './Panel';\r\nimport TableModel from 'app/core/table_model';\r\n\r\ninterface TableContainerProps {\r\n  exploreId: ExploreId;\r\n  loading: boolean;\r\n  onClickCell: (key: string, value: string) => void;\r\n  showingTable: boolean;\r\n  tableResult?: TableModel;\r\n  toggleTable: typeof toggleTable;\r\n}\r\n\r\nexport class TableContainer extends PureComponent<TableContainerProps> {\r\n  onClickTableButton = () => {\r\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\r\n  };\r\n\r\n  render() {\r\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\r\n\r\n    if (!tableResult) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\r\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: StoreState, { exploreId }) {\r\n  const explore = state.explore;\r\n  const item: ExploreItemState = explore[exploreId];\r\n  const { queryTransactions, showingTable, tableResult } = item;\r\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\r\n  return { loading, showingTable, tableResult };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTable,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(TableContainer)\r\n);\r\n","import _ from 'lodash';\r\nimport React, { PureComponent } from 'react';\r\nimport ReactTable from 'react-table';\r\n\r\nimport TableModel from 'app/core/table_model';\r\n\r\nconst EMPTY_TABLE = new TableModel();\r\n// Identify columns that contain values\r\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\r\n\r\ninterface TableProps {\r\n  data: TableModel;\r\n  loading: boolean;\r\n  onClickCell?: (columnKey: string, rowValue: string) => void;\r\n}\r\n\r\nfunction prepareRows(rows, columnNames) {\r\n  return rows.map(cells => _.zipObject(columnNames, cells));\r\n}\r\n\r\nexport default class Table extends PureComponent<TableProps> {\r\n  getCellProps = (state, rowInfo, column) => {\r\n    return {\r\n      onClick: (e: React.SyntheticEvent) => {\r\n        // Only handle click on link, not the cell\r\n        if (e.target) {\r\n          const link = e.target as HTMLElement;\r\n          if (link.className === 'link') {\r\n            const columnKey = column.Header;\r\n            const rowValue = rowInfo.row[columnKey];\r\n            this.props.onClickCell(columnKey, rowValue);\r\n          }\r\n        }\r\n      },\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { data, loading } = this.props;\r\n    const tableModel = data || EMPTY_TABLE;\r\n    const columnNames = tableModel.columns.map(({ text }) => text);\r\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\r\n      Header: () => <span title={text}>{text}</span>,\r\n      accessor: text,\r\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\r\n      show: text !== 'Time',\r\n      Cell: row => (\r\n        <span className={filterable ? 'link' : ''} title={text + ': ' + row.value}>\r\n          {row.value}\r\n        </span>\r\n      ),\r\n    }));\r\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\r\n\r\n    return (\r\n      <ReactTable\r\n        columns={columns}\r\n        data={tableModel.rows}\r\n        getTdProps={this.getCellProps}\r\n        loading={loading}\r\n        minRows={0}\r\n        noDataText={noDataText}\r\n        resolveData={data => prepareRows(data, columnNames)}\r\n        showPagination={Boolean(data)}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { hot } from 'react-hot-loader';\r\n\r\nimport { ExploreId } from 'app/types/explore';\r\nimport { DataSourceSelectItem, RawTimeRange, TimeRange } from '@grafana/ui';\r\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\r\nimport { StoreState } from 'app/types/store';\r\nimport { changeDatasource, clearQueries, splitClose, runQueries, splitOpen } from './state/actions';\r\nimport TimePicker from './TimePicker';\r\nimport { ClickOutsideWrapper } from 'app/core/components/ClickOutsideWrapper/ClickOutsideWrapper';\r\n\r\nenum IconSide {\r\n  left = 'left',\r\n  right = 'right',\r\n}\r\n\r\nconst createResponsiveButton = (options: {\r\n  splitted: boolean;\r\n  title: string;\r\n  onClick: () => void;\r\n  buttonClassName?: string;\r\n  iconClassName?: string;\r\n  iconSide?: IconSide;\r\n}) => {\r\n  const defaultOptions = {\r\n    iconSide: IconSide.left,\r\n  };\r\n  const props = { ...options, defaultOptions };\r\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide } = props;\r\n\r\n  return (\r\n    <button className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`} onClick={onClick}>\r\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName} icon-margin-right`} /> : null}\r\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\r\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName} icon-margin-left`} /> : null}\r\n    </button>\r\n  );\r\n};\r\n\r\ninterface OwnProps {\r\n  exploreId: ExploreId;\r\n  timepickerRef: React.RefObject<TimePicker>;\r\n  onChangeTime: (range: TimeRange, changedByScanner?: boolean) => void;\r\n}\r\n\r\ninterface StateProps {\r\n  datasourceMissing: boolean;\r\n  exploreDatasources: DataSourceSelectItem[];\r\n  loading: boolean;\r\n  range: RawTimeRange;\r\n  selectedDatasource: DataSourceSelectItem;\r\n  splitted: boolean;\r\n}\r\n\r\ninterface DispatchProps {\r\n  changeDatasource: typeof changeDatasource;\r\n  clearAll: typeof clearQueries;\r\n  runQuery: typeof runQueries;\r\n  closeSplit: typeof splitClose;\r\n  split: typeof splitOpen;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps & OwnProps;\r\n\r\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  onChangeDatasource = async option => {\r\n    this.props.changeDatasource(this.props.exploreId, option.value);\r\n  };\r\n\r\n  onClearAll = () => {\r\n    this.props.clearAll(this.props.exploreId);\r\n  };\r\n\r\n  onRunQuery = () => {\r\n    this.props.runQuery(this.props.exploreId);\r\n  };\r\n\r\n  onCloseTimePicker = () => {\r\n    this.props.timepickerRef.current.setState({ isOpen: false });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      datasourceMissing,\r\n      exploreDatasources,\r\n      exploreId,\r\n      loading,\r\n      range,\r\n      selectedDatasource,\r\n      splitted,\r\n      timepickerRef,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\r\n        <div className=\"explore-toolbar-item\">\r\n          <div className=\"explore-toolbar-header\">\r\n            <div className=\"explore-toolbar-header-title\">\r\n              {exploreId === 'left' && (\r\n                <span className=\"navbar-page-btn\">\r\n                  <i className=\"gicon gicon-explore\" />\r\n                  Explore\r\n                </span>\r\n              )}\r\n            </div>\r\n            {splitted && (\r\n              <a className=\"explore-toolbar-header-close\" onClick={() => this.props.closeSplit(exploreId)}>\r\n                <i className=\"fa fa-times fa-fw\" />\r\n              </a>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"explore-toolbar-item\">\r\n          <div className=\"explore-toolbar-content\">\r\n            {!datasourceMissing ? (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                <div className=\"datasource-picker\">\r\n                  <DataSourcePicker\r\n                    onChange={this.onChangeDatasource}\r\n                    datasources={exploreDatasources}\r\n                    current={selectedDatasource}\r\n                  />\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n            {exploreId === 'left' && !splitted ? (\r\n              <div className=\"explore-toolbar-content-item\">\r\n                {createResponsiveButton({\r\n                  splitted,\r\n                  title: 'Split',\r\n                  onClick: this.props.split,\r\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\r\n                  iconSide: IconSide.left,\r\n                })}\r\n              </div>\r\n            ) : null}\r\n            <div className=\"explore-toolbar-content-item timepicker\">\r\n              <ClickOutsideWrapper onClick={this.onCloseTimePicker}>\r\n                <TimePicker ref={timepickerRef} range={range} onChangeTime={this.props.onChangeTime} />\r\n              </ClickOutsideWrapper>\r\n            </div>\r\n            <div className=\"explore-toolbar-content-item\">\r\n              <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClearAll}>\r\n                Clear All\r\n              </button>\r\n            </div>\r\n            <div className=\"explore-toolbar-content-item\">\r\n              {createResponsiveButton({\r\n                splitted,\r\n                title: 'Run Query',\r\n                onClick: this.onRunQuery,\r\n                buttonClassName: 'navbar-button--secondary',\r\n                iconClassName: loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\r\n                iconSide: IconSide.right,\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\r\n  const splitted = state.explore.split;\r\n  const exploreItem = state.explore[exploreId];\r\n  const { datasourceInstance, datasourceMissing, exploreDatasources, queryTransactions, range } = exploreItem;\r\n  const selectedDatasource = datasourceInstance\r\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\r\n    : undefined;\r\n  const loading = queryTransactions.some(qt => !qt.done);\r\n\r\n  return {\r\n    datasourceMissing,\r\n    exploreDatasources,\r\n    loading,\r\n    range,\r\n    selectedDatasource,\r\n    splitted,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps: DispatchProps = {\r\n  changeDatasource,\r\n  clearAll: clearQueries,\r\n  runQuery: runQueries,\r\n  closeSplit: splitClose,\r\n  split: splitOpen,\r\n};\r\n\r\nexport const ExploreToolbar = hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(UnConnectedExploreToolbar)\r\n);\r\n","import React, { useContext } from 'react';\r\nimport { css } from 'emotion';\r\nimport { ThemeContext, ExtraLargeLinkButton, CallToActionCard } from '@grafana/ui';\r\n\r\nexport const NoDataSourceCallToAction = () => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const message =\r\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\r\n  const footer = (\r\n    <>\r\n      <i className=\"fa fa-rocket\" />\r\n      <> ProTip: You can also define data sources through configuration files. </>\r\n      <a\r\n        href=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=explore\"\r\n        target=\"_blank\"\r\n        className=\"text-link\"\r\n      >\r\n        Learn more\r\n      </a>\r\n    </>\r\n  );\r\n\r\n  const ctaElement = (\r\n    <ExtraLargeLinkButton href=\"/datasources/new\" icon=\"gicon gicon-add-datasources\">\r\n      Add data source\r\n    </ExtraLargeLinkButton>\r\n  );\r\n\r\n  const cardClassName = css`\r\n    max-width: ${theme.breakpoints.lg};\r\n  `;\r\n\r\n  return (\r\n    <CallToActionCard\r\n      callToActionElement={ctaElement}\r\n      className={cardClassName}\r\n      footer={footer}\r\n      message={message}\r\n      theme={theme}\r\n    />\r\n  );\r\n};\r\n","import React, { FC, ReactNode, PureComponent } from 'react';\r\nimport { Tooltip } from '@grafana/ui';\r\n\r\ninterface ToggleButtonGroupProps {\r\n  label?: string;\r\n  children: JSX.Element[];\r\n  transparent?: boolean;\r\n}\r\n\r\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\r\n  render() {\r\n    const { children, label, transparent } = this.props;\r\n\r\n    return (\r\n      <div className=\"gf-form\">\r\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\r\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface ToggleButtonProps {\r\n  onChange?: (value) => void;\r\n  selected?: boolean;\r\n  value: any;\r\n  className?: string;\r\n  children: ReactNode;\r\n  tooltip?: string;\r\n}\r\n\r\nexport const ToggleButton: FC<ToggleButtonProps> = ({\r\n  children,\r\n  selected,\r\n  className = '',\r\n  value = null,\r\n  tooltip,\r\n  onChange,\r\n}) => {\r\n  const onClick = event => {\r\n    event.stopPropagation();\r\n    if (onChange) {\r\n      onChange(value);\r\n    }\r\n  };\r\n\r\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\r\n  const button = (\r\n    <button className={btnClassName} onClick={onClick}>\r\n      <span>{children}</span>\r\n    </button>\r\n  );\r\n\r\n  if (tooltip) {\r\n    return (\r\n      <Tooltip content={tooltip} placement=\"bottom\">\r\n        {button}\r\n      </Tooltip>\r\n    );\r\n  } else {\r\n    return button;\r\n  }\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport classnames from 'classnames';\r\nimport { LogLabelStatsModel } from 'app/core/logs_model';\r\n\r\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\r\n  const { active, count, proportion, value } = logLabelStatsModel;\r\n  const percent = `${Math.round(proportion * 100)}%`;\r\n  const barStyle = { width: percent };\r\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"logs-stats-row__label\">\r\n        <div className=\"logs-stats-row__value\" title={value}>\r\n          {value}\r\n        </div>\r\n        <div className=\"logs-stats-row__count\">{count}</div>\r\n        <div className=\"logs-stats-row__percent\">{percent}</div>\r\n      </div>\r\n      <div className=\"logs-stats-row__bar\">\r\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst STATS_ROW_LIMIT = 5;\r\n\r\ninterface Props {\r\n  stats: LogLabelStatsModel[];\r\n  label: string;\r\n  value: string;\r\n  rowCount: number;\r\n  onClickClose: () => void;\r\n}\r\n\r\nexport class LogLabelStats extends PureComponent<Props> {\r\n  render() {\r\n    const { label, rowCount, stats, value, onClickClose } = this.props;\r\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\r\n    let activeRow = topRows.find(row => row.value === value);\r\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\r\n    const insertActiveRow = !activeRow;\r\n\r\n    // Remove active row from other to show extra\r\n    if (insertActiveRow) {\r\n      activeRow = otherRows.find(row => row.value === value);\r\n      otherRows = otherRows.filter(row => row.value !== value);\r\n    }\r\n\r\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\r\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\r\n    const total = topCount + otherCount;\r\n    const otherProportion = otherCount / total;\r\n\r\n    return (\r\n      <div className=\"logs-stats\">\r\n        <div className=\"logs-stats__header\">\r\n          <span className=\"logs-stats__title\">\r\n            {label}: {total} of {rowCount} rows have that label\r\n          </span>\r\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\r\n        </div>\r\n        <div className=\"logs-stats__body\">\r\n          {topRows.map(stat => (\r\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\r\n          ))}\r\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\r\n          {otherCount > 0 && (\r\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\r\nimport { LogLabelStats } from './LogLabelStats';\r\n\r\ninterface Props {\r\n  getRows?: () => LogRowModel[];\r\n  label: string;\r\n  plain?: boolean;\r\n  value: string;\r\n  onClickLabel?: (label: string, value: string) => void;\r\n}\r\n\r\ninterface State {\r\n  showStats: boolean;\r\n  stats: LogLabelStatsModel[];\r\n}\r\n\r\nexport class LogLabel extends PureComponent<Props, State> {\r\n  state = {\r\n    stats: null,\r\n    showStats: false,\r\n  };\r\n\r\n  onClickClose = () => {\r\n    this.setState({ showStats: false });\r\n  };\r\n\r\n  onClickLabel = () => {\r\n    const { onClickLabel, label, value } = this.props;\r\n    if (onClickLabel) {\r\n      onClickLabel(label, value);\r\n    }\r\n  };\r\n\r\n  onClickStats = () => {\r\n    this.setState(state => {\r\n      if (state.showStats) {\r\n        return { showStats: false, stats: null };\r\n      }\r\n      const allRows = this.props.getRows();\r\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\r\n      return { showStats: true, stats };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getRows, label, plain, value } = this.props;\r\n    const { showStats, stats } = this.state;\r\n    const tooltip = `${label}: ${value}`;\r\n    return (\r\n      <span className=\"logs-label\">\r\n        <span className=\"logs-label__value\" title={tooltip}>\r\n          {value}\r\n        </span>\r\n        {!plain && (\r\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\r\n        )}\r\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\r\n        {showStats && (\r\n          <span className=\"logs-label__stats\">\r\n            <LogLabelStats\r\n              stats={stats}\r\n              rowCount={getRows().length}\r\n              label={label}\r\n              value={value}\r\n              onClickClose={this.onClickClose}\r\n            />\r\n          </span>\r\n        )}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { LogRowModel } from 'app/core/logs_model';\r\nimport { LogLabel } from './LogLabel';\r\nimport { Labels } from '@grafana/ui';\r\n\r\ninterface Props {\r\n  getRows?: () => LogRowModel[];\r\n  labels: Labels;\r\n  plain?: boolean;\r\n  onClickLabel?: (label: string, value: string) => void;\r\n}\r\n\r\nexport class LogLabels extends PureComponent<Props> {\r\n  render() {\r\n    const { getRows, labels, onClickLabel, plain } = this.props;\r\n    return (\r\n      <span className=\"logs-labels\">\r\n        {Object.keys(labels).map(key => (\r\n          <LogLabel\r\n            key={key}\r\n            getRows={getRows}\r\n            label={key}\r\n            value={labels[key]}\r\n            plain={plain}\r\n            onClickLabel={onClickLabel}\r\n          />\r\n        ))}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport ansicolor from 'vendor/ansicolor/ansicolor';\r\n\r\ninterface Style {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface ParsedChunk {\r\n  style: Style;\r\n  text: string;\r\n}\r\n\r\nfunction convertCSSToStyle(css: string): Style {\r\n  return css.split(/;\\s*/).reduce((accumulated, line) => {\r\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\r\n\r\n    if (match && match[1] && match[2]) {\r\n      const key = match[1].replace(/-(a-z)/g, (_, character) => character.toUpperCase());\r\n      accumulated[key] = match[2];\r\n    }\r\n\r\n    return accumulated;\r\n  }, {});\r\n}\r\n\r\ninterface Props {\r\n  value: string;\r\n}\r\n\r\ninterface State {\r\n  chunks: ParsedChunk[];\r\n  prevValue: string;\r\n}\r\n\r\nexport class LogMessageAnsi extends PureComponent<Props, State> {\r\n  state = {\r\n    chunks: [],\r\n    prevValue: '',\r\n  };\r\n\r\n  static getDerivedStateFromProps(props: Props, state: State) {\r\n    if (props.value === state.prevValue) {\r\n      return null;\r\n    }\r\n\r\n    const parsed = ansicolor.parse(props.value);\r\n\r\n    return {\r\n      chunks: parsed.spans.map(span => {\r\n        return span.css\r\n          ? {\r\n              style: convertCSSToStyle(span.css),\r\n              text: span.text,\r\n            }\r\n          : { text: span.text };\r\n      }),\r\n      prevValue: props.value,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { chunks } = this.state;\r\n\r\n    return chunks.map((chunk, index) =>\r\n      chunk.style ? (\r\n        <span key={index} style={chunk.style}>\r\n          {chunk.text}\r\n        </span>\r\n      ) : (\r\n        chunk.text\r\n      )\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport _ from 'lodash';\r\nimport Highlighter from 'react-highlight-words';\r\nimport classnames from 'classnames';\r\n\r\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\r\nimport { LogLabels } from './LogLabels';\r\nimport { findHighlightChunksInText } from 'app/core/utils/text';\r\nimport { LogLabelStats } from './LogLabelStats';\r\nimport { LogMessageAnsi } from './LogMessageAnsi';\r\n\r\ninterface Props {\r\n  highlighterExpressions?: string[];\r\n  row: LogRowModel;\r\n  showDuplicates: boolean;\r\n  showLabels: boolean;\r\n  showLocalTime: boolean;\r\n  showUtc: boolean;\r\n  getRows: () => LogRowModel[];\r\n  onClickLabel?: (label: string, value: string) => void;\r\n}\r\n\r\ninterface State {\r\n  fieldCount: number;\r\n  fieldLabel: string;\r\n  fieldStats: LogLabelStatsModel[];\r\n  fieldValue: string;\r\n  parsed: boolean;\r\n  parser?: LogsParser;\r\n  parsedFieldHighlights: string[];\r\n  showFieldStats: boolean;\r\n}\r\n\r\n/**\r\n * Renders a highlighted field.\r\n * When hovering, a stats icon is shown.\r\n */\r\nconst FieldHighlight = onClick => props => {\r\n  return (\r\n    <span className={props.className} style={props.style}>\r\n      {props.children}\r\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\r\n    </span>\r\n  );\r\n};\r\n\r\n/**\r\n * Renders a log line.\r\n *\r\n * When user hovers over it for a certain time, it lazily parses the log line.\r\n * Once a parser is found, it will determine fields, that will be highlighted.\r\n * When the user requests stats for a field, they will be calculated and rendered below the row.\r\n */\r\nexport class LogRow extends PureComponent<Props, State> {\r\n  mouseMessageTimer: NodeJS.Timer;\r\n\r\n  state = {\r\n    fieldCount: 0,\r\n    fieldLabel: null,\r\n    fieldStats: null,\r\n    fieldValue: null,\r\n    parsed: false,\r\n    parser: undefined,\r\n    parsedFieldHighlights: [],\r\n    showFieldStats: false,\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.mouseMessageTimer);\r\n  }\r\n\r\n  onClickClose = () => {\r\n    this.setState({ showFieldStats: false });\r\n  };\r\n\r\n  onClickHighlight = (fieldText: string) => {\r\n    const { getRows } = this.props;\r\n    const { parser } = this.state;\r\n    const allRows = getRows();\r\n\r\n    // Build value-agnostic row matcher based on the field label\r\n    const fieldLabel = parser.getLabelFromField(fieldText);\r\n    const fieldValue = parser.getValueFromField(fieldText);\r\n    const matcher = parser.buildMatcher(fieldLabel);\r\n    const fieldStats = calculateFieldStats(allRows, matcher);\r\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\r\n\r\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\r\n  };\r\n\r\n  onMouseOverMessage = () => {\r\n    // Don't parse right away, user might move along\r\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\r\n  };\r\n\r\n  onMouseOutMessage = () => {\r\n    clearTimeout(this.mouseMessageTimer);\r\n    this.setState({ parsed: false });\r\n  };\r\n\r\n  parseMessage = () => {\r\n    if (!this.state.parsed) {\r\n      const { row } = this.props;\r\n      const parser = getParser(row.entry);\r\n      if (parser) {\r\n        // Use parser to highlight detected fields\r\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\r\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      getRows,\r\n      highlighterExpressions,\r\n      onClickLabel,\r\n      row,\r\n      showDuplicates,\r\n      showLabels,\r\n      showLocalTime,\r\n      showUtc,\r\n    } = this.props;\r\n    const {\r\n      fieldCount,\r\n      fieldLabel,\r\n      fieldStats,\r\n      fieldValue,\r\n      parsed,\r\n      parsedFieldHighlights,\r\n      showFieldStats,\r\n    } = this.state;\r\n    const { entry, hasAnsi, raw } = row;\r\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\r\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\r\n    const needsHighlighter = highlights && highlights.length > 0 && highlights[0].length > 0;\r\n    const highlightClassName = classnames('logs-row__match-highlight', {\r\n      'logs-row__match-highlight--preview': previewHighlights,\r\n    });\r\n\r\n    return (\r\n      <div className=\"logs-row\">\r\n        {showDuplicates && (\r\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\r\n        )}\r\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\r\n        {showUtc && (\r\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\r\n            {row.timestamp}\r\n          </div>\r\n        )}\r\n        {showLocalTime && (\r\n          <div className=\"logs-row__localtime\" title={`${row.timestamp} (${row.timeFromNow})`}>\r\n            {row.timeLocal}\r\n          </div>\r\n        )}\r\n        {showLabels && (\r\n          <div className=\"logs-row__labels\">\r\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\r\n          </div>\r\n        )}\r\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\r\n          {parsed && (\r\n            <Highlighter\r\n              autoEscape\r\n              highlightTag={FieldHighlight(this.onClickHighlight)}\r\n              textToHighlight={entry}\r\n              searchWords={parsedFieldHighlights}\r\n              highlightClassName=\"logs-row__field-highlight\"\r\n            />\r\n          )}\r\n          {!parsed && needsHighlighter && (\r\n            <Highlighter\r\n              textToHighlight={entry}\r\n              searchWords={highlights}\r\n              findChunks={findHighlightChunksInText}\r\n              highlightClassName={highlightClassName}\r\n            />\r\n          )}\r\n          {hasAnsi && !parsed && !needsHighlighter && <LogMessageAnsi value={raw} />}\r\n          {!hasAnsi && !parsed && !needsHighlighter && entry}\r\n          {showFieldStats && (\r\n            <div className=\"logs-row__stats\">\r\n              <LogLabelStats\r\n                stats={fieldStats}\r\n                label={fieldLabel}\r\n                value={fieldValue}\r\n                onClickClose={this.onClickClose}\r\n                rowCount={fieldCount}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport React, { PureComponent } from 'react';\r\n\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\nimport { RawTimeRange, Switch, LogLevel } from '@grafana/ui';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nimport { LogsDedupDescription, LogsDedupStrategy, LogsModel, LogsMetaKind } from 'app/core/logs_model';\r\n\r\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\r\n\r\nimport Graph from './Graph';\r\nimport { LogLabels } from './LogLabels';\r\nimport { LogRow } from './LogRow';\r\n\r\nconst PREVIEW_LIMIT = 100;\r\n\r\nconst graphOptions = {\r\n  series: {\r\n    stack: true,\r\n    bars: {\r\n      show: true,\r\n      lineWidth: 5,\r\n      // barWidth: 10,\r\n    },\r\n    // stack: true,\r\n  },\r\n  yaxis: {\r\n    tickDecimals: 0,\r\n  },\r\n};\r\n\r\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\r\n  if (kind === LogsMetaKind.LabelsMap) {\r\n    return (\r\n      <span className=\"logs-meta-item__labels\">\r\n        <LogLabels labels={value} plain />\r\n      </span>\r\n    );\r\n  }\r\n  return value;\r\n}\r\n\r\ninterface Props {\r\n  data?: LogsModel;\r\n  dedupedData?: LogsModel;\r\n  width: number;\r\n  exploreId: string;\r\n  highlighterExpressions: string[];\r\n  loading: boolean;\r\n  range?: RawTimeRange;\r\n  scanning?: boolean;\r\n  scanRange?: RawTimeRange;\r\n  dedupStrategy: LogsDedupStrategy;\r\n  hiddenLogLevels: Set<LogLevel>;\r\n  onChangeTime?: (range: RawTimeRange) => void;\r\n  onClickLabel?: (label: string, value: string) => void;\r\n  onStartScanning?: () => void;\r\n  onStopScanning?: () => void;\r\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\r\n  onToggleLogLevel: (hiddenLogLevels: Set<LogLevel>) => void;\r\n}\r\n\r\ninterface State {\r\n  deferLogs: boolean;\r\n  renderAll: boolean;\r\n  showLabels: boolean;\r\n  showLocalTime: boolean;\r\n  showUtc: boolean;\r\n}\r\n\r\nexport default class Logs extends PureComponent<Props, State> {\r\n  deferLogsTimer: NodeJS.Timer;\r\n  renderAllTimer: NodeJS.Timer;\r\n\r\n  state = {\r\n    deferLogs: true,\r\n    renderAll: false,\r\n    showLabels: false,\r\n    showLocalTime: true,\r\n    showUtc: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Staged rendering\r\n    if (this.state.deferLogs) {\r\n      const { data } = this.props;\r\n      const rowCount = data && data.rows ? data.rows.length : 0;\r\n      // Render all right away if not too far over the limit\r\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\r\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Staged rendering\r\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\r\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.deferLogsTimer);\r\n    clearTimeout(this.renderAllTimer);\r\n  }\r\n\r\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\r\n    const { onDedupStrategyChange } = this.props;\r\n    if (this.props.dedupStrategy === dedup) {\r\n      return onDedupStrategyChange(LogsDedupStrategy.none);\r\n    }\r\n    return onDedupStrategyChange(dedup);\r\n  };\r\n\r\n  onChangeLabels = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showLabels: target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showLocalTime: target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeUtc = (event: React.SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    this.setState({\r\n      showUtc: target.checked,\r\n    });\r\n  };\r\n\r\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\r\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\r\n    this.props.onToggleLogLevel(hiddenLogLevels);\r\n  };\r\n\r\n  onClickScan = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    this.props.onStartScanning();\r\n  };\r\n\r\n  onClickStopScan = (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    this.props.onStopScanning();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      data,\r\n      exploreId,\r\n      highlighterExpressions,\r\n      loading = false,\r\n      onClickLabel,\r\n      range,\r\n      scanning,\r\n      scanRange,\r\n      width,\r\n      dedupedData,\r\n    } = this.props;\r\n\r\n    if (!data) {\r\n      return null;\r\n    }\r\n\r\n    const { deferLogs, renderAll, showLabels, showLocalTime, showUtc } = this.state;\r\n    const { dedupStrategy } = this.props;\r\n    const hasData = data && data.rows && data.rows.length > 0;\r\n    const hasLabel = hasData && dedupedData.hasUniqueLabels;\r\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\r\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\r\n    const meta = [...data.meta];\r\n\r\n    if (dedupStrategy !== LogsDedupStrategy.none) {\r\n      meta.push({\r\n        label: 'Dedup count',\r\n        value: dedupCount,\r\n        kind: LogsMetaKind.Number,\r\n      });\r\n    }\r\n\r\n    // Staged rendering\r\n    const processedRows = dedupedData.rows;\r\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\r\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\r\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\r\n\r\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\r\n    const getRows = () => processedRows;\r\n    const timeSeries = data.series.map(series => new TimeSeries(series));\r\n\r\n    return (\r\n      <div className=\"logs-panel\">\r\n        <div className=\"logs-panel-graph\">\r\n          <Graph\r\n            data={timeSeries}\r\n            height={100}\r\n            width={width}\r\n            range={range}\r\n            id={`explore-logs-graph-${exploreId}`}\r\n            onChangeTime={this.props.onChangeTime}\r\n            onToggleSeries={this.onToggleLogLevel}\r\n            userOptions={graphOptions}\r\n          />\r\n        </div>\r\n        <div className=\"logs-panel-options\">\r\n          <div className=\"logs-panel-controls\">\r\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\r\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\r\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\r\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\r\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\r\n                <ToggleButton\r\n                  key={i}\r\n                  value={dedupType}\r\n                  onChange={this.onChangeDedup}\r\n                  selected={dedupStrategy === dedupType}\r\n                  tooltip={LogsDedupDescription[dedupType]}\r\n                >\r\n                  {dedupType}\r\n                </ToggleButton>\r\n              ))}\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </div>\r\n\r\n        {hasData && meta && (\r\n          <div className=\"logs-panel-meta\">\r\n            {meta.map(item => (\r\n              <div className=\"logs-panel-meta__item\" key={item.label}>\r\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\r\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"logs-rows\">\r\n          {hasData &&\r\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\r\n            firstRows.map(row => (\r\n              <LogRow\r\n                key={row.key + row.duplicates}\r\n                getRows={getRows}\r\n                highlighterExpressions={highlighterExpressions}\r\n                row={row}\r\n                showDuplicates={showDuplicates}\r\n                showLabels={showLabels && hasLabel}\r\n                showLocalTime={showLocalTime}\r\n                showUtc={showUtc}\r\n                onClickLabel={onClickLabel}\r\n              />\r\n            ))}\r\n          {hasData &&\r\n            !deferLogs &&\r\n            renderAll &&\r\n            lastRows.map(row => (\r\n              <LogRow\r\n                key={row.key + row.duplicates}\r\n                getRows={getRows}\r\n                row={row}\r\n                showDuplicates={showDuplicates}\r\n                showLabels={showLabels && hasLabel}\r\n                showLocalTime={showLocalTime}\r\n                showUtc={showUtc}\r\n                onClickLabel={onClickLabel}\r\n              />\r\n            ))}\r\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\r\n        </div>\r\n        {!loading && !hasData && !scanning && (\r\n          <div className=\"logs-panel-nodata\">\r\n            No logs found.\r\n            <a className=\"link\" onClick={this.onClickScan}>\r\n              Scan for older logs\r\n            </a>\r\n          </div>\r\n        )}\r\n\r\n        {scanning && (\r\n          <div className=\"logs-panel-nodata\">\r\n            <span>{scanText}</span>\r\n            <a className=\"link\" onClick={this.onClickStopScan}>\r\n              Stop scan\r\n            </a>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nconst INTERVAL = 150;\r\n\r\nexport default class ElapsedTime extends PureComponent<any, any> {\r\n  offset: number;\r\n  timer: number;\r\n\r\n  state = {\r\n    elapsed: 0,\r\n  };\r\n\r\n  start() {\r\n    this.offset = Date.now();\r\n    this.timer = window.setInterval(this.tick, INTERVAL);\r\n  }\r\n\r\n  tick = () => {\r\n    const jetzt = Date.now();\r\n    const elapsed = jetzt - this.offset;\r\n    this.setState({ elapsed });\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.time) {\r\n      clearInterval(this.timer);\r\n    } else if (this.props.time) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.start();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  render() {\r\n    const { elapsed } = this.state;\r\n    const { className, time } = this.props;\r\n    const value = (time || elapsed) / 1000;\r\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\n\r\nimport { QueryTransaction } from 'app/types/explore';\r\nimport ElapsedTime from './ElapsedTime';\r\n\r\nfunction formatLatency(value) {\r\n  return `${(value / 1000).toFixed(1)}s`;\r\n}\r\n\r\ninterface QueryTransactionStatusItemProps {\r\n  transaction: QueryTransaction;\r\n}\r\n\r\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\r\n  render() {\r\n    const { transaction } = this.props;\r\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\r\n    return (\r\n      <div className={className}>\r\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\r\n        <div className=\"query-transaction__duration\">\r\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface QueryTransactionStatusProps {\r\n  transactions: QueryTransaction[];\r\n}\r\n\r\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\r\n  render() {\r\n    const { transactions } = this.props;\r\n    return (\r\n      <div className=\"query-transactions\">\r\n        {transactions.map((t, i) => (\r\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { memoize } from 'lodash';\r\nimport { createSelectorCreator } from 'reselect';\r\n\r\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\r\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize, hashFn);\r\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\r\nimport { ExploreItemState } from 'app/types';\r\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\r\n\r\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\r\n  const { showingGraph, showingLogs, showingTable, showingStartPage, dedupStrategy } = itemState;\r\n  return {\r\n    showingGraph,\r\n    showingLogs,\r\n    showingTable,\r\n    showingStartPage,\r\n    dedupStrategy,\r\n  };\r\n};\r\n\r\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\r\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\r\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\r\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\r\n  logsSelector,\r\n  hiddenLogLevelsSelector,\r\n  dedupStrategySelector,\r\n  (logs, hiddenLogLevels, dedupStrategy) => {\r\n    if (!logs) {\r\n      return null;\r\n    }\r\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\r\n    return dedupLogRows(filteredData, dedupStrategy);\r\n  }\r\n);\r\n","import React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { StoreState } from 'app/types';\r\nimport { ExploreId } from 'app/types/explore';\r\n\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport Explore from './Explore';\r\nimport { CustomScrollbar } from '@grafana/ui';\r\nimport { resetExploreAction } from './state/actionTypes';\r\n\r\ninterface WrapperProps {\r\n  split: boolean;\r\n  resetExploreAction: typeof resetExploreAction;\r\n}\r\n\r\nexport class Wrapper extends Component<WrapperProps> {\r\n  componentWillUnmount() {\r\n    this.props.resetExploreAction();\r\n  }\r\n\r\n  render() {\r\n    const { split } = this.props;\r\n\r\n    return (\r\n      <div className=\"page-scrollbar-wrapper\">\r\n        <CustomScrollbar autoHeightMin={'100%'} className=\"custom-scrollbar--page\">\r\n          <div className=\"explore-wrapper\">\r\n            <ErrorBoundary>\r\n              <Explore exploreId={ExploreId.left} />\r\n            </ErrorBoundary>\r\n            {split && (\r\n              <ErrorBoundary>\r\n                <Explore exploreId={ExploreId.right} />\r\n              </ErrorBoundary>\r\n            )}\r\n          </div>\r\n        </CustomScrollbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => {\r\n  const { split } = state.explore;\r\n  return { split };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  resetExploreAction,\r\n};\r\n\r\nexport default hot(module)(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Wrapper)\r\n);\r\n"],"sourceRoot":""}
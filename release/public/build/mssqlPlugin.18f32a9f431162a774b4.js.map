{"version":3,"sources":["webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/config_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts"],"names":["ResponseParser","$q","this","prototype","processQueryResult","res","data","results","key","queryRes","series","_c","e_1","Object","tslib_es6","_d","next","done","value","push","target","name","datapoints","points","refId","meta","tables","_e","e_2","_f","table","type","parseMetricFindQueryResult","length","rowCount","columns","rows","textColIndex","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","indexOf","lodash_default","a","map","colName","transformAnnotationResponse","options","annotation","timeColumnIndex","textColumnIndex","tagsColumnIndex","reject","message","list","row","time","Math","floor","tags","trim","split","datasource_MssqlDatasource","MssqlDatasource","instanceSettings","backendSrv","templateSrv","timeSrv","id","responseParser","response_parser","interval","jsonData","timeInterval","$inject","interpolateVariable","variable","multi","includeAll","replace","val","join","interpolateVariablesInQueries","queries","_this","expandedQueries","query","datasource","rawSql","filter","targets","item","hide","intervalMs","maxDataPoints","datasourceId","scopedVars","format","when","datasourceRequest","url","method","from","range","valueOf","toString","to","then","annotationQuery","rawQuery","metricFindQuery","optionalOptions","interpolatedQuery","timeRange","testDatasource","status","catch","err","console","log","targetContainsTemplate","variableExists","defaultQuery","query_ctrl_MssqlQueryCtrl","_super","MssqlQueryCtrl","$scope","$injector","call","alias","formats","panelCtrl","panel","events","on","src","dataError","onDataError","bind","onDataReceived","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","find","error","templateUrl","config_ctrl_MssqlConfigCtrl","MssqlConfigCtrl","current","encrypt","onPasswordReset","passwordHandlers","Password","onPasswordChange","__webpack_require__","d","__webpack_exports__","MssqlAnnotationsQueryCtrl","module_defaultQuery"],"mappings":"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","file":"mssqlPlugin.18f32a9f431162a774b4.js","sourcesContent":["import _ from 'lodash';\nimport { IQService } from 'angular';\n\nexport default class ResponseParser {\n  constructor(private $q: IQService) {}\n\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { IQService } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { MssqlQueryForInterpolation } from './types';\n\nexport class MssqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: any,\n    private backendSrv: BackendSrv,\n    private $q: IQService,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable(value: any, variable: any) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  interpolateVariablesInQueries(queries: MssqlQueryForInterpolation[]): MssqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, {}, this.interpolateVariable),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: { variable: { name: string } }) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    const rawSql = target.rawSql.replace('$__', '');\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { auto } from 'angular';\nimport { PanelEvents } from '@grafana/ui';\n\nexport interface MssqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MssqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nexport class MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.current.jsonData.encrypt = this.current.jsonData.encrypt || 'false';\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n","import { MssqlDatasource } from './datasource';\nimport { MssqlQueryCtrl } from './query_ctrl';\nimport { MssqlConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC`;\n\nclass MssqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MssqlDatasource,\n  MssqlDatasource as Datasource,\n  MssqlQueryCtrl as QueryCtrl,\n  MssqlConfigCtrl as ConfigCtrl,\n  MssqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}
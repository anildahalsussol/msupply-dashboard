{"version":3,"sources":["webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/mysql/mysql_query.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/meta_query.ts","webpack:///./public/app/plugins/datasource/mysql/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts"],"names":["__webpack_require__","d","__webpack_exports__","SqlPartDef","SqlPart","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","options","this","type","label","toUpperCase","substring","style","wrapOpen","wrapClose","separator","params","defaultParams","part","def","message","datatype","name","a","clone","prototype","updateParam","strValue","index","optional","splice","ResponseParser","$q","processQueryResult","res","data","results","key","queryRes","series","_c","e_1","Object","tslib_es6","_d","next","done","value","push","target","datapoints","points","refId","meta","tables","_e","e_2","_f","table","parseMetricFindQueryResult","length","rowCount","columns","rows","textColIndex","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","indexOf","lodash_default","map","colName","transformAnnotationResponse","annotation","timeColumnIndex","textColumnIndex","tagsColumnIndex","reject","list","row","time","Math","floor","toString","tags","trim","split","MysqlQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","$inject","unquoteIdentifier","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","alias","query","timeGroup","macro","args","buildMetricColumn","_a","_b","column","buildValueColumn","aggregate","buildWhereClause","_this","conditions","tag","buildGroupClause","groupSection","buildValueColumns","datasource_MysqlDatasource","MysqlDatasource","instanceSettings","backendSrv","timeSrv","queryModel","v","id","responseParser","response_parser","mysql_query","interval","jsonData","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","interpolateVariable","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","when","datasourceRequest","url","from","range","valueOf","to","then","annotationQuery","metricFindQuery","optionalOptions","interpolatedQuery","timeRange","method","testDatasource","status","catch","err","log","targetContainsTemplate","variableExists","MysqlMetaQuery","getOperators","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","sql_part_index","register","sql_part","dynamicLookup","quote","mysql_sql_part","defaultQuery","query_ctrl_MysqlQueryCtrl","_super","MysqlQueryCtrl","$scope","$injector","uiSegmentSrv","call","panel","metaBuilder","updateProjection","formats","panelCtrl","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","events","on","src","dataReceived","onDataReceived","dataError","onDataError","refresh","selectParts","create","whereParts","groupParts","updatePersistedParts","selectMenu","toggleEditorMode","emit","types","showConfirmModal","title","text2","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","r","segment_1","timeColumnChanged","all","task1","task2","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","error","expandable","variables","config","templateQuoter","unshift","segments","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addGroup","aggIndex","addAlias","windowIndex","aggIndex_1","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","addTemplateVars","newOperators","getWhereOptions","addWhereAction","getGroupOptions","e_3","tags_1","tags_1_1","addGroupAction","groupAdd","templateUrl","passwordHandlers","module_MysqlConfigCtrl","MysqlAnnotationsQueryCtrl","MysqlConfigCtrl","onPasswordReset","Password","onPasswordChange","module_defaultQuery"],"mappings":"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","file":"mysqlPlugin.18f32a9f431162a774b4.js","sourcesContent":["import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import _ from 'lodash';\nimport { IQService } from 'angular';\n\nexport default class ResponseParser {\n  constructor(private $q: IQService) {}\n\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        return this.$q.reject({\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        });\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MysqlQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport MysqlQuery from 'app/plugins/datasource/mysql/mysql_query';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { IQService } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { MysqlQueryForInterpolation } from './types';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MysqlQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: any,\n    private backendSrv: BackendSrv,\n    private $q: IQService,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.queryModel = new MysqlQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(queries: MysqlQueryForInterpolation[]): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, {}, this.interpolateVariable),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new MysqlQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable as any),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: any) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MysqlQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport MysqlQuery from './mysql_query';\nimport sqlPart from './sql_part';\nimport { auto, IQService } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { CoreEvents } from 'app/types';\nimport { PanelEvents } from '@grafana/ui';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  queryModel: MysqlQuery;\n  metaBuilder: MysqlMetaQuery;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private $q: IQService,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MysqlQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit(CoreEvents.showConfirmModal, {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    this.$q.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return this.$q.when([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return this.$q.when(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return this.$q.when([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return this.$q.when(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/Panel.tsx","webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///./public/app/features/explore/Legend.tsx","webpack:///./public/app/features/explore/Graph.tsx","webpack:///./public/app/features/explore/utils/set.ts","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/Error.tsx","webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///./public/app/features/explore/Table.tsx","webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///./public/app/features/explore/LogRow.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///./public/app/features/explore/Wrapper.tsx"],"names":["addQueryRow","exploreId","index","query","Object","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_3__","type","_actionTypes__WEBPACK_IMPORTED_MODULE_6__","AddQueryRow","payload","changeDatasource","datasource","_this","this","dispatch","tslib__WEBPACK_IMPORTED_MODULE_0__","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_5__","get","instance","_a","sent","loadDatasource","changeQuery","override","ChangeQuery","runQueries","changeSize","height","width","ChangeSize","changeTime","range","ChangeTime","clearQueries","scanStop","ClearQueries","stateSave","highlightLogsExpression","expressions","HighlightLogsExpression","initializeExplore","queries","containerWidth","eventBridge","exploreDatasources","getExternal","map","ds","value","name","meta","InitializeExplore","length","console","error","error_1","loadDatasourceMissing","initializeExploreSplit","InitializeExploreSplit","loadDatasourceFailure","LoadDatasourceFailure","LoadDatasourceMissing","loadDatasourcePending","datasourceName","LoadDatasourcePending","loadDatasourceSuccess","supportsGraph","metrics","supportsLogs","logs","supportsTable","tables","StartPage","pluginExports","ExploreStartPage","historyKey","id","history","app_core_store__WEBPACK_IMPORTED_MODULE_2__","getObject","set","LoadDatasourceSuccess","datasourceInstance","initialDatasource","initialQueries","showingStartPage","Boolean","getState","datasourceError","testDatasource","testResult","status","message","error_2","statusText","explore","requestedDatasourceName","init","modifiedQueries","importedQueries","origin","slice","importQueries","nextQueries","q","i","modifyQueries","modification","modifier","ModifyQueries","preventSubmit","removeQueryRow","RemoveQueryRow","showingLogs","showingGraph","showingTable","interval","runQueriesForType","format","instant","valueWithRefId","data","RunQueriesEmpty","resultType","queryOptions","resultGetter","queryIntervals","scanning","datasourceId","forEach","rowIndex","transaction","QueryTransactionStart","queryTransactionStart","now","Date","options","res","emit","latency","results","transactionId","result","queryTransactions","scanner","find","qt","hints","getQueryHints","nextQueryTransactions","done","nextHistory","QueryTransactionSuccess","lodash__WEBPACK_IMPORTED_MODULE_1___default","a","size","ScanRange","queryTransactionSuccess","response_1","response","cancelled","errorDetails","Error","QueryTransactionFailure","queryTransactionFailure","scanStart","ScanStart","ScanStop","setQueries","rawQueries","SetQueries","splitClose","SplitClose","splitOpen","leftState","left","itemState","SplitOpen","right","split","urlStates","leftUrlState","rightUrlState","app_core_actions__WEBPACK_IMPORTED_MODULE_4__","toggleGraph","ToggleGraph","toggleLogs","ToggleLogs","toggleTable","ToggleTable","Panel","_super","apply","arguments","onClickToggle","props","onToggle","isOpen","prototype","render","loading","iconClass","loaderClass","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","className","onClick","label","children","react__WEBPACK_IMPORTED_MODULE_1__","ErrorBoundary","call","state","errorInfo","componentDidCatch","setState","style","whiteSpace","toString","componentStack","Legend_LegendItem","LegendItem","onClickLabel","e","series","tslib_es6","hidden","seriesClasses","classnames_default","graph-legend-series-hidden","react_default","color","title","alias","react","explore_Legend","Legend","event","onToggleSeries","ctrlKey","metaKey","shiftKey","hiddenSeries","items","has","key","defaultProps","FLOT_OPTIONS","legend","show","lines","linewidth","zero","shadowSize","grid","minBorderMargin","markings","backgroundColor","borderWidth","clickable","margin","labelMarginX","selection","mode","Graph_Graph","Graph","dynamicOptions","Set","showAllTimeSeries","onPlotSelected","ranges","onChangeTime","from","moment_default","xaxis","to","onShowAllTimeSeries","draw","exclusive","oneSeriesVisible","d","nextHiddenSeries","filter","availableSeries","b","it","values","next","add","intersect","delete","getGraphData","componentDidMount","$el","jquery_js_exposed_default","bind","componentDidUpdate","prevProps","prevState","equal","componentWillUnmount","unbind","getDynamicOptions","ticks","isMoment","datemath","min","valueOf","max","timezone","timeformat","secPerTick","time_format","userOptions","ts","getFlotPairs","plot","_b","_c","Fragment","__webpack_exports__","react_sizeme","Explore","getRef","el","onChangeDatasource","option","changedByScanner","onStopScanning","onClickClear","onClickCloseSplit","onClickExample","onClickSplit","onModifyQueries","action","modifyQuery","onResize","onStartScanning","scanPreviousRange","timepickerRef","current","move","onSubmit","exploreEvents","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_16__","createRef","initialized","urlState","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_15__","app_core_store__WEBPACK_IMPORTED_MODULE_5__","initialRange","_TimePicker__WEBPACK_IMPORTED_MODULE_13__","offsetWidth","removeAllListeners","datasourceLoading","datasourceMissing","exploreClass","selectedDatasource","undefined","ref","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_6__","onChange","datasources","_Error__WEBPACK_IMPORTED_MODULE_7__","_QueryRows__WEBPACK_IMPORTED_MODULE_11__","react_virtualized__WEBPACK_IMPORTED_MODULE_4__","disableHeight","_ErrorBoundary__WEBPACK_IMPORTED_MODULE_8__","_GraphContainer__WEBPACK_IMPORTED_MODULE_9__","_TableContainer__WEBPACK_IMPORTED_MODULE_12__","onClickCell","_LogsContainer__WEBPACK_IMPORTED_MODULE_10__","PureComponent","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_14__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","item","some","__webpack_require__","Alert","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","GraphContainer","onClickGraphButton","graphResult","graphHeight","_Panel__WEBPACK_IMPORTED_MODULE_6__","_Graph__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_4__","LogsContainer","onClickLogsButton","logsHighlighterExpressions","logsResult","scanRange","_Logs__WEBPACK_IMPORTED_MODULE_5__","highlighterExpressions","QueryRows","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","QueryRow","onExecuteQuery","onChangeQuery","getHighlighterExpression","updateLogsHighlights","onClickAddButton","onClickClearButton","onClickHintFix","onClickRemoveButton","lodash__WEBPACK_IMPORTED_MODULE_2___default","debounce","initialQuery","transactions","t","transactionWithError","hint","getFirstHintFromTransactions","queryError","QueryField","ExploreQueryField","_QueryTransactionStatus__WEBPACK_IMPORTED_MODULE_6__","onPressEnter","onQueryChange","_QueryEditor__WEBPACK_IMPORTED_MODULE_5__","_state_actions__WEBPACK_IMPORTED_MODULE_7__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_4__","QueryEditor","element","initTimeSrv","loader","app_core_services_AngularLoader__WEBPACK_IMPORTED_MODULE_2__","template","target","scopeProps","ctrl","refresh","events","panel","targets","dashboard","component","load","destroy","app_features_dashboard_time_srv__WEBPACK_IMPORTED_MODULE_3__","time","getTimezone","timeRangeUpdated","log","TableContainer","onClickTableButton","tableResult","_Table__WEBPACK_IMPORTED_MODULE_5__","EMPTY_TABLE","VALUE_REGEX","Table","getCellProps","rowInfo","column","columnKey","Header","rowValue","row","tableModel","columnNames","columns","text","filterable","accessor","test","Cell","react__WEBPACK_IMPORTED_MODULE_2___default","noDataText","react_table__WEBPACK_IMPORTED_MODULE_3__","rows","getTdProps","minRows","resolveData","cells","zipObject","prepareRows","showPagination","react__WEBPACK_IMPORTED_MODULE_2__","DATE_FORMAT","DEFAULT_RANGE","parseTime","isUtc","ensureString","moment__WEBPACK_IMPORTED_MODULE_2___default","indexOf","isNaN","parseInt","utc","TimePicker","handleChangeFrom","fromRaw","handleChangeTo","toRaw","handleClickApply","app_core_utils_datemath__WEBPACK_IMPORTED_MODULE_3__","rangeString","app_core_utils_rangeutil__WEBPACK_IMPORTED_MODULE_4__","handleClickLeft","handleClickPicker","handleClickRight","handleClickRefresh","handleClickRelativeOption","dropdownRef","dropdownEl","refreshInterval","getDerivedStateFromProps","direction","nextTo","nextFrom","step","timespan","nextRange","nextTimeRange","raw","getTimeOptions","renderDropdown","timeOptions","keys","section","group","active","display","ToggleButtonGroup","transparent","ToggleButton","selected","tooltip","btnClassName","button","stopPropagation","src","content","placement","LogLabelStatsRow","logLabelStatsModel","count","proportion","percent","Math","round","barStyle","logs-stats-row--active","LogLabelStats_LogLabelStats","LogLabelStats","rowCount","stats","onClickClose","topRows","activeRow","otherRows","insertActiveRow","otherCount","reduce","sum","total","otherProportion","stat","LogLabel_LogLabel","LogLabel","showStats","onClickStats","allRows","getRows","logs_model","plain","LogLabels_LogLabels","LogLabels","labels","LogRow_LogRow","LogRow","fieldCount","fieldLabel","fieldStats","fieldValue","parsed","parser","parsedFieldHighlights","showFieldStats","onClickHighlight","fieldText","getLabelFromField","getValueFromField","matcher","buildMatcher","onMouseOverMessage","mouseMessageTimer","setTimeout","parseMessage","onMouseOutMessage","clearTimeout","entry","getFields","showDuplicates","showLabels","showLocalTime","showUtc","previewHighlights","lodash_default","isEqual","searchWords","highlights","needsHighlighter","highlightClassName","logs-row__match-highlight--preview","duplicates","logLevel","timeLocal","timeFromNow","timestamp","uniqueLabels","onMouseEnter","onMouseLeave","main_default","autoEscape","highlightTag","FieldHighlight","textToHighlight","findChunks","utils_text","graphOptions","stack","bars","lineWidth","yaxis","tickDecimals","Logs_Logs","Logs","dedup","none","deferLogs","hiddenLogLevels","renderAll","onChangeDedup","onChangeLabels","checked","onChangeLocalTime","onChangeUtc","onToggleLogLevel","rawLevel","hiddenRawLevels","Array","level","onClickScan","preventDefault","onClickStopScan","renderAll_1","PREVIEW_LIMIT","deferLogsTimer","renderAllTimer","hasData","filteredData","dedupedData","dedupCount","push","kind","Number","processedRows","firstRows","lastRows","scanText","rangeutil","Switch","components_ToggleButtonGroup_ToggleButtonGroup","dedupType","LabelsMap","renderMetaItem","ElapsedTime","elapsed","tick","offset","start","timer","window","setInterval","componentWillReceiveProps","nextProps","clearInterval","toFixed","QueryTransactionStatus_QueryTransactionStatusItem","QueryTransactionStatusItem","formatLatency","explore_ElapsedTime","QueryTransactionStatus_QueryTransactionStatus","QueryTransactionStatus","Wrapper","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_6__","rightState","initialSplit","_Explore__WEBPACK_IMPORTED_MODULE_9__","app_types_explore__WEBPACK_IMPORTED_MODULE_5__","updateLocation","location"],"mappings":"8xBAwDO,SAASA,EAAYC,EAAsBC,GAChD,IAAMC,EAAQC,OAAAC,EAAA,EAAAD,CAAmBF,EAAQ,GACzC,OAASI,KAAMC,EAAA,EAAYC,YAAaC,SAAWR,UAASA,EAAEC,MAAKA,EAAEC,MAAKA,IAMrE,SAASO,EAAiBT,EAAsBU,GAAvD,IAAAC,EAAAC,KACE,OAAO,SAAMC,GAAQ,OAAAC,EAAA,EAAAH,OAAA,6EACF,SAAMR,OAAAY,EAAA,EAAAZ,GAAmBa,IAAIN,kBAAxCO,EAAWC,EAAAC,OACjBN,EAASO,EAAepB,EAAWiB,cAQhC,SAASI,EACdrB,EACAE,EACAD,EACAqB,GAEA,OAAO,SAAAT,GAES,OAAVX,IACFA,EAAQY,EAAA,KAAKX,OAAAC,EAAA,EAAAD,CAAmBF,KAGlCY,GAAWR,KAAMC,EAAA,EAAYiB,YAAaf,SAAWR,UAASA,EAAEE,MAAKA,EAAED,MAAKA,EAAEqB,SAAQA,KAClFA,GACFT,EAASW,EAAWxB,KASnB,SAASyB,EACdzB,EACAkB,OAAEQ,EAAAR,EAAAQ,OAAQC,EAAAT,EAAAS,MAEV,OAAStB,KAAMC,EAAA,EAAYsB,WAAYpB,SAAWR,UAASA,EAAE0B,OAAMA,EAAEC,MAAKA,IAMrE,SAASE,EAAW7B,EAAsB8B,GAC/C,OAAO,SAAAjB,GACLA,GAAWR,KAAMC,EAAA,EAAYyB,WAAYvB,SAAWR,UAASA,EAAE8B,MAAKA,KACpEjB,EAASW,EAAWxB,KAOjB,SAASgC,EAAahC,GAC3B,OAAO,SAAAa,GACLA,EAASoB,EAASjC,IAClBa,GAAWR,KAAMC,EAAA,EAAY4B,aAAc1B,SAAWR,UAASA,KAC/Da,EAASsB,MAON,SAASC,EAAwBpC,EAAsBqC,GAC5D,OAAShC,KAAMC,EAAA,EAAYgC,wBAAyB9B,SAAWR,UAASA,EAAEqC,YAAWA,IAOhF,SAASE,EACdvC,EACAU,EACA8B,EACAV,EACAW,EACAC,GANF,IAAA/B,EAAAC,KAQE,OAAO,SAAMC,GAAQ,OAAAC,EAAA,EAAAH,OAAA,oFACbgC,EAA6CxC,OAAAY,EAAA,EAAAZ,GAChDyC,cACAC,IAAI,SAAAC,GAAM,OACTC,MAAOD,EAAGE,KACVA,KAAMF,EAAGE,KACTC,KAAMH,EAAGG,QAGbpC,GACER,KAAMC,EAAA,EAAY4C,kBAClB1C,SACER,UAASA,EACTyC,eAAcA,EACd/B,WAAUA,EACVgC,YAAWA,EACXC,mBAAkBA,EAClBH,QAAOA,EACPV,MAAKA,OAILa,EAAmBQ,QAAU,GAA7B,eACElC,OAAQ,GACRP,EAAA,6BAEW,gCAAMP,OAAAY,EAAA,EAAAZ,GAAmBa,IAAIN,kBAAxCO,EAAWC,EAAAC,sCAEXiC,QAAQC,MAAMC,uBAIbrC,GAAD,MACS,EAAMd,OAAAY,EAAA,EAAAZ,GAAmBa,cAApCC,EAAWC,EAAAC,+BAEbN,EAASO,EAAepB,EAAWiB,iBAEnCJ,EAAS0C,EAAsBvD,qCAQ9B,SAASwD,IAAhB,IAAA7C,EAAAC,KACE,OAAO,SAAMC,GAAQ,OAAAC,EAAA,EAAAH,OAAA,uDACnBE,GAAWR,KAAMC,EAAA,EAAYmD,kCAO1B,IAAMC,EAAwB,SAAC1D,EAAsBqD,GAA+C,OACzGhD,KAAMC,EAAA,EAAYqD,sBAClBnD,SACER,UAASA,EACTqD,MAAKA,KAOIE,EAAwB,SAACvD,GAAsD,OAC1FK,KAAMC,EAAA,EAAYsD,sBAClBpD,SAAWR,UAASA,KAMT6D,EAAwB,SAAC7D,EAAsB8D,GAAwD,OAClHzD,KAAMC,EAAA,EAAYyD,sBAClBvD,SACER,UAASA,EACT8D,eAAcA,KASLE,EAAwB,SACnChE,EACAiB,EACAuB,GAGA,IAAMyB,EAAgBhD,EAASgC,KAAKiB,QAC9BC,EAAelD,EAASgC,KAAKmB,KAC7BC,EAAgBpD,EAASgC,KAAKqB,OAE9BC,EAAYtD,EAASuD,cAAcC,iBAEnCC,EAAa,2BAA2BzD,EAASgC,KAAK0B,GACtDC,EAAUC,EAAA,EAAMC,UAAUJ,MAIhC,OAFAG,EAAA,EAAME,IAAI3E,EAAA,EAA0Ba,EAAS+B,OAG3C3C,KAAMC,EAAA,EAAY0E,sBAClBxE,SACER,UAASA,EACTuE,UAASA,EACTU,mBAAoBhE,EACpB2D,QAAOA,EACPM,kBAAmBjE,EAAS+B,KAC5BmC,eAAgB3C,EAChB4C,iBAAkBC,QAAQd,GAC1BN,cAAaA,EACbE,aAAYA,EACZE,cAAaA,KAQZ,SAASjD,EAAepB,EAAsBiB,GAArD,IAAAN,EAAAC,KACE,OAAO,SAAOC,EAAUyE,GAAQ,OAAAxE,EAAA,EAAAH,OAAA,2FACxBmD,EAAiB7C,EAAS+B,KAGhCnC,EAASgD,EAAsB7D,EAAW8D,IAEtCyB,EAAkB,sBAED,gCAAMtE,EAASuE,gCAA5BC,EAAavE,EAAAC,OACnBoE,EAAwC,YAAtBE,EAAWC,OAAuB,KAAOD,EAAWE,uCAEtEJ,EAAmBK,GAASA,EAAMC,YAAe,6BAGnD,OAAIN,GACF1E,EAAS6C,EAAsB1D,EAAWuF,KAC1C,IAGEzB,IAAmBwB,IAAWQ,QAAQ9F,GAAW+F,yBAEnD,IAGE9E,EAAS+E,MACX/E,EAAS+E,OAILxD,EAAU8C,IAAWQ,QAAQ9F,GAAWiG,gBAC1CC,EAAkB1D,GAChB2D,EAASb,IAAWQ,QAAQ9F,GAAWiF,oBAEvCkB,EAAOlD,KAAK0B,KAAO1D,EAASgC,KAAK0B,IAAjC,MAEFuB,EAAsB1D,EAAO4D,gBAH7B,oBAISnF,EAASoF,eAEA,EAAMpF,EAASoF,cAAc7D,EAAS2D,EAAOlD,QAFtD,mBAETiD,EAAkBhF,EAAAC,oBAGlB+E,EAAkB/F,OAAAC,EAAA,EAAAD,oBAItB,OAAI2D,IAAmBwB,IAAWQ,QAAQ9F,GAAW+F,yBAEnD,IAIIO,EAAcJ,EAAgBrD,IAAI,SAAC0D,EAAGC,GAAM,OAAC1F,EAAA,KAC9CoF,EAAgBM,GAChBrG,OAAAC,EAAA,EAAAD,CAAmBqG,MAGxB3F,EAASmD,EAAsBhE,EAAWiB,EAAUqF,IACpDzF,EAASW,EAAWxB,eAWjB,SAASyG,EACdzG,EACA0G,EACAzG,EACA0G,GAEA,OAAO,SAAA9F,GACLA,GAAWR,KAAMC,EAAA,EAAYsG,cAAepG,SAAWR,UAASA,EAAE0G,aAAYA,EAAEzG,MAAKA,EAAE0G,SAAQA,KAC1FD,EAAaG,eAChBhG,EAASW,EAAWxB,KA0KnB,SAAS8G,EAAe9G,EAAsBC,GACnD,OAAO,SAAAY,GACLA,GAAWR,KAAMC,EAAA,EAAYyG,eAAgBvG,SAAWR,UAASA,EAAEC,MAAKA,KACxEY,EAASW,EAAWxB,KAOjB,SAASwB,EAAWxB,GACzB,OAAO,SAACa,EAAUyE,GACV,IAAApE,EAAAoE,IAAAQ,QAAA9F,GACJiF,EAAA/D,EAAA+D,mBACAgB,EAAA/E,EAAA+E,gBACAe,EAAA9F,EAAA8F,YACAC,EAAA/F,EAAA+F,aACAC,EAAAhG,EAAAgG,aACAjD,EAAA/C,EAAA+C,cACAE,EAAAjD,EAAAiD,aACAE,EAAAnD,EAAAmD,cAGF,GAAKlE,OAAAC,EAAA,EAAAD,CAAiB8F,GAAtB,CAOA,IAAMkB,EAAWlC,EAAmBkC,SAGhCD,GAAgB7C,GAClBxD,EACEuG,EACEpH,EACA,SAEEmH,SAAQA,EACRE,OAAQ,QACRC,SAAS,EACTC,gBAAgB,GAElB,SAAAC,GAAQ,OAAAA,EAAK,MAIfP,GAAgBhD,GAClBpD,EACEuG,EACEpH,EACA,SAEEmH,SAAQA,EACRE,OAAQ,cACRC,SAAS,GAEXlH,EAAA,IAIF4G,GAAe7C,GACjBtD,EAASuG,EAAkBpH,EAAW,QAAUmH,SAAQA,EAAEE,OAAQ,UAEpExG,EAASsB,UAzCPtB,GAAWR,KAAMC,EAAA,EAAYmH,gBAAiBjH,SAAWR,UAASA,MAoDxE,SAASoH,EACPpH,EACA0H,EACAC,EACAC,GAJF,IAAAjH,EAAAC,KAME,OAAO,SAAOC,EAAUyE,GAAQ,OAAAxE,EAAA,EAAAH,OAAA,kFACxBO,EAOFoE,IAAWQ,QAAQ9F,GANrBiF,EAAkB/D,EAAA+D,mBAClBvC,EAAWxB,EAAAwB,YACMF,EAAOtB,EAAA+E,gBACxB4B,EAAc3G,EAAA2G,eACd/F,EAAKZ,EAAAY,MACLgG,EAAQ5G,EAAA4G,SAEJC,EAAe9C,EAAmBhC,KAAK0B,GAG7CnC,EAAQwF,QAAQ,SAAO9H,EAAO+H,GAAQ,OAAAnH,EAAA,EAAAH,OAAA,uFAC9BuH,EAAc/H,OAAAC,EAAA,EAAAD,CAClBD,EACA+H,EACAP,EACAC,EACA7F,EACA+F,EACAC,GAEFjH,EArMC,SACLb,EACAkI,EACAR,EACAO,GAEA,OAAS5H,KAAMC,EAAA,EAAY6H,sBAAuB3H,SAAWR,UAASA,EAAE0H,WAAUA,EAAEO,SAAQA,EAAEC,YAAWA,IA+L5FE,CAAsBpI,EAAWkI,EAAaR,EAAYO,qBAGrD,6BADNI,EAAMC,KAAKD,OACL,EAAMpD,EAAmB/E,MAAMgI,EAAYK,wBAAjDC,EAAMtH,EAAAC,OACZuB,EAAY+F,KAAK,gBAAiBD,EAAIhB,UAChCkB,EAAUJ,KAAKD,MAAQA,EACvBM,EAAUf,EAAeA,EAAaY,EAAIhB,MAAQgB,EAAIhB,KAC5D3G,EAxLD,SACLb,EACA4I,EACAC,EACAH,EACAlG,EACAuF,GAEA,OAAO,SAAClH,EAAUyE,GACV,IAAApE,EAAAoE,IAAAQ,QAAA9F,GAAEiF,EAAA/D,EAAA+D,mBAAoBL,EAAA1D,EAAA0D,QAASkE,EAAA5H,EAAA4H,kBAAmBC,EAAA7H,EAAA6H,QAASjB,EAAA5G,EAAA4G,SAGjE,GAAI7C,EAAmBhC,KAAK0B,KAAOoD,EAAnC,CAKA,IAAMG,EAAcY,EAAkBE,KAAK,SAAAC,GAAM,OAAAA,EAAGtE,KAAOiE,IAC3D,GAAKV,EAAL,CAKA,IAAIgB,EACAjE,EAAmBkE,gBACrBD,EAAQjE,EAAmBkE,cAAcjB,EAAYhI,MAAO2I,IAI9D,IAAMO,EAAwBN,EAAkBjG,IAAI,SAAAoG,GAClD,OAAIA,EAAGtE,KAAOiE,EACL9H,EAAA,KACFmI,GACHC,MAAKA,EACLR,QAAOA,EACPG,OAAMA,EACNQ,MAAM,IAGHJ,IAIHK,EAAcnJ,OAAAC,EAAA,EAAAD,CAAcyE,EAASmD,EAAcvF,GAYzD,GAVA3B,GACER,KAAMC,EAAA,EAAYiJ,wBAClB/I,SACER,UAASA,EACT4E,QAAS0E,EACTR,kBAAmBM,KAKnBtB,EACF,GAAuB,IAAnB0B,EAAAC,EAAEC,KAAKb,IAET,IADcO,EAAsBJ,KAAK,SAAAC,GAAM,OAAAA,EAAGnB,WAAamB,EAAGI,OACtD,CACV,IAAMvH,EAAQiH,IACdlI,GAAWR,KAAMC,EAAA,EAAYqJ,UAAWnJ,SAAWR,UAASA,EAAE8B,MAAKA,WAIrEjB,EAASoB,EAASjC,OAwHT4J,CAAwB5J,EAAWkI,EAAYvD,GAAIgE,EAASD,EAASlG,EAASuF,mCAEvFrF,EAAY+F,KAAK,aAAcoB,GAC/BhJ,EAnRD,SACLb,EACA4I,EACAkB,EACA/B,GAEA,OAAO,SAAClH,EAAUyE,GACV,IAAApE,EAAAoE,IAAAQ,QAAA9F,GAAEiF,EAAA/D,EAAA+D,mBAAoB6D,EAAA5H,EAAA4H,kBAC5B,GAAI7D,EAAmBhC,KAAK0B,KAAOoD,IAAgB+B,EAASC,WAMvDjB,EAAkBE,KAAK,SAAAC,GAAM,OAAAA,EAAGtE,KAAOiE,IAA5C,CAMA,IAAIvF,EACA2G,EACJ,GAJA5G,QAAQC,MAAMyG,GAIVA,EAAStC,KACX,GAA6B,iBAAlBsC,EAAStC,KAClBnE,EAAQyG,EAAStC,SACZ,KAAIsC,EAAStC,KAAKnE,MAMvB,MAAM,IAAI4G,MAAM,mCALhB5G,EAAQyG,EAAStC,KAAKnE,MAClByG,EAAStC,KAAKsC,WAChBE,EAAeF,EAAStC,KAAKsC,eAMjCzG,EADSyG,EAASnE,QACVmE,EAASnE,QACY,iBAAbmE,EACRA,EAEA,wEAIV,IAAMV,EAAwBN,EAAkBjG,IAAI,SAAAoG,GAClD,OAAIA,EAAGtE,KAAOiE,EACL9H,EAAA,KACFmI,GACH5F,MAAKA,EACL2G,aAAYA,EACZX,MAAM,IAGHJ,IAGTpI,GACER,KAAMC,EAAA,EAAY4J,wBAClB1J,SAAWR,UAASA,EAAE8I,kBAAmBM,OA2N9Be,CAAwBnK,EAAWkI,EAAYvD,GAAIkF,EAAU9B,2CAWvE,SAASqC,EAAUpK,EAAsB+I,GAC9C,OAAO,SAAAlI,GAELA,GAAWR,KAAMC,EAAA,EAAY+J,UAAW7J,SAAWR,UAASA,EAAE+I,QAAOA,KAErE,IAAMjH,EAAQiH,IAEdlI,GAAWR,KAAMC,EAAA,EAAYqJ,UAAWnJ,SAAWR,UAASA,EAAE8B,MAAKA,MAOhE,SAASG,EAASjC,GACvB,OAASK,KAAMC,EAAA,EAAYgK,SAAU9J,SAAWR,UAASA,IAOpD,SAASuK,EAAWvK,EAAsBwK,GAC/C,OAAO,SAAA3J,GAEL,IAAM2B,EAAUgI,EAAW3H,IAAI,SAAA0D,GAAK,OAACzF,EAAA,KAAKyF,EAAMpG,OAAAC,EAAA,EAAAD,MAChDU,GACER,KAAMC,EAAA,EAAYmK,WAClBjK,SACER,UAASA,EACTwC,QAAOA,KAGX3B,EAASW,EAAWxB,KAOjB,SAAS0K,IACd,OAAO,SAAA7J,GACLA,GAAWR,KAAMC,EAAA,EAAYqK,aAC7B9J,EAASsB,MASN,SAASyI,IACd,OAAO,SAAC/J,EAAUyE,GAEhB,IAAMuF,EAAYvF,IAAWQ,QAAQgF,KAC/BC,EAAYjK,EAAA,KACb+J,GACH/B,qBACA3D,eAAgB0F,EAAU5E,gBAAgBG,UAE5CvF,GAAWR,KAAMC,EAAA,EAAY0K,UAAWxK,SAAWuK,UAASA,KAC5DlK,EAASsB,MAQN,SAASA,IACd,OAAO,SAACtB,EAAUyE,GACV,IAAApE,EAAAoE,IAAAQ,QAAEgF,EAAA5J,EAAA4J,KAAMG,EAAA/J,EAAA+J,MAAOC,EAAAhK,EAAAgK,MACfC,KACAC,GACJ1K,WAAYoK,EAAK7F,mBAAmBjC,KACpCR,QAASsI,EAAK7E,gBAAgBpD,IAAIzC,EAAA,GAClC0B,MAAOgJ,EAAKhJ,OAGd,GADAqJ,EAAUL,KAAO3K,OAAAC,EAAA,EAAAD,CAAyBiL,GAAc,GACpDF,EAAO,CACT,IAAMG,GACJ3K,WAAYuK,EAAMhG,mBAAmBjC,KACrCR,QAASyI,EAAMhF,gBAAgBpD,IAAIzC,EAAA,GACnC0B,MAAOmJ,EAAMnJ,OAEfqJ,EAAUF,MAAQ9K,OAAAC,EAAA,EAAAD,CAAyBkL,GAAe,GAE5DxK,EAASV,OAAAmL,EAAA,EAAAnL,EAAiBD,MAAOiL,MAO9B,SAASI,EAAYvL,GAC1B,OAAO,SAACa,EAAUyE,GAChBzE,GAAWR,KAAMC,EAAA,EAAYkL,YAAahL,SAAWR,UAASA,KAC1DsF,IAAWQ,QAAQ9F,GAAWiH,cAChCpG,EAASW,EAAWxB,KAQnB,SAASyL,EAAWzL,GACzB,OAAO,SAACa,EAAUyE,GAChBzE,GAAWR,KAAMC,EAAA,EAAYoL,WAAYlL,SAAWR,UAASA,KACzDsF,IAAWQ,QAAQ9F,GAAWgH,aAChCnG,EAASW,EAAWxB,KAQnB,SAAS2L,EAAY3L,GAC1B,OAAO,SAACa,EAAUyE,GAChBzE,GAAWR,KAAMC,EAAA,EAAYsL,YAAapL,SAAWR,UAASA,KAC1DsF,IAAWQ,QAAQ9F,GAAWkH,cAChCrG,EAASW,EAAWxB,oECnvB1B6L,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAlL,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAAsL,cAAgB,WAAM,OAAAtL,EAAKuL,MAAMC,UAAUxL,EAAKuL,MAAME,WAuBxD,OAxBmCtL,EAAA,EAAA+K,EAAAC,GAGjCD,EAAAQ,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEE,EAAAlL,EAAAkL,OAAQG,EAAArL,EAAAqL,QACVC,EAAYJ,EAAS,iBAAmB,mBACxCK,EAAcF,EAAU,sDAAwD,wBACtF,OACEG,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,iCACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,wBAAwBC,QAASjM,KAAKqL,eACnDS,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,iCACbF,EAAAjD,EAAAkD,cAAA,QAAMC,UAAWJ,KAEnBE,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,+BAA+BhM,KAAKsL,MAAMY,QAE1DV,GACCM,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,uBACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAWH,IACf7L,KAAKsL,MAAMa,YAMxBlB,EAxBA,CAAmCmB,EAAA,mFCPnCC,EAAA,SAAAnB,GACE,SAAAmB,EAAYf,GAAZ,IAAAvL,EACEmL,EAAAoB,KAAAtM,KAAMsL,IAAMtL,YACZD,EAAKwM,OAAU9J,MAAO,KAAM+J,UAAW,QA4B3C,OA/B2CtM,EAAA,EAAAmM,EAAAnB,GAMzCmB,EAAAZ,UAAAgB,kBAAA,SAAkBhK,EAAO+J,GAEvBxM,KAAK0M,UACHjK,MAAOA,EACP+J,UAAWA,KAIfH,EAAAZ,UAAAC,OAAA,WACE,OAAI1L,KAAKuM,MAAMC,UAGXV,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,qBACbF,EAAAjD,EAAAkD,cAAA,2CACAD,EAAAjD,EAAAkD,cAAA,WAASY,OAASC,WAAY,aAC3B5M,KAAKuM,MAAM9J,OAASzC,KAAKuM,MAAM9J,MAAMoK,WACtCf,EAAAjD,EAAAkD,cAAA,WACC/L,KAAKuM,MAAMC,UAAUM,iBAMvB9M,KAAKsL,MAAMa,UAEtBE,EA/BA,CAA2CD,EAAA,+KCc3CW,EAAA,SAAA7B,GAAA,SAAA8B,IAAA,IAAAjN,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAAkN,aAAe,SAAAC,GAAK,OAAAnN,EAAKuL,MAAM2B,aAAalN,EAAKuL,MAAM6B,OAAQD,MAkBjE,OAnByBE,EAAA,EAAAJ,EAAA9B,GAGvB8B,EAAAvB,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAE+B,EAAA/M,EAAA+M,OAAQF,EAAA7M,EAAA6M,OACVG,EAAgBC,KACpBC,6BAA8BH,IAEhC,OACEI,EAAA5E,EAAAkD,cAAA,OAAKC,UAAW,uBAAuBsB,GACrCG,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,qBACbyB,EAAA5E,EAAAkD,cAAA,KAAGC,UAAU,sBAAsBW,OAASe,MAAOP,EAAOO,UAE5DD,EAAA5E,EAAAkD,cAAA,KAAGC,UAAU,6BAA6B2B,MAAOR,EAAOS,MAAO3B,QAASjM,KAAKiN,cAC1EE,EAAOS,SAKlBZ,EAnBA,CAAyBa,EAAA,eAqBJC,EAArB,SAAA5C,GAAA,SAAA6C,IAAA,IAAAhO,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YAKED,EAAAkN,aAAe,SAACE,EAAoBa,IAGlCC,EAFQlO,EAAAuL,MAAA2C,gBAEOd,IADGa,EAAME,SAAWF,EAAMG,SAAWH,EAAMI,cAqB9D,OA5BoChB,EAAA,EAAAW,EAAA7C,GAWlC6C,EAAAtC,UAAAC,OAAA,eAAA3L,EAAAC,KACQM,EAAAN,KAAAsL,MAAE1E,EAAAtG,EAAAsG,KAAMyH,EAAA/N,EAAA+N,aACRC,EAAQ1H,MACd,OACE6G,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,mBACZsC,EAAMrM,IAAI,SAACkL,EAAQvH,GAAM,OACxB6H,EAAA5E,EAAAkD,cAACgB,GACCM,OAAQgB,EAAaE,IAAIpB,EAAOS,OAEhCY,IAAQrB,EAAOpJ,GAAE,IAAI6B,EACrBqH,aAAclN,EAAKkN,aACnBE,OAAQA,QArBXY,EAAAU,cACLR,eAAgB,cA0BpBF,EA5BA,CAAoCF,EAAA,eCQpC,IAAMa,GACJC,QACEC,MAAM,GAERzB,QACE0B,OACEC,UAAW,EACXC,MAAM,GAERC,WAAY,GAEdC,MACEC,gBAAiB,EACjBC,YACAC,gBAAiB,KACjBC,YAAa,EAEbC,WAAW,EACX5B,MAAO,UACP6B,QAAUrF,KAAM,EAAGG,MAAO,GAC1BmF,aAAc,GAEhBC,WACEC,KAAM,IACNhC,MAAO,SA4BXiC,EAAA,SAAAzE,GAAA,SAAA0E,IAAA,IAAA7P,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YAEED,EAAA8P,eAAiB,KAEjB9P,EAAAwM,OACE8B,aAAc,IAAIyB,IAClBC,mBAAmB,GAgCrBhQ,EAAAiQ,eAAiB,SAAChC,EAAOiC,GACvB,GAAIlQ,EAAKuL,MAAM4E,aAAc,CAC3B,IAAMhP,GACJiP,KAAMC,IAAOH,EAAOI,MAAMF,MAC1BG,GAAIF,IAAOH,EAAOI,MAAMC,KAE1BvQ,EAAKuL,MAAM4E,aAAahP,KA6B5BnB,EAAAwQ,oBAAsB,WACpBxQ,EAAK2M,UAEDqD,mBAAmB,GAErBhQ,EAAKyQ,OAITzQ,EAAAkO,eAAiB,SAACd,EAAoBsD,GACpC1Q,EAAK2M,SAAS,SAACH,EAAOjB,GACZ,IAAA1E,EAAA0E,EAAA1E,KAAMqH,EAAA3C,EAAA2C,eACNI,EAAA9B,EAAA8B,aAGFqC,EAAmBrC,EAAavF,OAAS,IAAIgH,IAAIlJ,EAAK3E,IAAI,SAAA0O,GAAK,OAAAA,EAAE/C,SAAQ9E,KAAO,EAElF8H,EAAmB,IAAId,IAC3B,GAAIW,GACEpC,EAAaE,IAAIpB,EAAOS,QAAW8C,IACrCE,EAAmB,IAAId,IAAIlJ,EAAKiK,OAAO,SAAAF,GAAK,OAAAA,EAAE/C,QAAUT,EAAOS,QAAO3L,IAAI,SAAA0O,GAAK,OAAAA,EAAE/C,cAE9E,CAEL,IAAMkD,EAAkB,IAAIhB,IAAIlJ,EAAK3E,IAAI,SAAA0O,GAAK,OAAAA,EAAE/C,UAChDgD,EC7KD,SAAsB/H,EAAWkI,GAGtC,IAFA,IAAM9I,EAAS,IAAI6H,IACbkB,EAAKD,EAAEE,WACA,CACL,IAAA3Q,EAAA0Q,EAAAE,OAAE/O,EAAA7B,EAAA6B,MACR,GADe7B,EAAAmI,KAEb,OAAOR,EAELY,EAAE0F,IAAIpM,IACR8F,EAAOkJ,IAAIhP,IDoKUiP,CAAU,IAAItB,IAAIzB,GAAeyC,IAC/BvC,IAAIpB,EAAOS,OAC9BgD,EAAiBS,OAAOlE,EAAOS,OAE/BgD,EAAiBO,IAAIhE,EAAOS,OAMhC,OAHIK,GACFA,EAAed,EAAOS,MAAOgD,IAG7BvC,aAAcuC,IAEf7Q,EAAKyQ,SAqDZ,OApK2BpD,EAAA,EAAAwC,EAAA1E,GASzB0E,EAAAnE,UAAA6F,aAAA,WACU,IAAA1K,EAAA5G,KAAAsL,MAAA1E,KAER,OAAO5G,KAAKuM,MAAMwD,kBAAoBnJ,EAAOA,EAAKpB,MAAM,EA5F1B,KA+FhCoK,EAAAnE,UAAA8F,kBAAA,WACEvR,KAAKwQ,OACLxQ,KAAKwR,IAAMC,IAAE,IAAIzR,KAAKsL,MAAMvH,IAC5B/D,KAAKwR,IAAIE,KAAK,eAAgB1R,KAAKgQ,iBAGrCJ,EAAAnE,UAAAkG,mBAAA,SAAmBC,EAAuBC,IAEtCD,EAAUhL,OAAS5G,KAAKsL,MAAM1E,MAC9BgL,EAAU1Q,QAAUlB,KAAKsL,MAAMpK,OAC/B0Q,EAAUtH,QAAUtK,KAAKsL,MAAMhB,OAC/BsH,EAAU9Q,SAAWd,KAAKsL,MAAMxK,QAC/B8Q,EAAU9I,MAAQ8I,EAAU9I,KAAK/H,QAAUf,KAAKsL,MAAMxC,KAAK/H,QCzH3D,SAAkB8H,EAAWkI,GAClC,GAAIlI,EAAEC,OAASiI,EAAEjI,KACf,OAAO,EAGT,IADA,IAAMkI,EAAKnI,EAAEoI,WACA,CACL,IAAA3Q,EAAA0Q,EAAAE,OAAE/O,EAAA7B,EAAA6B,MACR,GADe7B,EAAAmI,KAEb,OAAO,EAET,IAAKsI,EAAExC,IAAIpM,GACT,OAAO,GD+GN2P,CAAMD,EAAUxD,aAAcrO,KAAKuM,MAAM8B,gBAE1CrO,KAAKwQ,QAITZ,EAAAnE,UAAAsG,qBAAA,WACE/R,KAAKwR,IAAIQ,OAAO,eAAgBhS,KAAKgQ,iBAavCJ,EAAAnE,UAAAwG,kBAAA,WACQ,IAAA3R,EAAAN,KAAAsL,MAAEpK,EAAAZ,EAAAY,MACFgR,GADS5R,EAAAwI,KACK/H,OAAS,GAAK,IAC5BoP,EAAAjP,EAAAiP,KAAMG,EAAApP,EAAAoP,GACPF,EAAAvH,EAAOsJ,SAAShC,KACnBA,EAAOiC,EAAA,MAAejC,GAAM,IAEzBC,EAAAvH,EAAOsJ,SAAS7B,KACnBA,EAAK8B,EAAA,MAAe9B,GAAI,IAE1B,IAAM+B,EAAMlC,EAAKmC,UACXC,EAAMjC,EAAGgC,UACf,OACEjC,OACEX,KAAM,OACN2C,IAAKA,EACLE,IAAKA,EACLrG,MAAO,WACPgG,MAAOA,EACPM,SAAU,UACVC,WAjJR,SAAqBP,EAAOG,EAAKE,GAC/B,GAAIF,GAAOE,GAAOL,EAAO,CACvB,IAAMhR,EAAQqR,EAAMF,EACdK,EAAaxR,EAAQgR,EAAQ,IAInC,OAAIQ,GAAc,GACT,WAELA,GAAc,MAAQxR,GANX,MAON,QAELwR,GAAc,IACT,cAELA,GAAc,SAAWxR,GAXb,QAYP,QAEF,QAGT,MAAO,QA2HWyR,CAAYT,EAAOG,EAAKE,MA8C1C3C,EAAAnE,UAAA+E,KAAA,WACU,IAAAlQ,EAAAN,KAAAsL,MAAAsH,mBAAA,IAAAtS,OACA+N,EAAArO,KAAAuM,MAAA8B,aACFzH,EAAO5G,KAAKsR,eAEZE,EAAMC,IAAE,IAAIzR,KAAKsL,MAAMvH,IACzBoJ,IAAYvG,OAAQ,EAAG,MAEvBA,GAAQA,EAAKrE,OAAS,IACxB4K,EAASvG,EAAKiK,OAAO,SAACgC,GAAmB,OAACxE,EAAaE,IAAIsE,EAAGjF,SAAQ3L,IAAI,SAAC4Q,GAAmB,OAC5FnF,MAAOmF,EAAGnF,MACVxB,MAAO2G,EAAG3G,MACVtF,KAAMiM,EAAGC,aAAa,YAI1B9S,KAAK6P,eAAiB7P,KAAKiS,oBAE3B,IAAMtK,EAAUyF,EAAA,KACXsB,EACA1O,KAAK6P,eACL+C,GAGLnB,EAAA5I,EAAEkK,KAAKvB,EAAKrE,EAAQxF,IAGtBiI,EAAAnE,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAE0H,EAAA1S,EAAAQ,cAAA,IAAAkS,EAAA,QAAAA,EAAkBC,EAAA3S,EAAAyD,UAAA,IAAAkP,EAAA,QAAAA,EAClB5E,EAAArO,KAAAuM,MAAA8B,aACFzH,EAAO5G,KAAKsR,eAElB,OACE7D,EAAA5E,EAAAkD,cAAA0B,EAAA5E,EAAAqK,SAAA,KACGlT,KAAKsL,MAAM1E,MACV5G,KAAKsL,MAAM1E,KAAKrE,OArOQ,KAsOvBvC,KAAKuM,MAAMwD,mBACVtC,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,0BACbyB,EAAA5E,EAAAkD,cAAA,KAAGC,UAAU,wCACZ,gCACDyB,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,uBAAuBC,QAASjM,KAAKuQ,qBAAsB,YACzEvQ,KAAKsL,MAAM1E,KAAKrE,SAIxBkL,EAAA5E,EAAAkD,cAAA,OAAKhI,GAAIA,EAAIiI,UAAU,gBAAgBW,OAAS7L,OAAMA,KACtD2M,EAAA5E,EAAAkD,cAAC+B,GAAOlH,KAAMA,EAAMyH,aAAcA,EAAcJ,eAAgBjO,KAAKiO,mBAI7E2B,EApKA,CAA2B/B,EAAA,eAsKZsF,EAAA,EAAA5T,OAAA6T,EAAA,SAAA7T,EAAA,CAAWoQ,yNE/J1B0D,EAAA,SAAAnI,GAQE,SAAAmI,EAAY/H,GAAZ,IAAAvL,EACEmL,EAAAoB,KAAAtM,KAAMsL,IAAMtL,YA8BdD,EAAAuT,OAAS,SAAAC,GACPxT,EAAKwT,GAAKA,GAGZxT,EAAAyT,mBAAqB,SAAMC,GAAM,OAAAvT,EAAA,EAAAH,OAAA,uDAC/BC,KAAKsL,MAAMzL,iBAAiBG,KAAKsL,MAAMlM,UAAWqU,EAAOtR,gBAG3DpC,EAAAmQ,aAAe,SAAChP,EAAkBwS,GAC5B3T,EAAKuL,MAAMpE,WAAawM,GAC1B3T,EAAK4T,iBAEP5T,EAAKuL,MAAMrK,WAAWlB,EAAKuL,MAAMlM,UAAW8B,IAG9CnB,EAAA6T,aAAe,WACb7T,EAAKuL,MAAMlK,aAAarB,EAAKuL,MAAMlM,YAGrCW,EAAA8T,kBAAoB,WAClB9T,EAAKuL,MAAMxB,cAIb/J,EAAA+T,eAAiB,SAACxU,GAChBS,EAAKuL,MAAM3B,WAAW5J,EAAKuL,MAAMlM,WAAYE,KAG/CS,EAAAgU,aAAe,WACbhU,EAAKuL,MAAMtB,aAGbjK,EAAAkN,aAAe,SAACuB,EAAarM,GAC3BpC,EAAKiU,iBAAkBvU,KAAM,aAAc+O,IAAGA,EAAErM,MAAKA,KAGvDpC,EAAAiU,gBAAkB,SAACC,EAAQ5U,GACjB,IAAAgF,EAAAtE,EAAAuL,MAAAjH,mBACR,GAAIA,GAAsBA,EAAmB6P,YAAa,CAExDnU,EAAKuL,MAAMzF,cAAc9F,EAAKuL,MAAMlM,UAAW6U,EAAQ5U,EADtC,SAACuC,EAAoBkE,GAAsB,OAAAzB,EAAmB6P,YAAYtS,EAASkE,OAKxG/F,EAAAoU,SAAW,SAACrL,GACV/I,EAAKuL,MAAMzK,WAAWd,EAAKuL,MAAMlM,UAAW0J,IAG9C/I,EAAAqU,gBAAkB,WAEhB,IAAMjM,EAAUpI,EAAKsU,kBACrBtU,EAAKuL,MAAM9B,UAAUzJ,EAAKuL,MAAMlM,UAAW+I,IAG7CpI,EAAAsU,kBAAoB,WAElB,OAAOtU,EAAKuU,cAAcC,QAAQC,MAAM,GAAG,IAG7CzU,EAAA4T,eAAiB,WACf5T,EAAKuL,MAAMjK,SAAStB,EAAKuL,MAAMlM,YAGjCW,EAAA0U,SAAW,WACT1U,EAAKuL,MAAM1K,WAAWb,EAAKuL,MAAMlM,YA7FjCW,EAAK2U,cAAgB,IAAIC,EAAA,EACzB5U,EAAKuU,cAAgBxI,EAAAjD,EAAM+L,cAwN/B,OAnO6B1U,EAAA,EAAAmT,EAAAnI,GAcrBmI,EAAA5H,UAAA8F,kBAAN,qHACQjR,EAAuCN,KAAKsL,MAA1ClM,EAASkB,EAAAlB,UAAEyV,EAAWvU,EAAAuU,YAAEC,EAAQxU,EAAAwU,SAEnCD,IAEK/U,GAAFkT,EAAkD8B,OAAtChV,WAAE8B,EAAOoR,EAAApR,QAAEqR,EAAAD,EAAA9R,aAAK,IAAA+R,EAAG8B,EAAA,EAAa9B,EAC5C3O,EAAoBxE,GAAckV,EAAA,EAAM5U,IAAI2U,EAAA,GAC5CxQ,EAA8BhF,OAAAwV,EAAA,EAAAxV,CAAcqC,GAC5CqT,GAAiB9E,KAAM5Q,OAAA2V,EAAA,EAAA3V,CAAU2B,EAAMiP,MAAOG,GAAI/Q,OAAA2V,EAAA,EAAA3V,CAAU2B,EAAMoP,KAClEvP,EAAQf,KAAKuT,GAAKvT,KAAKuT,GAAG4B,YAAc,EAC9CnV,KAAKsL,MAAM3J,kBACTvC,EACAkF,EACAC,EACA0Q,EACAlU,EACAf,KAAK0U,yBAKXrB,EAAA5H,UAAAsG,qBAAA,WACE/R,KAAK0U,cAAcU,sBAsErB/B,EAAA5H,UAAAC,OAAA,eAAA3L,EAAAC,KACQM,EAAAN,KAAAsL,MACJ3H,EAAArD,EAAAqD,UACAU,EAAA/D,EAAA+D,mBACAM,EAAArE,EAAAqE,gBACA0Q,EAAA/U,EAAA+U,kBACAC,EAAAhV,EAAAgV,kBACAvT,EAAAzB,EAAAyB,mBACA3C,EAAAkB,EAAAlB,UACAuM,EAAArL,EAAAqL,QACApH,EAAAjE,EAAAiE,eACArD,EAAAZ,EAAAY,MACAsD,EAAAlE,EAAAkE,iBACA8F,EAAAhK,EAAAgK,MACAjH,EAAA/C,EAAA+C,cACAE,EAAAjD,EAAAiD,aACAE,EAAAnD,EAAAmD,cAEI8R,EAAejL,EAAQ,wBAA0B,UACjDkL,EAAqBnR,EACvBtC,EAAmBqG,KAAK,SAAAuI,GAAK,OAAAA,EAAEvO,OAASiC,EAAmBjC,YAC3DqT,EAEJ,OACE3J,EAAAjD,EAAAkD,cAAA,OAAKC,UAAWuJ,EAAcG,IAAK1V,KAAKsT,QACtCxH,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,UACE,SAAd5M,EACC0M,EAAAjD,EAAAkD,cAAA,WACED,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,mBACXF,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,6BAKjBF,EAAAjD,EAAAkD,cAAAD,EAAAjD,EAAAqK,SAAA,KACEpH,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,oBACfF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,uCACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,oBAAoBC,QAASjM,KAAK6T,mBAAiB,iBAMzEyB,EAQE,KAPFxJ,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAC4J,EAAA,GACCC,SAAU5V,KAAKwT,mBACfqC,YAAa9T,EACbwS,QAASiB,KAIf1J,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,mBACA,SAAd5M,GAAyBkL,EAMtB,KALFwB,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,oBAAoBC,QAASjM,KAAK+T,cAAY,UAKpEjI,EAAAjD,EAAAkD,cAACmJ,EAAA,GAAWQ,IAAK1V,KAAKsU,cAAepT,MAAOA,EAAOgP,aAAclQ,KAAKkQ,eACtEpE,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,2CAA2CC,QAASjM,KAAK4T,cAAY,cAIzF9H,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,2BACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,2CAA2CC,QAASjM,KAAKyU,sBAC/D,IACT9I,EACCG,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,yCAEbF,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,uCAKpBqJ,EAAoBvJ,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,qBAAmB,yBAA+B,KACrFsJ,EACCxJ,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,qBAAmB,qEAChC,KAEHrH,GACCmH,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,qBACbF,EAAAjD,EAAAkD,cAAC+J,EAAA,GAAM/Q,QAAS,mCAAmCJ,KAItDN,IACEM,GACCmH,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,qBACbF,EAAAjD,EAAAkD,cAACgK,EAAA,GAAUrB,cAAe1U,KAAK0U,cAAetV,UAAWA,EAAWmF,eAAgBA,IACpFuH,EAAAjD,EAAAkD,cAACiK,EAAA,GAAU7B,SAAUnU,KAAKmU,SAAU8B,eAAa,GAC9C,SAAC3V,OAAES,EAAAT,EAAAS,MAAY,OACd+K,EAAAjD,EAAAkD,cAAA,QAAMC,UAAU,QAAQW,OAAS5L,MAAKA,IACpC+K,EAAAjD,EAAAkD,cAACmK,EAAA,EAAa,KACX1R,GAAoBsH,EAAAjD,EAAAkD,cAACpI,GAAUmQ,eAAgB/T,EAAK+T,kBACnDtP,GACAsH,EAAAjD,EAAAkD,cAAAD,EAAAjD,EAAAqK,SAAA,KACG7P,GAAiByI,EAAAjD,EAAAkD,cAACoK,EAAA,GAAe/W,UAAWA,IAC5CqE,GAAiBqI,EAAAjD,EAAAkD,cAACqK,EAAA,GAAehX,UAAWA,EAAWiX,YAAatW,EAAKkN,eACzE1J,GACCuI,EAAAjD,EAAAkD,cAACuK,EAAA,GACClX,UAAWA,EACX8Q,aAAcnQ,EAAKmQ,aACnBjD,aAAclN,EAAKkN,aACnBmH,gBAAiBrU,EAAKqU,gBACtBT,eAAgB5T,EAAK4T,yBAcnDN,EAnOA,CAA6BvH,EAAAjD,EAAM0N,eAgRnC,IAAMC,GACJ3W,iBAAgB4W,EAAA,EAChB5V,WAAU4V,EAAA,EACVxV,WAAUwV,EAAA,EACVrV,aAAYqV,EAAA,EACZ9U,kBAAiB8U,EAAA,EACjB5Q,cAAa4Q,EAAA,EACb7V,WAAU6V,EAAA,EACVjN,UAASiN,EAAA,EACTpV,SAAQoV,EAAA,EACR9M,WAAU8M,EAAA,EACV3M,WAAU2M,EAAA,EACVzM,UAASyM,EAAA,GAGItD,EAAA,EAAA5T,OAAAmX,EAAA,IAAAnX,CAAIoX,EAAJ,CAAYpX,OAAAqX,EAAA,EAAArX,CA1D3B,SAAyBgN,EAAmBjM,OAAElB,EAAAkB,EAAAlB,UACtC8F,EAAUqH,EAAMrH,QACdoF,EAAApF,EAAAoF,MACFuM,EAAyB3R,EAAQ9F,GAErCuE,EAAAkT,EAAAlT,UACAgB,EAAAkS,EAAAlS,gBACAN,EAAAwS,EAAAxS,mBACAgR,EAAAwB,EAAAxB,kBACAC,EAAAuB,EAAAvB,kBACAvT,EAAA8U,EAAA9U,mBACAuC,EAAAuS,EAAAvS,kBACAC,EAAAsS,EAAAtS,eACAsQ,EAAAgC,EAAAhC,YACA3M,EAAA2O,EAAA3O,kBACAhH,EAAA2V,EAAA3V,MACAsD,EAAAqS,EAAArS,iBACAnB,EAAAwT,EAAAxT,cACAE,EAAAsT,EAAAtT,aACAE,EAAAoT,EAAApT,cAGF,OACEE,UAASA,EACTgB,gBAAeA,EACfN,mBAAkBA,EAClBgR,kBAAiBA,EACjBC,kBAAiBA,EACjBvT,mBAAkBA,EAClBuC,kBAAiBA,EACjBC,eAAcA,EACdsQ,YAAWA,EACXlJ,QAXczD,EAAkB4O,KAAK,SAAAzO,GAAM,OAACA,EAAGI,OAY/CP,kBAAiBA,EACjBhH,MAAKA,EACLsD,iBAAgBA,EAChB8F,MAAKA,EACLjH,cAAaA,EACbE,aAAYA,EACZE,cAAaA,IAmBmC+S,EAAzBjX,CAA6C8T,6DCvYxE0D,EAAApG,EAAAwC,EAAA,sBAAA6D,IAAA,IAAAC,EAAAF,EAAA,GAAAG,EAAAH,EAAAI,EAAAF,GAMaD,EAAmB,SAAA1L,GACtB,IAAAvG,EAAAuG,EAAAvG,QACR,OACEmS,EAAArO,EAAAkD,cAAA,OAAKC,UAAU,yBACbkL,EAAArO,EAAAkD,cAAA,OAAKC,UAAU,qBACbkL,EAAArO,EAAAkD,cAAA,OAAKC,UAAU,cACbkL,EAAArO,EAAAkD,cAAA,KAAGC,UAAU,gCAEfkL,EAAArO,EAAAkD,cAAA,OAAKC,UAAU,cACbkL,EAAArO,EAAAkD,cAAA,OAAKC,UAAU,eAAejH,gICSxCqS,EAAA,SAAAlM,GAAA,SAAAkM,IAAA,IAAArX,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAAsX,mBAAqB,WACnBtX,EAAKuL,MAAMX,YAAY5K,EAAKuL,MAAMlM,cAmBtC,OArBoCc,EAAA,EAAAkX,EAAAlM,GAKlCkM,EAAA3L,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAElM,EAAAkB,EAAAlB,UAAWkY,EAAAhX,EAAAgX,YAAa3L,EAAArL,EAAAqL,QAASuE,EAAA5P,EAAA4P,aAAc7J,EAAA/F,EAAA+F,aAAcC,EAAAhG,EAAAgG,aAAcpF,EAAAZ,EAAAY,MAAOoJ,EAAAhK,EAAAgK,MACpFiN,EAAclR,GAAgBC,EAAe,QAAU,QAC7D,OACEwF,EAAAjD,EAAAkD,cAACyL,EAAA,GAAMtL,MAAM,QAAQV,OAAQnF,EAAcsF,QAASA,EAASJ,SAAUvL,KAAKqX,oBAC1EvL,EAAAjD,EAAAkD,cAAC0L,EAAA,GACC7Q,KAAM0Q,EACNxW,OAAQyW,EACRxT,GAAI,iBAAiB3E,EACrB8Q,aAAcA,EACdhP,MAAOA,EACPoJ,MAAOA,MAKjB8M,EArBA,CAAoChL,EAAA,eAgCpC,IAAMoK,GACJ7L,YAAW+M,EAAA,GAGEvE,EAAA,EAAA5T,OAAAmX,EAAA,IAAAnX,CAAIoX,EAAJ,CAAYpX,OAAAqX,EAAA,EAAArX,CAb3B,SAAyBgN,EAAmBjM,OAAElB,EAAAkB,EAAAlB,UACtC8F,EAAUqH,EAAMrH,QACdoF,EAAApF,EAAAoF,MACFuM,EAAyB3R,EAAQ9F,GAC/BkY,EAAAT,EAAAS,YAAapP,EAAA2O,EAAA3O,kBAAmBhH,EAAA2V,EAAA3V,MAAOmF,EAAAwQ,EAAAxQ,aAAcC,EAAAuQ,EAAAvQ,aAE7D,OAASgR,YAAWA,EAAE3L,QADNzD,EAAkB4O,KAAK,SAAAzO,GAAM,MAAkB,UAAlBA,EAAGvB,aAA2BuB,EAAGI,OAC/CvH,MAAKA,EAAEmF,aAAYA,EAAEC,aAAYA,EAAEgE,MAAKA,IAOrBkM,EAAzBjX,CAA6C6X,mJC/BxEO,EAAA,SAAAzM,GAAA,SAAAyM,IAAA,IAAA5X,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAA6X,kBAAoB,WAClB7X,EAAKuL,MAAMT,WAAW9K,EAAKuL,MAAMlM,cAqCrC,OAvCmCc,EAAA,EAAAyX,EAAAzM,GAKjCyM,EAAAlM,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MACJlM,EAAAkB,EAAAlB,UACAuM,EAAArL,EAAAqL,QACAkM,EAAAvX,EAAAuX,2BACAC,EAAAxX,EAAAwX,WACA5H,EAAA5P,EAAA4P,aACAjD,EAAA3M,EAAA2M,aACAmH,EAAA9T,EAAA8T,gBACAT,EAAArT,EAAAqT,eACAzS,EAAAZ,EAAAY,MACAkF,EAAA9F,EAAA8F,YACAc,EAAA5G,EAAA4G,SACA6Q,EAAAzX,EAAAyX,UAEF,OACEjM,EAAAjD,EAAAkD,cAACyL,EAAA,GAAMtL,MAAM,OAAOP,QAASA,EAASH,OAAQpF,EAAamF,SAAUvL,KAAK4X,mBACxE9L,EAAAjD,EAAAkD,cAACiM,EAAA,GACCpR,KAAMkR,EACN1Y,UAAWA,EACXoP,IAAKsJ,EAAW/T,GAChBkU,uBAAwBJ,EACxBlM,QAASA,EACTuE,aAAcA,EACdjD,aAAcA,EACdmH,gBAAiBA,EACjBT,eAAgBA,EAChBzS,MAAOA,EACPgG,SAAUA,EACV6Q,UAAWA,MAKrBJ,EAvCA,CAAmCvL,EAAA,eAyDnC,IAAMoK,GACJ3L,WAAU6M,EAAA,GAGGvE,EAAA,EAAA5T,OAAAmX,EAAA,IAAAnX,CAAIoX,EAAJ,CAAYpX,OAAAqX,EAAA,EAAArX,CApB3B,SAAyBgN,EAAmBjM,OAAElB,EAAAkB,EAAAlB,UAEtCyX,EADUtK,EAAMrH,QACiB9F,GAC/ByY,EAAAhB,EAAAgB,2BAA4BC,EAAAjB,EAAAiB,WAAY5P,EAAA2O,EAAA3O,kBAAmBhB,EAAA2P,EAAA3P,SAAU6Q,EAAAlB,EAAAkB,UAAW3R,EAAAyQ,EAAAzQ,YAAalF,EAAA2V,EAAA3V,MAErG,OACEyK,QAFczD,EAAkB4O,KAAK,SAAAzO,GAAM,MAAkB,SAAlBA,EAAGvB,aAA0BuB,EAAGI,OAG3EoP,2BAA0BA,EAC1BC,WAAUA,EACV5Q,SAAQA,EACR6Q,UAASA,EACT3R,YAAWA,EACXlF,MAAKA,IAQ2CsV,EAAzBjX,CAA6CoY,kGCxExEO,EAAA,SAAAhN,GAAA,SAAAgN,mDAYA,OAZuChY,EAAA,EAAAgY,EAAAhN,GACrCgN,EAAAzM,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAE0H,EAAA1S,EAAA0L,iBAAA,IAAAgH,EAAA,GAAAA,EAAgB0B,EAAApU,EAAAoU,cAAetV,EAAAkB,EAAAlB,UAAWmF,EAAAjE,EAAAiE,eAClD,OACEuH,EAAAjD,EAAAkD,cAAA,OAAKC,UAAWA,GACbzH,EAAetC,IAAI,SAAC3C,EAAOD,GAAU,OAEpCyM,EAAAjD,EAAAkD,cAACoM,EAAA,GAAS3J,IAAKlP,EAAMkP,IAAKkG,cAAeA,EAAetV,UAAWA,EAAWC,MAAOA,QAK/F6Y,EAZA,CAAuC9L,EAAA,8JCkCvC,IAAAgM,EAAA,SAAAlN,GAAA,SAAAkN,IAAA,IAAArY,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAAsY,eAAiB,WACP,IAAAjZ,EAAAW,EAAAuL,MAAAlM,UACRW,EAAKuL,MAAM1K,WAAWxB,IAGxBW,EAAAuY,cAAgB,SAAChZ,EAAkBoB,GAC3B,IAAAJ,EAAAP,EAAAuL,MAAEjH,EAAA/D,EAAA+D,mBAAoBjF,EAAAkB,EAAAlB,UAAWC,EAAAiB,EAAAjB,MACvCU,EAAKuL,MAAM7K,YAAYrB,EAAWE,EAAOD,EAAOqB,GAC5CpB,IAAUoB,GAAY2D,EAAmBkU,0BAAsC,IAAVlZ,GAEvEU,EAAKyY,qBAAqBlZ,IAI9BS,EAAA0Y,iBAAmB,WACX,IAAAnY,EAAAP,EAAAuL,MAAElM,EAAAkB,EAAAlB,UAAWC,EAAAiB,EAAAjB,MACnBU,EAAKuL,MAAMnM,YAAYC,EAAWC,IAGpCU,EAAA2Y,mBAAqB,WACnB3Y,EAAKuY,cAAc,MAAM,IAG3BvY,EAAA4Y,eAAiB,SAAA1E,GACT,IAAA3T,EAAAP,EAAAuL,MAAEjH,EAAA/D,EAAA+D,mBAAoBjF,EAAAkB,EAAAlB,UAAWC,EAAAiB,EAAAjB,MACvC,GAAIgF,GAAsBA,EAAmB6P,YAAa,CAExDnU,EAAKuL,MAAMzF,cAAczG,EAAW6U,EAAQ5U,EAD3B,SAACuC,EAAoBqS,GAAgB,OAAA5P,EAAmB6P,YAAYtS,EAASqS,OAKlGlU,EAAA6Y,oBAAsB,WACd,IAAAtY,EAAAP,EAAAuL,MAAElM,EAAAkB,EAAAlB,UAAWC,EAAAiB,EAAAjB,MACnBU,EAAKuL,MAAMpF,eAAe9G,EAAWC,IAGvCU,EAAAyY,qBAAuBK,EAAAhQ,EAAEiQ,SAAS,SAAC3W,GACzB,IAAAkC,EAAAtE,EAAAuL,MAAAjH,mBACR,GAAIA,EAAmBkU,yBAA0B,CAC/C,IAAM9W,GAAe4C,EAAmBkU,yBAAyBpW,IACjEpC,EAAKuL,MAAM9J,wBAAwBzB,EAAKuL,MAAMlM,UAAWqC,KAE1D,OAoDL,OA/F8BvB,EAAA,EAAAkY,EAAAlN,GA6C5BkN,EAAA3M,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEjH,EAAA/D,EAAA+D,mBAAoBL,EAAA1D,EAAA0D,QAAS3E,EAAAiB,EAAAjB,MAAO0Z,EAAAzY,EAAAyY,aAAc7Q,EAAA5H,EAAA4H,kBAAmBwM,EAAApU,EAAAoU,cAAexT,EAAAZ,EAAAY,MACtF8X,EAAe9Q,EAAkB2I,OAAO,SAAAoI,GAAK,OAAAA,EAAE5R,WAAahI,IAC5D6Z,EAAuBF,EAAa5Q,KAAK,SAAA6Q,GAAK,YAAYxD,IAAZwD,EAAExW,QAChD0W,EA3EV,SAAsCH,GACpC,IAAM1R,EAAc0R,EAAa5Q,KAAK,SAAAC,GAAM,OAAAA,EAAGC,OAASD,EAAGC,MAAM/F,OAAS,IAC1E,GAAI+E,EACF,OAAOA,EAAYgB,MAAM,GAwEZ8Q,CAA6BJ,GACpCK,EAAaH,EAAuBA,EAAqBzW,MAAQ,KACjE6W,EAAajV,EAAmBT,cAAc2V,kBACpD,OACEzN,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,aACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,oBACbF,EAAAjD,EAAAkD,cAACyN,EAAA,GAAuBR,aAAcA,KAExClN,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,mBACZsN,EACCxN,EAAAjD,EAAAkD,cAACuN,GACCxZ,WAAYuE,EACZ5B,MAAO4W,EACPF,KAAMA,EACNJ,aAAcA,EACd/U,QAASA,EACT2U,eAAgB3Y,KAAK2Y,eACrBc,aAAczZ,KAAKqY,eACnBqB,cAAe1Z,KAAKsY,gBAGtBxM,EAAAjD,EAAAkD,cAAC4N,EAAA,GACC7Z,WAAYuE,EACZ5B,MAAO4W,EACPK,cAAe1Z,KAAKsY,cACpBD,eAAgBrY,KAAKqY,eACrBU,aAAcA,EACdrE,cAAeA,EACfxT,MAAOA,KAIb4K,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,mBACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,yCAAyCC,QAASjM,KAAK0Y,oBACvE5M,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,iBAEfF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,yCAAyCC,QAASjM,KAAKyY,kBACvE3M,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,gBAEfF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,yCAAyCC,QAASjM,KAAK4Y,qBACvE9M,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,oBAMzBoM,EA/FA,CAA8BhM,EAAA,eAyG9B,IAAMoK,GACJrX,YAAWya,EAAA,EACXnZ,YAAWmZ,EAAA,EACXpY,wBAAuBoY,EAAA,EACvB/T,cAAa+T,EAAA,EACb1T,eAAc0T,EAAA,EACdhZ,WAAUgZ,EAAA,GAGGzG,EAAA,EAAA5T,OAAAsa,EAAA,IAAAta,CAAIoX,EAAJ,CAAYpX,OAAAua,EAAA,EAAAva,CAjB3B,SAAyBgN,EAAmBjM,OAAElB,EAAAkB,EAAAlB,UAAWC,EAAAiB,EAAAjB,MAEjDwX,EADUtK,EAAMrH,QACiB9F,GAC/BiF,EAAAwS,EAAAxS,mBAAoBL,EAAA6S,EAAA7S,QAASO,EAAAsS,EAAAtS,eAAgB2D,EAAA2O,EAAA3O,kBAAmBhH,EAAA2V,EAAA3V,MAExE,OAASmD,mBAAkBA,EAAEL,QAAOA,EAAE+U,aADjBxU,EAAelF,GACgB6I,kBAAiBA,EAAEhH,MAAKA,IAY1BsV,EAAzBjX,CAA6C6Y,yGChJxE2B,UAAA,SAAA7O,GAAA,SAAA6O,mDAuDA,OAvDyC7Z,EAAA,EAAA6Z,EAAA7O,GAIjC6O,EAAAtO,UAAA8F,kBAAN,6GACE,OAAKvR,KAAKga,SAIJ1Z,EAAqDN,KAAKsL,MAAxDxL,EAAUQ,EAAAR,WAAEiZ,EAAYzY,EAAAyY,aAAErE,EAAapU,EAAAoU,cAAExT,EAAKZ,EAAAY,MACtDlB,KAAKia,YAAY/Y,GAEXgZ,EAAS3a,OAAA4a,EAAA,EAAA5a,GACT6a,EAAW,2DACXC,EAASna,EAAA,GAAEJ,WAAYA,EAAWsC,MAAS2W,GAC3CuB,GACJC,MACEza,WAAUA,EACVua,OAAMA,EACNG,QAAS,WACPza,EAAKuL,MAAMoO,cAAcW,GAAQ,GACjCta,EAAKuL,MAAM+M,kBAEboC,OAAQ/F,EACRgG,OACE5a,WAAUA,EACV6a,SAAUN,IAEZO,eAIJ5a,KAAK6a,UAAYX,EAAOY,KAAK9a,KAAKga,QAASM,EAAYF,GACvDpa,KAAKsL,MAAMoO,cAAcW,GAAQ,SA3B/B,QA8BJN,EAAAtO,UAAAsG,qBAAA,WACM/R,KAAK6a,WACP7a,KAAK6a,UAAUE,WAInBhB,EAAAtO,UAAAwO,YAAA,SAAY/Y,GACM3B,OAAAyb,EAAA,EAAAzb,GACR6F,MACN6V,KAAM/Z,EACNsZ,SAAS,EACTU,YAAa,WAAM,aACnBC,iBAAkB,WAAM,OAAA3Y,QAAQ4Y,IAAI,yBAIxCrB,EAAAtO,UAAAC,OAAA,eAAA3L,EAAAC,KACE,OAAO8L,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,gBAAgB0J,IAAK,SAAAsE,GAAW,OAACja,EAAKia,QAAUA,GAAUrN,OAAS5L,MAAO,WAEpGgZ,EAvDA,CAAyC3N,EAAA,+ICDzCiP,EAAA,SAAAnQ,GAAA,SAAAmQ,IAAA,IAAAtb,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAAub,mBAAqB,WACnBvb,EAAKuL,MAAMP,YAAYhL,EAAKuL,MAAMlM,cAWtC,OAboCc,EAAA,EAAAmb,EAAAnQ,GAKlCmQ,EAAA5P,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEK,EAAArL,EAAAqL,QAAS0K,EAAA/V,EAAA+V,YAAa/P,EAAAhG,EAAAgG,aAAciV,EAAAjb,EAAAib,YAC5C,OACEzP,EAAAjD,EAAAkD,cAACyL,EAAA,GAAMtL,MAAM,QAAQP,QAASA,EAASH,OAAQlF,EAAciF,SAAUvL,KAAKsb,oBAC1ExP,EAAAjD,EAAAkD,cAACyP,EAAA,GAAM5U,KAAM2U,EAAa5P,QAASA,EAAS0K,YAAaA,MAIjEgF,EAbA,CAAoCjP,EAAA,eAuBpC,IAAMoK,GACJzL,YAAW2M,EAAA,GAGEvE,EAAA,EAAA5T,OAAAmX,EAAA,IAAAnX,CAAIoX,EAAJ,CAAYpX,OAAAqX,EAAA,EAAArX,CAZ3B,SAAyBgN,EAAmBjM,OAAElB,EAAAkB,EAAAlB,UAEtCyX,EADUtK,EAAMrH,QACiB9F,GAC/B8I,EAAA2O,EAAA3O,kBAAmB5B,EAAAuQ,EAAAvQ,aAAciV,EAAA1E,EAAA0E,YAEzC,OAAS5P,QADOzD,EAAkB4O,KAAK,SAAAzO,GAAM,MAAkB,UAAlBA,EAAGvB,aAA2BuB,EAAGI,OAC5DnC,aAAYA,EAAEiV,YAAWA,IAOO/E,EAAzBjX,CAA6C8b,kHC1ClEI,EAAc,UAAI,GAElBC,EAAc,iBAYpB,IAAAC,EAAA,SAAAzQ,GAAA,SAAAyQ,IAAA,IAAA5b,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAA6b,aAAe,SAACrP,EAAOsP,EAASC,GAC9B,OACE7P,QAAS,SAACiB,GAER,GAAIA,EAAEmN,QAEmB,SADVnN,EAAEmN,OACNrO,UAAsB,CAC7B,IAAM+P,EAAYD,EAAOE,OACnBC,EAAWJ,EAAQK,IAAIH,GAC7Bhc,EAAKuL,MAAM+K,YAAY0F,EAAWE,SAiC9C,OA3CmC/b,EAAA,EAAAyb,EAAAzQ,GAiBjCyQ,EAAAlQ,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAE1E,EAAAtG,EAAAsG,KAAM+E,EAAArL,EAAAqL,QACRwQ,EAAavV,GAAQ6U,EACrBW,EAAcD,EAAWE,QAAQpa,IAAI,SAAC3B,GAAa,OAAXA,EAAAgc,OACxCD,EAAUF,EAAWE,QAAQpa,IAAI,SAAC3B,OAAEic,EAAAjc,EAAAic,WAAYD,EAAAhc,EAAAgc,KAAW,OAC/DN,OAAQM,EACRE,SAAUF,EACVtQ,UAAW0P,EAAYe,KAAKH,GAAQ,aAAe,GACnD1N,KAAe,SAAT0N,EACNI,KAAM,SAAAR,GAAO,OAAAS,EAAA9T,EAAAkD,cAAA,QAAMC,UAAWuQ,EAAa,OAAS,IAAKL,EAAI/Z,WAEzDya,EAAahW,EAAO,4CAA8C,GAExE,OACE+V,EAAA9T,EAAAkD,cAAC8Q,EAAA,GACCR,QAASA,EACTzV,KAAMuV,EAAWW,KACjBC,WAAY/c,KAAK4b,aACjBjQ,QAASA,EACTqR,QAAS,EACTJ,WAAYA,EACZK,YAAa,SAAArW,GAAQ,OA1C7B,SAAqBkW,EAAMV,GACzB,OAAOU,EAAK7a,IAAI,SAAAib,GAAS,OAAAtU,EAAAC,EAAEsU,UAAUf,EAAac,KAyCvBE,CAAYxW,EAAMwV,IACvCiB,eAAgB5Y,QAAQmC,MAIhC+U,EA3CA,CAAmC2B,EAAA,oJCb7BC,EAAc,sBACPC,GACXrN,KAAM,SACNG,GAAI,OAOC,SAASmN,EAAUtb,EAA+Bub,EAAeC,GACtE,QADuD,IAAAD,OAAA,QAAe,IAAAC,OAAA,GAClEC,EAAA/U,EAAOsJ,SAAShQ,GAClB,OAAIwb,EACKxb,EAAMsE,OAAO8W,GAEfpb,EAET,IAA0C,IAArCA,EAAiB0b,QAAQ,OAC5B,OAAO1b,EAET,IAAI8Y,EAAY9Y,EAMhB,OAJK2b,MAAM7C,KACTA,EAAO8C,SAAS9C,EAAM,MAExBA,EAAOyC,EAAQE,EAAA/U,EAAOmV,IAAI/C,GAAQ2C,IAAO3C,IAC7BxU,OAAO8W,GAgCrB,IAAAU,EAAA,SAAA/S,GAGE,SAAA+S,EAAY3S,GAAZ,IAAAvL,EACEmL,EAAAoB,KAAAtM,KAAMsL,IAAMtL,YAuFdD,EAAAme,iBAAmB,SAAAhR,GACjBnN,EAAK2M,UACHyR,QAASjR,EAAEmN,OAAOlY,SAItBpC,EAAAqe,eAAiB,SAAAlR,GACfnN,EAAK2M,UACH2R,MAAOnR,EAAEmN,OAAOlY,SAIpBpC,EAAAue,iBAAmB,WACT,IACJpd,EADIgP,EAAAnQ,EAAAuL,MAAA4E,aAERnQ,EAAK2M,SACH,SAAAH,GACQ,IAAAjM,EAAAP,EAAAwM,MAAE8R,EAAA/d,EAAA+d,MAAOF,EAAA7d,EAAA6d,QAMf,OALAjd,GACEiP,KAAMoO,EAAA,MAAeJ,GAAS,GAC9B7N,GAAIiO,EAAA,MAAeF,GAAO,KAI1B7S,QAAQ,EACRgT,YAHkBC,EAAA,EAA4Bvd,KAMlD,WACMgP,GACFA,EAAahP,MAMrBnB,EAAA2e,gBAAkB,WAAM,OAAA3e,EAAKyU,MAAM,IACnCzU,EAAA4e,kBAAoB,WAClB5e,EAAK2M,SAAS,SAAAH,GAAS,OACrBf,QAASe,EAAMf,WAGnBzL,EAAA6e,iBAAmB,WAAM,OAAA7e,EAAKyU,KAAK,IACnCzU,EAAA8e,mBAAqB,aACrB9e,EAAA+e,0BAA4B,SAAA5d,GAClB,IAAAgP,EAAAnQ,EAAAuL,MAAA4E,aACFsO,EAAcC,EAAA,EAA4Bvd,GAChDnB,EAAK2M,UAED2R,MAAOnd,EAAMoP,GACb6N,QAASjd,EAAMiP,KACf3E,QAAQ,EACRgT,YAAWA,GAEb,WACMtO,GACFA,EAAahP,MAUrBnB,EAAAgf,YAAc,SAAAxL,GACZxT,EAAKif,WAAazL,GAxJlBxT,EAAKwM,OACHf,OAAQF,EAAME,OACdkS,MAAOpS,EAAMoS,MACbc,YAAa,GACbL,QAAS,GACTE,MAAO,GACPpJ,aAAcuI,EACdyB,gBAAiB,MA6OvB,OA1PwC/e,EAAA,EAAA+d,EAAA/S,GAiB/B+S,EAAAiB,yBAAP,SAAgC5T,EAAOiB,GACrC,GAAIA,EAAM0I,cAAgB1I,EAAM0I,eAAiB3J,EAAMpK,MACrD,OAAOqL,EAGT,IAAM4D,EAAO7E,EAAMpK,MAAQoK,EAAMpK,MAAMiP,KAAOqN,EAAcrN,KACtDG,EAAKhF,EAAMpK,MAAQoK,EAAMpK,MAAMoP,GAAKkN,EAAclN,GAGlD6N,EAAUV,EAAUtN,EAAM7E,EAAMoS,OAAO,GACvCW,EAAQZ,EAAUnN,EAAIhF,EAAMoS,OAAO,GACnCxc,GACJiP,KAAMgO,EACN7N,GAAI+N,GAGN,OAAOne,EAAA,KACFqM,GACH4R,QAAOA,EACPE,MAAKA,EACLpJ,aAAc3J,EAAMpK,MACpBsd,YAAaC,EAAA,EAA4Bvd,MAI7C+c,EAAAxS,UAAA+I,KAAA,SAAK2K,EAAmBjY,GACd,IAOJkY,EAAQC,EAPJnP,EAAAlQ,KAAAsL,MAAA4E,aACF5P,EAAAN,KAAAuM,MAAE4R,EAAA7d,EAAA6d,QAASE,EAAA/d,EAAA+d,MACXlO,EAAOoO,EAAA,MAAeJ,GAAS,GAC/B7N,EAAKiO,EAAA,MAAeF,GAAO,GAC3BiB,EAAOpY,EAAW,EAAI,EACtBqY,GAAYjP,EAAGgC,UAAYnC,EAAKmC,WAAagN,GAGhC,IAAfH,GACFC,EAAS9O,EAAGgC,UAAYiN,EACxBF,EAAWlP,EAAKmC,UAAYiN,GACL,IAAdJ,GACTC,EAAS9O,EAAGgC,UAAYiN,EACxBF,EAAWlP,EAAKmC,UAAYiN,EACxBH,EAAS1X,KAAKD,OAAS6I,EAAK5I,KAAKD,QACnC2X,EAAS1X,KAAKD,MACd4X,EAAWlP,EAAKmC,aAGlB8M,EAAS9O,EAAGgC,UACZ+M,EAAWlP,EAAKmC,WAGlB,IAAMkN,GACJrP,KAAMyN,IAAOyB,GACb/O,GAAIsN,IAAOwB,IAGPK,GACJC,IAAKF,EACLrP,KAAMqP,EAAUrP,KAChBG,GAAIkP,EAAUlP,IAchB,OAXAtQ,KAAK0M,UAED8R,YAAaC,EAAA,EAA4Be,GACzCrB,QAASqB,EAAUrP,KAAK1J,OAAO8W,GAC/Bc,MAAOmB,EAAUlP,GAAG7J,OAAO8W,IAE7B,WACErN,EAAauP,EAAevY,KAIzBsY,GAiETvB,EAAAxS,UAAAkU,eAAA,WACE,OAAOlB,EAAA,KAAmCze,KAAKuM,MAAMiS,cAOvDP,EAAAxS,UAAAmU,eAAA,eAAA7f,EAAAC,KACQM,EAAAN,KAAAuM,MAAE4R,EAAA7d,EAAA6d,QAAS3S,EAAAlL,EAAAkL,OAAQ6S,EAAA/d,EAAA+d,MACzB,IAAK7S,EACH,OAAO,KAET,IAAMqU,EAAc7f,KAAK2f,iBACzB,OACE7T,EAAAjD,EAAAkD,cAAA,OAAK2J,IAAK1V,KAAK+e,YAAa/S,UAAU,0BACpCF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,eACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,uBACbF,EAAAjD,EAAAkD,cAAA,QAAMC,UAAU,sBAAoB,iBAEtCF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,oDACZzM,OAAOugB,KAAKD,GAAa5d,IAAI,SAAA8d,GAC5B,IAAMC,EAAQH,EAAYE,GAC1B,OACEjU,EAAAjD,EAAAkD,cAAA,MAAIyC,IAAKuR,GACNC,EAAM/d,IAAI,SAAAwR,GAAU,OACnB3H,EAAAjD,EAAAkD,cAAA,MAAIC,UAAWyH,EAAOwM,OAAS,SAAW,GAAIzR,IAAKiF,EAAOyM,SACxDpU,EAAAjD,EAAAkD,cAAA,KAAGE,QAAS,WAAM,OAAAlM,EAAK+e,0BAA0BrL,KAAUA,EAAOyM,iBAShFpU,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,eACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,uBACbF,EAAAjD,EAAAkD,cAAA,QAAMC,UAAU,sBAAoB,iBAEtCF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,oDACbF,EAAAjD,EAAAkD,cAAA,SAAOC,UAAU,SAAO,SACxBF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,wBACbF,EAAAjD,EAAAkD,cAAA,SACEtM,KAAK,OACLuM,UAAU,4CACV7J,MAAOgc,EACPvI,SAAU5V,KAAKke,qBAKrBpS,EAAAjD,EAAAkD,cAAA,SAAOC,UAAU,SAAO,OACxBF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,wBACbF,EAAAjD,EAAAkD,cAAA,SACEtM,KAAK,OACLuM,UAAU,0CACV7J,MAAOkc,EACPzI,SAAU5V,KAAKoe,mBAIrBtS,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,WACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,gCAAgCC,QAASjM,KAAKse,kBAAgB,cAU5FL,EAAAxS,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAuM,MAAEmR,EAAApd,EAAAod,MAAOc,EAAAle,EAAAke,YAAaS,EAAA3e,EAAA2e,gBAC5B,OACEnT,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,cACbF,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,yDAAyDC,QAASjM,KAAK0e,iBACvF5S,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,wBAEfF,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,0CAA0CC,QAASjM,KAAK2e,mBACxE7S,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,kBACbF,EAAAjD,EAAAkD,cAAA,QAAMC,UAAU,0BAA0BwS,GACzCd,EAAQ5R,EAAAjD,EAAAkD,cAAA,QAAMC,UAAU,qBAAmB,OAAc,KACzDiT,EAAkBnT,EAAAjD,EAAAkD,cAAA,QAAMC,UAAU,mCAAqCiT,GAA0B,MAEpGnT,EAAAjD,EAAAkD,cAAA,UAAQC,UAAU,0DAA0DC,QAASjM,KAAK4e,kBACxF9S,EAAAjD,EAAAkD,cAAA,KAAGC,UAAU,0BAGhBhM,KAAK4f,mBAId3B,EA1PA,CAAwC7R,EAAA,uICxDxC,SAAAlB,GAAA,SAAAiV,mDAWA,OAX+C/S,EAAA,EAAA+S,EAAAjV,GAC7CiV,EAAA1U,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEa,EAAA7L,EAAA6L,SAAUD,EAAA5L,EAAA4L,MAAOkU,EAAA9f,EAAA8f,YAEzB,OACE3S,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,WACZE,GAASuB,EAAA5E,EAAAkD,cAAA,SAAOC,UAAW,kBAAiBoU,EAAc,6BAA+B,KAAOlU,GACjGuB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAW,wBAAuBoU,EAAc,mCAAqC,KAAOjU,KAIzGgU,EAXA,CAA+CtS,EAAA,eAsBlCwS,EAAsC,SAAC/f,OAClD6L,EAAA7L,EAAA6L,SACAmU,EAAAhgB,EAAAggB,SACAtN,EAAA1S,EAAA0L,iBAAA,IAAAgH,EAAA,GAAAA,EACAC,EAAA3S,EAAA6B,aAAA,IAAA8Q,EAAA,KAAAA,EACAsN,EAAAjgB,EAAAigB,QACA3K,EAAAtV,EAAAsV,SASM4K,EAAe,OAAOxU,EAAS,KAAIsU,EAAW,SAAW,IACzDG,EACJhT,EAAA5E,EAAAkD,cAAA,UAAQC,UAAWwU,EAAcvU,QATd,SAAA+B,GACnBA,EAAM0S,kBACF9K,GACFA,EAASzT,KAOTsL,EAAA5E,EAAAkD,cAAA,YAAOI,IAIX,OAAIoU,EAEA9S,EAAA5E,EAAAkD,cAAC4U,EAAA,SAAQC,QAASL,EAASM,UAAU,UAClCJ,GAIEA,8BCxDX,SAASK,EAAiBC,GAChB,IAAAd,EAAAc,EAAAd,OAAQe,EAAAD,EAAAC,MAAOC,EAAAF,EAAAE,WAAY9e,EAAA4e,EAAA5e,MAC7B+e,EAAaC,KAAKC,MAAmB,IAAbH,GAAiB,IACzCI,GAAatgB,MAAOmgB,GACpBlV,EAAYuB,IAAW,kBAAoB+T,yBAA0BrB,IAE3E,OACExS,EAAA5E,EAAAkD,cAAA,OAAKC,UAAWA,GACdyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,yBACbyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,yBAAyB7J,GACxCsL,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,yBAAyBgV,GACxCvT,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,2BAA2BkV,IAE5CzT,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,uBACbyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,2BAA2BW,MAAO0U,MAMzD,IAUAE,EAAA,SAAArW,GAAA,SAAAsW,mDAqCA,OArCmCpU,EAAA,EAAAoU,EAAAtW,GACjCsW,EAAA/V,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEY,EAAA5L,EAAA4L,MAAOuV,EAAAnhB,EAAAmhB,SAAUC,EAAAphB,EAAAohB,MAAOvf,EAAA7B,EAAA6B,MAAOwf,EAAArhB,EAAAqhB,aACjCC,EAAUF,EAAMlc,MAAM,EAbR,GAchBqc,EAAYD,EAAQxZ,KAAK,SAAA8T,GAAO,OAAAA,EAAI/Z,QAAUA,IAC9C2f,EAAYJ,EAAMlc,MAfF,GAgBduc,GAAmBF,EAGrBE,IACFF,EAAYC,EAAU1Z,KAAK,SAAA8T,GAAO,OAAAA,EAAI/Z,QAAUA,IAChD2f,EAAYA,EAAUjR,OAAO,SAAAqL,GAAO,OAAAA,EAAI/Z,QAAUA,KAGpD,IAAM6f,EAAaF,EAAUG,OAAO,SAACC,EAAKhG,GAAQ,OAAAgG,EAAMhG,EAAI8E,OAAO,GAE7DmB,EADWP,EAAQK,OAAO,SAACC,EAAKhG,GAAQ,OAAAgG,EAAMhG,EAAI8E,OAAO,GACtCgB,EACnBI,EAAkBJ,EAAaG,EAErC,OACE1U,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,cACbyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,sBACbyB,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,qBACbE,OAASiW,SAAWV,2BAEvBhU,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,iCAAiCC,QAAS0V,KAE5DlU,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,oBACZ4V,EAAQ3f,IAAI,SAAAogB,GAAQ,OAAA5U,EAAA5E,EAAAkD,cAAC+U,EAAgB1T,EAAA,GAACoB,IAAK6T,EAAKlgB,OAAWkgB,GAAMpC,OAAQoC,EAAKlgB,QAAUA,OACxF4f,GAAmBF,GAAapU,EAAA5E,EAAAkD,cAAC+U,EAAgB1T,EAAA,GAACoB,IAAKqT,EAAU1f,OAAW0f,GAAW5B,QAAM,KAC7F+B,EAAa,GACZvU,EAAA5E,EAAAkD,cAAC+U,GAAiBtS,IAAI,aAAawS,MAAOgB,EAAY7f,MAAM,QAAQ8e,WAAYmB,OAM5FZ,EArCA,CAAmC3T,EAAA,eChBnCyU,EAAA,SAAApX,GAAA,SAAAqX,IAAA,IAAAxiB,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YACED,EAAAwM,OACEmV,MAAO,KACPc,WAAW,GAGbziB,EAAA4hB,aAAe,WACb5hB,EAAK2M,UAAW8V,WAAW,KAG7BziB,EAAAkN,aAAe,WACP,IAAA3M,EAAAP,EAAAuL,MAAE2B,EAAA3M,EAAA2M,aAAcf,EAAA5L,EAAA4L,MAAO/J,EAAA7B,EAAA6B,MACzB8K,GACFA,EAAaf,EAAO/J,IAIxBpC,EAAA0iB,aAAe,WACb1iB,EAAK2M,SAAS,SAAAH,GACZ,GAAIA,EAAMiW,UACR,OAASA,WAAW,EAAOd,MAAO,MAEpC,IAAMgB,EAAU3iB,EAAKuL,MAAMqX,UAE3B,OAASH,WAAW,EAAMd,MADZniB,OAAAqjB,EAAA,EAAArjB,CAAwBmjB,EAAS3iB,EAAKuL,MAAMY,aAgChE,OAvD8BkB,EAAA,EAAAmV,EAAArX,GA4B5BqX,EAAA9W,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEqX,EAAAriB,EAAAqiB,QAASzW,EAAA5L,EAAA4L,MAAO2W,EAAAviB,EAAAuiB,MAAO1gB,EAAA7B,EAAA6B,MACzB6Q,EAAAhT,KAAAuM,MAAEiW,EAAAxP,EAAAwP,UAAWd,EAAA1O,EAAA0O,MACbnB,EAAarU,EAAK,KAAK/J,EAC7B,OACEsL,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,cACdyB,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,oBAAoB2B,MAAO4S,GACxCpe,IAED0gB,GACApV,EAAA5E,EAAAkD,cAAA,QAAM4B,MAAM,mBAAmB1B,QAASjM,KAAKiN,aAAcjB,UAAU,wCAErE6W,GAASF,GAAWlV,EAAA5E,EAAAkD,cAAA,QAAME,QAASjM,KAAKyiB,aAAczW,UAAU,kCACjEwW,GACC/U,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,qBACdyB,EAAA5E,EAAAkD,cAACwV,GACCG,MAAOA,EACPD,SAAUkB,IAAUpgB,OACpB2J,MAAOA,EACP/J,MAAOA,EACPwf,aAAc3hB,KAAK2hB,kBAOjCY,EAvDA,CAA8B1U,EAAA,eCN9BiV,EAAA,SAAA5X,GAAA,SAAA6X,mDAOA,OAP+B3V,EAAA,EAAA2V,EAAA7X,GAC7B6X,EAAAtX,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MAAEqX,EAAAriB,EAAAqiB,QAASK,EAAA1iB,EAAA0iB,OAAQ/V,EAAA3M,EAAA2M,aAAc4V,EAAAviB,EAAAuiB,MACvC,OAAOtjB,OAAOugB,KAAKkD,GAAQ/gB,IAAI,SAAAuM,GAAO,OACpCf,EAAA5E,EAAAkD,cAACuW,GAAS9T,IAAKA,EAAKmU,QAASA,EAASzW,MAAOsC,EAAKrM,MAAO6gB,EAAOxU,GAAMqU,MAAOA,EAAO5V,aAAcA,OAGxG8V,EAPA,CAA+BlV,EAAA,0CCwC/BoV,EAAA,SAAA/X,GAAA,SAAAgY,IAAA,IAAAnjB,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YAGED,EAAAwM,OACE4W,WAAY,EACZC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,QAAQ,EACRC,YAAQ/N,EACRgO,yBACAC,gBAAgB,GAOlB3jB,EAAA4hB,aAAe,WACb5hB,EAAK2M,UAAWgX,gBAAgB,KAGlC3jB,EAAA4jB,iBAAmB,SAACC,GACV,IAAAjB,EAAA5iB,EAAAuL,MAAAqX,QACAa,EAAAzjB,EAAAwM,MAAAiX,OACFd,EAAUC,IAGVS,EAAaI,EAAOK,kBAAkBD,GACtCN,EAAaE,EAAOM,kBAAkBF,GACtCG,EAAUP,EAAOQ,aAAaZ,GAC9BC,EAAa9jB,OAAAqjB,EAAA,EAAArjB,CAAoBmjB,EAASqB,GAC1CZ,EAAaE,EAAWpB,OAAO,SAACC,EAAKG,GAAS,OAAAH,EAAMG,EAAKrB,OAAO,GAEtEjhB,EAAK2M,UAAWyW,WAAUA,EAAEC,WAAUA,EAAEC,WAAUA,EAAEC,WAAUA,EAAEI,gBAAgB,KAGlF3jB,EAAAkkB,mBAAqB,WAEnBlkB,EAAKmkB,kBAAoBC,WAAWpkB,EAAKqkB,aAAc,MAGzDrkB,EAAAskB,kBAAoB,WAClBC,aAAavkB,EAAKmkB,mBAClBnkB,EAAK2M,UAAW6W,QAAQ,KAG1BxjB,EAAAqkB,aAAe,WACb,IAAKrkB,EAAKwM,MAAMgX,OAAQ,CACd,IAAArH,EAAAnc,EAAAuL,MAAA4Q,IACFsH,EAASjkB,OAAAqjB,EAAA,EAAArjB,CAAU2c,EAAIqI,OAC7B,GAAIf,EAAQ,CAEV,IAAMC,EAAwBD,EAAOgB,UAAUzkB,EAAKuL,MAAM4Q,IAAIqI,OAC9DxkB,EAAK2M,UAAW+W,sBAAqBA,EAAEF,QAAQ,EAAMC,OAAMA,SAuFnE,OA7I4BpW,EAAA,EAAA8V,EAAAhY,GAc1BgY,EAAAzX,UAAAsG,qBAAA,WACEuS,aAAatkB,KAAKkkB,oBA4CpBhB,EAAAzX,UAAAC,OAAA,WACQ,IAAApL,EAAAN,KAAAsL,MACJqX,EAAAriB,EAAAqiB,QACA1K,EAAA3X,EAAA2X,uBACAhL,EAAA3M,EAAA2M,aACAiP,EAAA5b,EAAA4b,IACAuI,EAAAnkB,EAAAmkB,eACAC,EAAApkB,EAAAokB,WACAC,EAAArkB,EAAAqkB,cACAC,EAAAtkB,EAAAskB,QAEI5R,EAAAhT,KAAAuM,MACJ4W,EAAAnQ,EAAAmQ,WACAC,EAAApQ,EAAAoQ,WACAC,EAAArQ,EAAAqQ,WACAC,EAAAtQ,EAAAsQ,WACAC,EAAAvQ,EAAAuQ,OACAE,EAAAzQ,EAAAyQ,sBACAC,EAAA1Q,EAAA0Q,eAEImB,EAAoB5M,IAA2B6M,EAAAjc,EAAEkc,QAAQ9M,EAAwBiE,EAAI8I,aACrFC,EAAaJ,EAAoB5M,EAAyBiE,EAAI8I,YAC9DE,EAAmBD,GAAcA,EAAW1iB,OAAS,EACrD4iB,EAAqB5X,IAAW,6BACpC6X,qCAAsCP,IAExC,OACEpX,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,YACZyY,GACChX,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,wBAAwBkQ,EAAImJ,WAAa,EAAOnJ,EAAImJ,WAAa,EAAC,IAAM,MAEzF5X,EAAA5E,EAAAkD,cAAA,OAAKC,UAAWkQ,EAAIoJ,SAAW,oCAAoCpJ,EAAIoJ,SAAa,KACnFV,GACCnX,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,iBAAiB2B,MAAO,UAAUuO,EAAIqJ,UAAS,KAAKrJ,EAAIsJ,YAAW,KAC/EtJ,EAAIuJ,WAGRd,GACClX,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,iBAAiB2B,MAAUuO,EAAIuJ,UAAS,KAAKvJ,EAAIsJ,YAAW,KACxEtJ,EAAIqJ,WAGRb,GACCjX,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,oBACbyB,EAAA5E,EAAAkD,cAAC+W,GAAUH,QAASA,EAASK,OAAQ9G,EAAIwJ,aAAczY,aAAcA,KAGzEQ,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,oBAAoB2Z,aAAc3lB,KAAKikB,mBAAoB2B,aAAc5lB,KAAKqkB,mBAC1Fd,GACC9V,EAAA5E,EAAAkD,cAAC8Z,EAAAhd,GACCid,YAAU,EACVC,aA9HS,SAAA9Z,GAAW,gBAAAX,GAChC,OACEmC,EAAA5E,EAAAkD,cAAA,QAAMC,UAAWV,EAAMU,UAAWW,MAAOrB,EAAMqB,OAC5CrB,EAAMa,SACPsB,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,+CAA+CC,QAAS,WAAM,OAAAA,EAAQX,EAAMa,eA0HtE6Z,CAAehmB,KAAK2jB,kBAClCsC,gBAAiB/J,EAAIqI,MACrBS,YAAavB,EACb0B,mBAAmB,+BAGrB5B,GACA2B,GACEzX,EAAA5E,EAAAkD,cAAC8Z,EAAAhd,GACCod,gBAAiB/J,EAAIqI,MACrBS,YAAaC,EACbiB,WAAYC,EAAA,EACZhB,mBAAoBA,KAGxB5B,IAAW2B,GAAoBhJ,EAAIqI,MACpCb,GACCjW,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,mBACbyB,EAAA5E,EAAAkD,cAACwV,GACCG,MAAO2B,EACPnX,MAAOkX,EACPjhB,MAAOmhB,EACP3B,aAAc3hB,KAAK2hB,aACnBF,SAAU0B,QAQ1BD,EA7IA,CAA4BrV,EAAA,eC5BtBuY,GACJjZ,QACEkZ,OAAO,EACPC,MACE1X,MAAM,EACN2X,UAAW,IAKfC,OACEC,aAAc,IAuClB,IAAAC,EAAA,SAAAxb,GAAA,SAAAyb,IAAA,IAAA5mB,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YAIED,EAAAwM,OACEqa,MAAOhE,EAAA,EAAkBiE,KACzBC,WAAW,EACXC,gBAAiB,IAAIjX,IACrBkX,WAAW,EACXtC,WAAY,KACZC,eAAe,EACfC,SAAS,GA0BX7kB,EAAAknB,cAAgB,SAACL,GACf7mB,EAAK2M,SAAS,SAAAmF,GACZ,OAAIA,EAAU+U,QAAUA,GACbA,MAAOhE,EAAA,EAAkBiE,OAE3BD,MAAKA,MAIlB7mB,EAAAmnB,eAAiB,SAAClZ,GAChB,IAAMqM,EAASrM,EAAMqM,OACrBta,EAAK2M,UACHgY,WAAYrK,EAAO8M,WAIvBpnB,EAAAqnB,kBAAoB,SAACpZ,GACnB,IAAMqM,EAASrM,EAAMqM,OACrBta,EAAK2M,UACHiY,cAAetK,EAAO8M,WAI1BpnB,EAAAsnB,YAAc,SAACrZ,GACb,IAAMqM,EAASrM,EAAMqM,OACrBta,EAAK2M,UACHkY,QAASvK,EAAO8M,WAIpBpnB,EAAAunB,iBAAmB,SAACC,EAAkBC,GACpC,IAAMT,EAAiC,IAAIjX,IAAI2X,MAAMtX,KAAKqX,GAAiBvlB,IAAI,SAAAylB,GAAS,OAAA9E,EAAA,EAAS8E,MACjG3nB,EAAK2M,UAAWqa,gBAAeA,KAGjChnB,EAAA4nB,YAAc,SAAC3Z,GACbA,EAAM4Z,iBACN7nB,EAAKuL,MAAM8I,mBAGbrU,EAAA8nB,gBAAkB,SAAC7Z,GACjBA,EAAM4Z,iBACN7nB,EAAKuL,MAAMqI,oBAwJf,OAvOkCvG,EAAA,EAAAuZ,EAAAzb,GAchCyb,EAAAlb,UAAA8F,kBAAA,eAAAxR,EAAAC,KAEE,GAAIA,KAAKuM,MAAMua,UAAW,CAChB,IAAAlgB,EAAA5G,KAAAsL,MAAA1E,KACF6a,EAAW7a,GAAQA,EAAKkW,KAAOlW,EAAKkW,KAAKva,OAAS,EAElDulB,EAAYrG,GAAYsG,IAC9B/nB,KAAKgoB,eAAiB7D,WAAW,WAAM,OAAApkB,EAAK2M,UAAWoa,WAAW,EAAOE,UAASc,KAAKrG,KAI3FkF,EAAAlb,UAAAkG,mBAAA,SAAmBC,EAAWC,GAA9B,IAAA9R,EAAAC,MAEM6R,EAAUiV,WAAc9mB,KAAKuM,MAAMua,WAAc9mB,KAAKuM,MAAMya,YAC9DhnB,KAAKioB,eAAiB9D,WAAW,WAAM,OAAApkB,EAAK2M,UAAWsa,WAAW,KAAS,OAI/EL,EAAAlb,UAAAsG,qBAAA,WACEuS,aAAatkB,KAAKgoB,gBAClB1D,aAAatkB,KAAKioB,iBAgDpBtB,EAAAlb,UAAAC,OAAA,eAAA3L,EAAAC,KACQM,EAAAN,KAAAsL,MACJ1E,EAAAtG,EAAAsG,KACAxH,EAAAkB,EAAAlB,UACA6Y,EAAA3X,EAAA2X,uBACAjF,EAAA1S,EAAAqL,eAAA,IAAAqH,KACA/F,EAAA3M,EAAA2M,aACA/L,EAAAZ,EAAAY,MACAgG,EAAA5G,EAAA4G,SACA6Q,EAAAzX,EAAAyX,UAEI9E,EAAAjT,KAAAuM,MAAEqa,EAAA3T,EAAA2T,MAAOE,EAAA7T,EAAA6T,UAAWC,EAAA9T,EAAA8T,gBAAiBC,EAAA/T,EAAA+T,UAAWrC,EAAA1R,EAAA0R,cAAeC,EAAA3R,EAAA2R,QAC/DF,EAAA1kB,KAAAuM,MAAAmY,WACAwD,EAAUthB,GAAQA,EAAKkW,MAAQlW,EAAKkW,KAAKva,OAAS,EAClDkiB,EAAiBmC,IAAUhE,EAAA,EAAkBiE,KAG7CsB,EAAe5oB,OAAAqjB,EAAA,EAAArjB,CAAgBqH,EAAMmgB,GACrCqB,EAAc7oB,OAAAqjB,EAAA,EAAArjB,CAAa4oB,EAAcvB,GACzCyB,EAAaD,EAAYtL,KAAKmF,OAAO,SAACC,EAAKhG,GAAQ,OAAAgG,EAAMhG,EAAImJ,YAAY,GACzEhjB,EAAWuE,EAAKvE,KAAImD,QACtBohB,IAAUhE,EAAA,EAAkBiE,MAC9BxkB,EAAKimB,MACHpc,MAAO,cACP/J,MAAOkmB,EACPE,KAAM3F,EAAA,EAAa4F,SAKvB,IAAMC,EAAgBL,EAAYtL,KAC5B4L,EAAYD,EAAcjjB,MAAM,EArKpB,KAsKZmjB,EAAWF,EAAcjjB,MAtKb,KAyKC,OAAfkf,IAEAA,GADEwD,GACWthB,EAAKkW,KAAKhG,KAAK,SAAAoF,GAAO,OAAA4I,EAAAjc,EAAEC,KAAKoT,EAAIwJ,cAAgB,KAMlE,IAAMkD,EAAW7Q,EAAY,YAAY8Q,EAAA,EAA4B9Q,GAAe,cAG9E4K,EAAU,WAAM,OAAA8F,GAEtB,OACEhb,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,cACbyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,oBACbyB,EAAA5E,EAAAkD,cAAC6D,EAAA,GACChJ,KAAMA,EAAKuG,OACXrM,OAAO,QACPI,MAAOA,EACP6C,GAAI,sBAAsB3E,EAC1B8Q,aAAclQ,KAAKsL,MAAM4E,aACzBjC,eAAgBjO,KAAKsnB,iBACrB1U,YAAawT,KAGjB3Y,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,sBACbyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,uBACbyB,EAAA5E,EAAAkD,cAAC+c,EAAA,GAAO5c,MAAM,YAAYib,QAASvC,EAAShP,SAAU5V,KAAKqnB,YAAajH,aAAW,IACnF3S,EAAA5E,EAAAkD,cAAC+c,EAAA,GAAO5c,MAAM,aAAaib,QAASxC,EAAe/O,SAAU5V,KAAKonB,kBAAmBhH,aAAW,IAChG3S,EAAA5E,EAAAkD,cAAC+c,EAAA,GAAO5c,MAAM,SAASib,QAASzC,EAAY9O,SAAU5V,KAAKknB,eAAgB9G,aAAW,IACtF3S,EAAA5E,EAAAkD,cAACgd,GAAkB7c,MAAM,QAAQkU,aAAa,GAC3C7gB,OAAOugB,KAAK8C,EAAA,GAAmB3gB,IAAI,SAAC+mB,EAAWpjB,GAAM,OACpD6H,EAAA5E,EAAAkD,cAACsU,GACC7R,IAAK5I,EACLzD,MAAO6mB,EACPpT,SAAU7V,EAAKknB,cACf3G,SAAUsG,IAAUoC,EACpBzI,QAASqC,EAAA,EAAqBoG,IAE7BA,QAOVd,GACC7lB,GACEoL,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,mBACZ3J,EAAKJ,IAAI,SAAA4U,GAAQ,OAChBpJ,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,wBAAwBwC,IAAKqI,EAAK3K,OAC/CuB,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,0BAA0B6K,EAAK3K,WAC/CuB,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,0BA7MlC,SAAwB7J,EAAYomB,GAClC,OAAIA,IAAS3F,EAAA,EAAaqG,UAEtBxb,EAAA5E,EAAAkD,cAAA,QAAMC,UAAU,0BACdyB,EAAA5E,EAAAkD,cAAC+W,GAAUE,OAAQ7gB,EAAO0gB,OAAK,KAI9B1gB,EAqMmD+mB,CAAerS,EAAK1U,MAAO0U,EAAK0R,WAMpF9a,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,aACZkc,IACApB,GACC4B,EAAUzmB,IAAI,SAAAia,GAAO,OACnBzO,EAAA5E,EAAAkD,cAACkX,GACCzU,IAAK0N,EAAI1N,IAAM0N,EAAImJ,WACnB1C,QAASA,EACT1K,uBAAwBA,EACxBiE,IAAKA,EACLuI,eAAgBA,EAChBC,WAAYA,EACZC,cAAeA,EACfC,QAASA,EACT3X,aAAcA,MAGnBib,IACEpB,GACDE,GACA2B,EAAS1mB,IAAI,SAAAia,GAAO,OAClBzO,EAAA5E,EAAAkD,cAACkX,GACCzU,IAAK0N,EAAI1N,IAAM0N,EAAImJ,WACnB1C,QAASA,EACTzG,IAAKA,EACLuI,eAAgBA,EAChBC,WAAYA,EACZC,cAAeA,EACfC,QAASA,EACT3X,aAAcA,MAGnBib,GAAWpB,GAAarZ,EAAA5E,EAAAkD,cAAA,yBAAiBqc,EAAYtL,KAAKva,qBAE3DoJ,IACCuc,IACAhhB,GACCuG,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,sCAEbyB,EAAA5E,EAAAkD,cAAA,KAAGC,UAAU,OAAOC,QAASjM,KAAK2nB,aAAW,wBAMlDzgB,GACCuG,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,qBACbyB,EAAA5E,EAAAkD,cAAA,YAAO6c,GACPnb,EAAA5E,EAAAkD,cAAA,KAAGC,UAAU,OAAOC,QAASjM,KAAK6nB,iBAAe,gBAQ7DlB,EAvOA,CAAkC9Y,EAAA,qFCtElC,SAAA3C,GAAA,SAAAie,IAAA,IAAAppB,EAAA,OAAAmL,KAAAC,MAAAnL,KAAAoL,YAAApL,YAIED,EAAAwM,OACE6c,QAAS,GAQXrpB,EAAAspB,KAAO,WACL,IACMD,EADQ1hB,KAAKD,MACK1H,EAAKupB,OAC7BvpB,EAAK2M,UAAW0c,QAAOA,OAyB3B,OAzCyChc,EAAA,EAAA+b,EAAAje,GAQvCie,EAAA1d,UAAA8d,MAAA,WACEvpB,KAAKspB,OAAS5hB,KAAKD,MACnBzH,KAAKwpB,MAAQC,OAAOC,YAAY1pB,KAAKqpB,KAZxB,MAqBfF,EAAA1d,UAAAke,0BAAA,SAA0BC,GACpBA,EAAU3O,KACZ4O,cAAc7pB,KAAKwpB,OACVxpB,KAAKsL,MAAM2P,MACpBjb,KAAKupB,SAITJ,EAAA1d,UAAA8F,kBAAA,WACEvR,KAAKupB,SAGPJ,EAAA1d,UAAAsG,qBAAA,WACE8X,cAAc7pB,KAAKwpB,QAGrBL,EAAA1d,UAAAC,OAAA,WACU,IAAA0d,EAAAppB,KAAAuM,MAAA6c,QACF9oB,EAAAN,KAAAsL,MAAEU,EAAA1L,EAAA0L,UACF7J,GADa7B,EAAA2a,MACImO,GAAW,IAClC,OAAO3b,EAAA5E,EAAAkD,cAAA,QAAMC,UAAW,gBAAgBA,GAAc7J,EAAM2nB,QAAQ,SAExEX,EAzCA,CAAyCtb,EAAA,eCSzC,IAAAkc,EAAA,SAAA7e,GAAA,SAAA8e,mDAaA,OAbyC5c,EAAA,EAAA4c,EAAA9e,GACvC8e,EAAAve,UAAAC,OAAA,WACU,IAAApE,EAAAtH,KAAAsL,MAAAhE,YACF0E,EAAY1E,EAAYmB,KAAO,oBAAsB,+CAC3D,OACEgF,EAAA5E,EAAAkD,cAAA,OAAKC,UAAWA,GACdyB,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,2BAA2B1E,EAAYR,gBACtD2G,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,+BACZ1E,EAAYmB,KAhBvB,SAAuBtG,GACrB,OAAWA,EAAQ,KAAM2nB,QAAQ,GAAE,IAePG,CAAc3iB,EAAYQ,SAAW2F,EAAA5E,EAAAkD,cAACme,EAAW,SAK/EF,EAbA,CAAyCnc,EAAA,eAmBzCsc,EAAA,SAAAjf,GAAA,SAAAkf,mDAWA,OAXoDhd,EAAA,EAAAgd,EAAAlf,GAClDkf,EAAA3e,UAAAC,OAAA,WACU,IAAAsN,EAAAhZ,KAAAsL,MAAA0N,aACR,OACEvL,EAAA5E,EAAAkD,cAAA,OAAKC,UAAU,sBACZgN,EAAa/W,IAAI,SAACgX,EAAGrT,GAAM,OAC1B6H,EAAA5E,EAAAkD,cAACge,GAA2Bvb,IAAQyK,EAAE5R,SAAQ,IAAI4R,EAAEnS,WAAcQ,YAAa2R,QAKzFmR,EAXA,CAAoDvc,EAAA,mNCZpDwc,EAAA,SAAAnf,GAIE,SAAAmf,EAAY/e,GAAZ,IAAAvL,EACEmL,EAAAoB,KAAAtM,KAAMsL,IAAMtL,KACZD,EAAKwK,aACC,IAAAjK,EAAAgL,EAAAf,UAAEL,EAAA5J,EAAA4J,KAAMG,EAAA/J,EAAA+J,aACViB,EAAMf,UAAUL,OAClBnK,EAAKwK,UAAUN,UAAY1K,OAAA+qB,EAAA,EAAA/qB,CAAc2K,IAEvCoB,EAAMf,UAAUF,QAClBtK,EAAKwK,UAAUggB,WAAahrB,OAAA+qB,EAAA,EAAA/qB,CAAc8K,GAC1CtK,EAAKyqB,cAAe,KA2B1B,OAxC6BtqB,EAAA,EAAAmqB,EAAAnf,GAiB3Bmf,EAAA5e,UAAA8F,kBAAA,WACMvR,KAAKwqB,cACPxqB,KAAKsL,MAAM1I,0BAIfynB,EAAA5e,UAAAC,OAAA,WACU,IAAApB,EAAAtK,KAAAsL,MAAAhB,MACFhK,EAAAN,KAAAuK,UAAEN,EAAA3J,EAAA2J,UAAWsgB,EAAAjqB,EAAAiqB,WAEnB,OACEze,EAAAjD,EAAAkD,cAAA,OAAKC,UAAU,mBACbF,EAAAjD,EAAAkD,cAACmK,EAAA,EAAa,KACZpK,EAAAjD,EAAAkD,cAAC0e,EAAA,GAAQrrB,UAAWsrB,EAAA,EAAUxgB,KAAM4K,SAAU7K,KAE/CK,GACCwB,EAAAjD,EAAAkD,cAACmK,EAAA,EAAa,KACZpK,EAAAjD,EAAAkD,cAAC0e,EAAA,GAAQrrB,UAAWsrB,EAAA,EAAUrgB,MAAOyK,SAAUyV,OAM3DF,EAxCA,CAA6Bje,EAAA,WAgDvBoK,GACJ5T,uBAAsBgX,EAAA,EACtB+Q,eAAcjgB,EAAA,GAGDyI,EAAA,QAAA5T,OAAAmX,EAAA,IAAAnX,CAAIoX,EAAJ,CAAYpX,OAAAqX,EAAA,EAAArX,CAXH,SAACgN,GACvB,IAAMhC,EAAYgC,EAAMqe,SAAStrB,MAEjC,OAASgL,MADDiC,EAAArH,QAAAoF,MACQC,UAASA,IAQyBiM,EAAzBjX,CAA6C8qB","file":"explore.7c6aca289434de1f5df9.js","sourcesContent":["// Libraries\nimport _ from 'lodash';\nimport { ThunkAction } from 'redux-thunk';\n\n// Services & Utils\nimport store from 'app/core/store';\nimport {\n  LAST_USED_DATASOURCE_KEY,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  hasNonEmptyQuery,\n  makeTimeSeriesList,\n  updateHistory,\n  buildQueryTransaction,\n  serializeStateToUrlParam,\n} from 'app/core/utils/explore';\n\n// Actions\nimport { updateLocation } from 'app/core/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { DataQuery, DataSourceSelectItem, QueryHint  } from '@grafana/ui/src/types';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport {\n  ExploreId,\n  ExploreUrlState,\n  RangeScanner,\n  ResultType,\n  QueryOptions,\n  QueryTransaction,\n} from 'app/types/explore';\n\nimport { Emitter } from 'app/core/core';\nimport { RawTimeRange, TimeRange, DataSourceApi } from '@grafana/ui';\nimport {\n  Action as ThunkableAction,\n  ActionTypes,\n  AddQueryRowAction,\n  ChangeSizeAction,\n  HighlightLogsExpressionAction,\n  LoadDatasourceFailureAction,\n  LoadDatasourceMissingAction,\n  LoadDatasourcePendingAction,\n  LoadDatasourceSuccessAction,\n  QueryTransactionStartAction,\n  ScanStopAction,\n} from './actionTypes';\n\n\ntype ThunkResult<R> = ThunkAction<R, StoreState, undefined, ThunkableAction>;\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): AddQueryRowAction {\n  const query = generateEmptyQuery(index + 1);\n  return { type: ActionTypes.AddQueryRow, payload: { exploreId, index, query } };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async dispatch => {\n    const instance = await getDatasourceSrv().get(datasource);\n    dispatch(loadDatasource(exploreId, instance));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return dispatch => {\n    // Null query means reset\n    if (query === null) {\n      query = { ...generateEmptyQuery(index) };\n    }\n\n    dispatch({ type: ActionTypes.ChangeQuery, payload: { exploreId, query, index, override } });\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ChangeSizeAction {\n  return { type: ActionTypes.ChangeSize, payload: { exploreId, height, width } };\n}\n\n/**\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\n */\nexport function changeTime(exploreId: ExploreId, range: TimeRange): ThunkResult<void> {\n  return dispatch => {\n    dispatch({ type: ActionTypes.ChangeTime, payload: { exploreId, range } });\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStop(exploreId));\n    dispatch({ type: ActionTypes.ClearQueries, payload: { exploreId } });\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Highlight expressions in the log results\n */\nexport function highlightLogsExpression(exploreId: ExploreId, expressions: string[]): HighlightLogsExpressionAction {\n  return { type: ActionTypes.HighlightLogsExpression, payload: { exploreId, expressions } };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasource: string,\n  queries: DataQuery[],\n  range: RawTimeRange,\n  containerWidth: number,\n  eventBridge: Emitter\n): ThunkResult<void> {\n  return async dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map(ds => ({\n        value: ds.name,\n        name: ds.name,\n        meta: ds.meta,\n      }));\n\n    dispatch({\n      type: ActionTypes.InitializeExplore,\n      payload: {\n        exploreId,\n        containerWidth,\n        datasource,\n        eventBridge,\n        exploreDatasources,\n        queries,\n        range,\n      },\n    });\n\n    if (exploreDatasources.length >= 1) {\n      let instance;\n      if (datasource) {\n        try {\n          instance = await getDatasourceSrv().get(datasource);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      // Checking on instance here because requested datasource could be deleted already\n      if (!instance) {\n        instance = await getDatasourceSrv().get();\n      }\n      dispatch(loadDatasource(exploreId, instance));\n    } else {\n      dispatch(loadDatasourceMissing(exploreId));\n    }\n  };\n}\n\n/**\n * Initialize the wrapper split state\n */\nexport function initializeExploreSplit() {\n  return async dispatch => {\n    dispatch({ type: ActionTypes.InitializeExploreSplit });\n  };\n}\n\n/**\n * Display an error that happened during the selection of a datasource\n */\nexport const loadDatasourceFailure = (exploreId: ExploreId, error: string): LoadDatasourceFailureAction => ({\n  type: ActionTypes.LoadDatasourceFailure,\n  payload: {\n    exploreId,\n    error,\n  },\n});\n\n/**\n * Display an error when no datasources have been configured\n */\nexport const loadDatasourceMissing = (exploreId: ExploreId): LoadDatasourceMissingAction => ({\n  type: ActionTypes.LoadDatasourceMissing,\n  payload: { exploreId },\n});\n\n/**\n * Start the async process of loading a datasource to display a loading indicator\n */\nexport const loadDatasourcePending = (exploreId: ExploreId, datasourceName: string): LoadDatasourcePendingAction => ({\n  type: ActionTypes.LoadDatasourcePending,\n  payload: {\n    exploreId,\n    datasourceName,\n  },\n});\n\n/**\n * Datasource loading was successfully completed. The instance is stored in the state as well in case we need to\n * run datasource-specific code. Existing queries are imported to the new datasource if an importer exists,\n * e.g., Prometheus -> Loki queries.\n */\nexport const loadDatasourceSuccess = (\n  exploreId: ExploreId,\n  instance: any,\n  queries: DataQuery[]\n): LoadDatasourceSuccessAction => {\n  // Capabilities\n  const supportsGraph = instance.meta.metrics;\n  const supportsLogs = instance.meta.logs;\n  const supportsTable = instance.meta.tables;\n  // Custom components\n  const StartPage = instance.pluginExports.ExploreStartPage;\n\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\n\n  return {\n    type: ActionTypes.LoadDatasourceSuccess,\n    payload: {\n      exploreId,\n      StartPage,\n      datasourceInstance: instance,\n      history,\n      initialDatasource: instance.name,\n      initialQueries: queries,\n      showingStartPage: Boolean(StartPage),\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n    },\n  };\n};\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePending(exploreId, datasourceName));\n\n    let datasourceError = null;\n    try {\n      const testResult = await instance.testDatasource();\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\n    } catch (error) {\n      datasourceError = (error && error.statusText) || 'Network error';\n    }\n\n    if (datasourceError) {\n      dispatch(loadDatasourceFailure(exploreId, datasourceError));\n      return;\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    if (instance.init) {\n      instance.init();\n    }\n\n    // Check if queries can be imported from previously selected datasource\n    const queries = getState().explore[exploreId].modifiedQueries;\n    let importedQueries = queries;\n    const origin = getState().explore[exploreId].datasourceInstance;\n    if (origin) {\n      if (origin.meta.id === instance.meta.id) {\n        // Keep same queries if same type of datasource\n        importedQueries = [...queries];\n      } else if (instance.importQueries) {\n        // Datasource-specific importers\n        importedQueries = await instance.importQueries(queries, origin.meta);\n      } else {\n        // Default is blank queries\n        importedQueries = ensureQueries();\n      }\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    // Reset edit state with new queries\n    const nextQueries = importedQueries.map((q, i) => ({\n      ...importedQueries[i],\n      ...generateEmptyQuery(i),\n    }));\n\n    dispatch(loadDatasourceSuccess(exploreId, instance, nextQueries));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: any,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch({ type: ActionTypes.ModifyQueries, payload: { exploreId, modification, index, modifier } });\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Mark a query transaction as failed with an error extracted from the query response.\n * The transaction will be marked as `done`.\n */\nexport function queryTransactionFailure(\n  exploreId: ExploreId,\n  transactionId: string,\n  response: any,\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\n      // Navigated away, queries did not matter\n      return;\n    }\n\n    // Transaction might have been discarded\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\n      return;\n    }\n\n    console.error(response);\n\n    let error: string;\n    let errorDetails: string;\n    if (response.data) {\n      if (typeof response.data === 'string') {\n        error = response.data;\n      } else if (response.data.error) {\n        error = response.data.error;\n        if (response.data.response) {\n          errorDetails = response.data.response;\n        }\n      } else {\n        throw new Error('Could not handle error response');\n      }\n    } else if (response.message) {\n      error = response.message;\n    } else if (typeof response === 'string') {\n      error = response;\n    } else {\n      error = 'Unknown error during query transaction. Please check JS console logs.';\n    }\n\n    // Mark transactions as complete\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          error,\n          errorDetails,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    dispatch({\n      type: ActionTypes.QueryTransactionFailure,\n      payload: { exploreId, queryTransactions: nextQueryTransactions },\n    });\n  };\n}\n\n/**\n * Start a query transaction for the given result type.\n * @param exploreId Explore area\n * @param transaction Query options and `done` status.\n * @param resultType Associate the transaction with a result viewer, e.g., Graph\n * @param rowIndex Index is used to associate latency for this transaction with a query row\n */\nexport function queryTransactionStart(\n  exploreId: ExploreId,\n  transaction: QueryTransaction,\n  resultType: ResultType,\n  rowIndex: number\n): QueryTransactionStartAction {\n  return { type: ActionTypes.QueryTransactionStart, payload: { exploreId, resultType, rowIndex, transaction } };\n}\n\n/**\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\n * If the transaction was started by a scanner, it keeps on scanning for more results.\n * Side-effect: the query is stored in localStorage.\n * @param exploreId Explore area\n * @param transactionId ID\n * @param result Response from `datasourceInstance.query()`\n * @param latency Duration between request and response\n * @param queries Queries from all query rows\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\n */\nexport function queryTransactionSuccess(\n  exploreId: ExploreId,\n  transactionId: string,\n  result: any,\n  latency: number,\n  queries: DataQuery[],\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\n\n    // If datasource already changed, results do not matter\n    if (datasourceInstance.meta.id !== datasourceId) {\n      return;\n    }\n\n    // Transaction might have been discarded\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\n    if (!transaction) {\n      return;\n    }\n\n    // Get query hints\n    let hints: QueryHint[];\n    if (datasourceInstance.getQueryHints) {\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\n    }\n\n    // Mark transactions as complete and attach result\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          hints,\n          latency,\n          result,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    // Side-effect: Saving history in localstorage\n    const nextHistory = updateHistory(history, datasourceId, queries);\n\n    dispatch({\n      type: ActionTypes.QueryTransactionSuccess,\n      payload: {\n        exploreId,\n        history: nextHistory,\n        queryTransactions: nextQueryTransactions,\n      },\n    });\n\n    // Keep scanning for results if this was the last scanning transaction\n    if (scanning) {\n      if (_.size(result) === 0) {\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\n        if (!other) {\n          const range = scanner();\n          dispatch({ type: ActionTypes.ScanRange, payload: { exploreId, range } });\n        }\n      } else {\n        // We can stop scanning if we have a result\n        dispatch(scanStop(exploreId));\n      }\n    }\n  };\n}\n\n/**\n * Remove query row of the given index, as well as associated query results.\n */\nexport function removeQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return dispatch => {\n    dispatch({ type: ActionTypes.RemoveQueryRow, payload: { exploreId, index } });\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId) {\n  return (dispatch, getState) => {\n    const {\n      datasourceInstance,\n      modifiedQueries,\n      showingLogs,\n      showingGraph,\n      showingTable,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n    } = getState().explore[exploreId];\n\n    if (!hasNonEmptyQuery(modifiedQueries)) {\n      dispatch({ type: ActionTypes.RunQueriesEmpty, payload: { exploreId } });\n      return;\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const interval = datasourceInstance.interval;\n\n    // Keep table queries first since they need to return quickly\n    if (showingTable && supportsTable) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Table',\n          {\n            interval,\n            format: 'table',\n            instant: true,\n            valueWithRefId: true,\n          },\n          data => data[0]\n        )\n      );\n    }\n    if (showingGraph && supportsGraph) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Graph',\n          {\n            interval,\n            format: 'time_series',\n            instant: false,\n          },\n          makeTimeSeriesList\n        )\n      );\n    }\n    if (showingLogs && supportsLogs) {\n      dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }));\n    }\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Helper action to build a query transaction object and handing the query to the datasource.\n * @param exploreId Explore area\n * @param resultType Result viewer that will be associated with this query result\n * @param queryOptions Query options as required by the datasource's `query()` function.\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\n */\nfunction runQueriesForType(\n  exploreId: ExploreId,\n  resultType: ResultType,\n  queryOptions: QueryOptions,\n  resultGetter?: any\n) {\n  return async (dispatch, getState) => {\n    const {\n      datasourceInstance,\n      eventBridge,\n      modifiedQueries: queries,\n      queryIntervals,\n      range,\n      scanning,\n    } = getState().explore[exploreId];\n    const datasourceId = datasourceInstance.meta.id;\n\n    // Run all queries concurrently\n    queries.forEach(async (query, rowIndex) => {\n      const transaction = buildQueryTransaction(\n        query,\n        rowIndex,\n        resultType,\n        queryOptions,\n        range,\n        queryIntervals,\n        scanning\n      );\n      dispatch(queryTransactionStart(exploreId, transaction, resultType, rowIndex));\n      try {\n        const now = Date.now();\n        const res = await datasourceInstance.query(transaction.options);\n        eventBridge.emit('data-received', res.data || []);\n        const latency = Date.now() - now;\n        const results = resultGetter ? resultGetter(res.data) : res.data;\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\n      } catch (response) {\n        eventBridge.emit('data-error', response);\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\n      }\n    });\n  };\n}\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\n  return dispatch => {\n    // Register the scanner\n    dispatch({ type: ActionTypes.ScanStart, payload: { exploreId, scanner } });\n    // Scanning must trigger query run, and return the new range\n    const range = scanner();\n    // Set the new range to be displayed\n    dispatch({ type: ActionTypes.ScanRange, payload: { exploreId, range } });\n  };\n}\n\n/**\n * Stop any scanning for more results.\n */\nexport function scanStop(exploreId: ExploreId): ScanStopAction {\n  return { type: ActionTypes.ScanStop, payload: { exploreId } };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return dispatch => {\n    // Inject react keys into query objects\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery() }));\n    dispatch({\n      type: ActionTypes.SetQueries,\n      payload: {\n        exploreId,\n        queries,\n      },\n    });\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(): ThunkResult<void> {\n  return dispatch => {\n    dispatch({ type: ActionTypes.SplitClose });\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore.left;\n    const itemState = {\n      ...leftState,\n      queryTransactions: [],\n      initialQueries: leftState.modifiedQueries.slice(),\n    };\n    dispatch({ type: ActionTypes.SplitOpen, payload: { itemState } });\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Saves Explore state to URL using the `left` and `right` parameters.\n * If split view is not active, `right` will not be set.\n */\nexport function stateSave() {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const urlStates: { [index: string]: string } = {};\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.modifiedQueries.map(clearQueryKeys),\n      range: left.range,\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.modifiedQueries.map(clearQueryKeys),\n        range: right.range,\n      };\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n    dispatch(updateLocation({ query: urlStates }));\n  };\n}\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport function toggleGraph(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    dispatch({ type: ActionTypes.ToggleGraph, payload: { exploreId } });\n    if (getState().explore[exploreId].showingGraph) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\n */\nexport function toggleLogs(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    dispatch({ type: ActionTypes.ToggleLogs, payload: { exploreId } });\n    if (getState().explore[exploreId].showingLogs) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport function toggleTable(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    dispatch({ type: ActionTypes.ToggleTable, payload: { exploreId } });\n    if (getState().explore[exploreId].showingTable) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n","import React, { PureComponent } from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  label: string;\n  loading?: boolean;\n  onToggle: (isOpen: boolean) => void;\n}\n\nexport default class Panel extends PureComponent<Props> {\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\n\n  render() {\n    const { isOpen, loading } = this.props;\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\n    return (\n      <div className=\"explore-panel panel-container\">\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\n          <div className=\"explore-panel__header-buttons\">\n            <span className={iconClass} />\n          </div>\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\n        </div>\n        {isOpen && (\n          <div className=\"explore-panel__body\">\n            <div className={loaderClass} />\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component<{}, any> {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div className=\"explore-container\">\n          <h3>An unexpected error happened.</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import React, { MouseEvent, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { TimeSeries } from 'app/core/core';\n\ninterface LegendProps {\n  data: TimeSeries[];\n  hiddenSeries: Set<string>;\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\n}\n\ninterface LegendItemProps {\n  hidden: boolean;\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\n  series: TimeSeries;\n}\n\nclass LegendItem extends PureComponent<LegendItemProps> {\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\n\n  render() {\n    const { hidden, series } = this.props;\n    const seriesClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n    });\n    return (\n      <div className={`graph-legend-series ${seriesClasses}`}>\n        <div className=\"graph-legend-icon\">\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\n        </div>\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\n          {series.alias}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default class Legend extends PureComponent<LegendProps> {\n  static defaultProps = {\n    onToggleSeries: () => {},\n  };\n\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\n    const { onToggleSeries } = this.props;\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\n    onToggleSeries(series, !exclusive);\n  };\n\n  render() {\n    const { data, hiddenSeries } = this.props;\n    const items = data || [];\n    return (\n      <div className=\"graph-legend ps\">\n        {items.map((series, i) => (\n          <LegendItem\n            hidden={hiddenSeries.has(series.alias)}\n            // Workaround to resolve conflicts since series visibility tracks the alias property\n            key={`${series.id}-${i}`}\n            onClickLabel={this.onClickLabel}\n            series={series}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport { withSize } from 'react-sizeme';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.stack';\n\nimport { RawTimeRange } from '@grafana/ui';\nimport * as dateMath from 'app/core/utils/datemath';\nimport TimeSeries from 'app/core/time_series2';\n\nimport Legend from './Legend';\nimport { equal, intersect } from './utils/set';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  selection: {\n    mode: 'x',\n    color: '#666',\n  },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\ninterface GraphProps {\n  data: any[];\n  height?: string; // e.g., '200px'\n  id?: string;\n  range: RawTimeRange;\n  split?: boolean;\n  size?: { width: number; height: number };\n  userOptions?: any;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\n}\n\ninterface GraphState {\n  /**\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\n   * Consequently, all series sharing the same alias will share visibility state.\n   */\n  hiddenSeries: Set<string>;\n  showAllTimeSeries: boolean;\n}\n\nexport class Graph extends PureComponent<GraphProps, GraphState> {\n  $el: any;\n  dynamicOptions = null;\n\n  state = {\n    hiddenSeries: new Set(),\n    showAllTimeSeries: false,\n  };\n\n  getGraphData() {\n    const { data } = this.props;\n\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }\n\n  componentDidMount() {\n    this.draw();\n    this.$el = $(`#${this.props.id}`);\n    this.$el.bind('plotselected', this.onPlotSelected);\n  }\n\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.range !== this.props.range ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height ||\n      (prevProps.size && prevProps.size.width !== this.props.size.width) ||\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\n    ) {\n      this.draw();\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.unbind('plotselected', this.onPlotSelected);\n  }\n\n  onPlotSelected = (event, ranges) => {\n    if (this.props.onChangeTime) {\n      const range = {\n        from: moment(ranges.xaxis.from),\n        to: moment(ranges.xaxis.to),\n      };\n      this.props.onChangeTime(range);\n    }\n  };\n\n  getDynamicOptions() {\n    const { range, size } = this.props;\n    const ticks = (size.width || 0) / 100;\n    let { from, to } = range;\n    if (!moment.isMoment(from)) {\n      from = dateMath.parse(from, false);\n    }\n    if (!moment.isMoment(to)) {\n      to = dateMath.parse(to, true);\n    }\n    const min = from.valueOf();\n    const max = to.valueOf();\n    return {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timezone: 'browser',\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n  }\n\n  onShowAllTimeSeries = () => {\n    this.setState(\n      {\n        showAllTimeSeries: true,\n      },\n      this.draw\n    );\n  };\n\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\n    this.setState((state, props) => {\n      const { data, onToggleSeries } = props;\n      const { hiddenSeries } = state;\n\n      // Deduplicate series as visibility tracks the alias property\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\n\n      let nextHiddenSeries = new Set();\n      if (exclusive) {\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\n        }\n      } else {\n        // Prune hidden series no longer part of those available from the most recent query\n        const availableSeries = new Set(data.map(d => d.alias));\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\n        if (nextHiddenSeries.has(series.alias)) {\n          nextHiddenSeries.delete(series.alias);\n        } else {\n          nextHiddenSeries.add(series.alias);\n        }\n      }\n      if (onToggleSeries) {\n        onToggleSeries(series.alias, nextHiddenSeries);\n      }\n      return {\n        hiddenSeries: nextHiddenSeries,\n      };\n    }, this.draw);\n  };\n\n  draw() {\n    const { userOptions = {} } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    const $el = $(`#${this.props.id}`);\n    let series = [{ data: [[0, 0]] }];\n\n    if (data && data.length > 0) {\n      series = data.filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias)).map((ts: TimeSeries) => ({\n        color: ts.color,\n        label: ts.label,\n        data: ts.getFlotPairs('null'),\n      }));\n    }\n\n    this.dynamicOptions = this.getDynamicOptions();\n\n    const options = {\n      ...FLOT_OPTIONS,\n      ...this.dynamicOptions,\n      ...userOptions,\n    };\n\n    $.plot($el, series, options);\n  }\n\n  render() {\n    const { height = '100px', id = 'graph' } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    return (\n      <>\n        {this.props.data &&\n          this.props.data.length > MAX_NUMBER_OF_TIME_SERIES &&\n          !this.state.showAllTimeSeries && (\n            <div className=\"time-series-disclaimer\">\n              <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\n              {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n              <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\n                this.props.data.length\n              }`}</span>\n            </div>\n          )}\n        <div id={id} className=\"explore-graph\" style={{ height }} />\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\n      </>\n    );\n  }\n}\n\nexport default withSize()(Graph);\n","/**\n * Performs a shallow comparison of two sets with the same item type.\n */\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n  const it = a.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return true;\n    }\n    if (!b.has(value)) {\n      return false;\n    }\n  }\n}\n\n/**\n * Returns a new set with items in both sets using shallow comparison.\n */\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const result = new Set<T>();\n  const it = b.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return result;\n    }\n    if (a.has(value)) {\n      result.add(value);\n    }\n  }\n}\n","// Libraries\nimport React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { AutoSizer } from 'react-virtualized';\n\n// Services & Utils\nimport store from 'app/core/store';\n\n// Components\nimport { DataSourceSelectItem } from '@grafana/ui/src/types';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { Alert } from './Error';\nimport ErrorBoundary from './ErrorBoundary';\nimport GraphContainer from './GraphContainer';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\nimport TimePicker, { parseTime } from './TimePicker';\n\n// Actions\nimport {\n  changeDatasource,\n  changeSize,\n  changeTime,\n  clearQueries,\n  initializeExplore,\n  modifyQueries,\n  runQueries,\n  scanStart,\n  scanStop,\n  setQueries,\n  splitClose,\n  splitOpen,\n} from './state/actions';\n\n// Types\nimport { RawTimeRange, TimeRange, DataQuery } from '@grafana/ui';\nimport { ExploreItemState, ExploreUrlState, RangeScanner, ExploreId } from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport { LAST_USED_DATASOURCE_KEY, ensureQueries, DEFAULT_RANGE } from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\n\ninterface ExploreProps {\n  StartPage?: any;\n  changeDatasource: typeof changeDatasource;\n  changeSize: typeof changeSize;\n  changeTime: typeof changeTime;\n  clearQueries: typeof clearQueries;\n  datasourceError: string;\n  datasourceInstance: any;\n  datasourceLoading: boolean | null;\n  datasourceMissing: boolean;\n  exploreDatasources: DataSourceSelectItem[];\n  exploreId: ExploreId;\n  initialDatasource?: string;\n  initialQueries: DataQuery[];\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  loading: boolean;\n  modifyQueries: typeof modifyQueries;\n  range: RawTimeRange;\n  runQueries: typeof runQueries;\n  scanner?: RangeScanner;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStop: typeof scanStop;\n  setQueries: typeof setQueries;\n  split: boolean;\n  splitClose: typeof splitClose;\n  splitOpen: typeof splitOpen;\n  showingStartPage?: boolean;\n  supportsGraph: boolean | null;\n  supportsLogs: boolean | null;\n  supportsTable: boolean | null;\n  urlState: ExploreUrlState;\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n  /**\n   * Timepicker to control scanning\n   */\n  timepickerRef: React.RefObject<TimePicker>;\n\n  constructor(props) {\n    super(props);\n    this.exploreEvents = new Emitter();\n    this.timepickerRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    const { exploreId, initialized, urlState } = this.props;\n    // Don't initialize on split, but need to initialize urlparameters when present\n    if (!initialized) {\n      // Load URL state and parse range\n      const { datasource, queries, range = DEFAULT_RANGE } = (urlState || {}) as ExploreUrlState;\n      const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\n      const initialQueries: DataQuery[] = ensureQueries(queries);\n      const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\n      const width = this.el ? this.el.offsetWidth : 0;\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        width,\n        this.exploreEvents\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  getRef = el => {\n    this.el = el;\n  };\n\n  onChangeDatasource = async option => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onChangeTime = (range: TimeRange, changedByScanner?: boolean) => {\n    if (this.props.scanning && !changedByScanner) {\n      this.onStopScanning();\n    }\n    this.props.changeTime(this.props.exploreId, range);\n  };\n\n  onClickClear = () => {\n    this.props.clearQueries(this.props.exploreId);\n  };\n\n  onClickCloseSplit = () => {\n    this.props.splitClose();\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickSplit = () => {\n    this.props.splitOpen();\n  };\n\n  onClickLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onModifyQueries = (action, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    const scanner = this.scanPreviousRange;\n    this.props.scanStart(this.props.exploreId, scanner);\n  };\n\n  scanPreviousRange = (): RawTimeRange => {\n    // Calling move() on the timepicker will trigger this.onChangeTime()\n    return this.timepickerRef.current.move(-1, true);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStop(this.props.exploreId);\n  };\n\n  onSubmit = () => {\n    this.props.runQueries(this.props.exploreId);\n  };\n\n  render() {\n    const {\n      StartPage,\n      datasourceInstance,\n      datasourceError,\n      datasourceLoading,\n      datasourceMissing,\n      exploreDatasources,\n      exploreId,\n      loading,\n      initialQueries,\n      range,\n      showingStartPage,\n      split,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n    const selectedDatasource = datasourceInstance\n      ? exploreDatasources.find(d => d.name === datasourceInstance.name)\n      : undefined;\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <div className=\"navbar\">\n          {exploreId === 'left' ? (\n            <div>\n              <a className=\"navbar-page-btn\">\n                <i className=\"fa fa-rocket\" />\n                Explore\n              </a>\n            </div>\n          ) : (\n            <>\n              <div className=\"navbar-page-btn\" />\n              <div className=\"navbar-buttons explore-first-button\">\n                <button className=\"btn navbar-button\" onClick={this.onClickCloseSplit}>\n                  Close Split\n                </button>\n              </div>\n            </>\n          )}\n          {!datasourceMissing ? (\n            <div className=\"navbar-buttons\">\n              <DataSourcePicker\n                onChange={this.onChangeDatasource}\n                datasources={exploreDatasources}\n                current={selectedDatasource}\n              />\n            </div>\n          ) : null}\n          <div className=\"navbar__spacer\" />\n          {exploreId === 'left' && !split ? (\n            <div className=\"navbar-buttons\">\n              <button className=\"btn navbar-button\" onClick={this.onClickSplit}>\n                Split\n              </button>\n            </div>\n          ) : null}\n          <TimePicker ref={this.timepickerRef} range={range} onChangeTime={this.onChangeTime} />\n          <div className=\"navbar-buttons\">\n            <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClickClear}>\n              Clear All\n            </button>\n          </div>\n          <div className=\"navbar-buttons relative\">\n            <button className=\"btn navbar-button navbar-button--primary\" onClick={this.onSubmit}>\n              Run Query{' '}\n              {loading ? (\n                <i className=\"fa fa-spinner fa-fw fa-spin run-icon\" />\n              ) : (\n                <i className=\"fa fa-level-down fa-fw run-icon\" />\n              )}\n            </button>\n          </div>\n        </div>\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\n        {datasourceMissing ? (\n          <div className=\"explore-container\">Please add a datasource that supports Explore (e.g., Prometheus).</div>\n        ) : null}\n\n        {datasourceError && (\n          <div className=\"explore-container\">\n            <Alert message={`Error connecting to datasource: ${datasourceError}`} />\n          </div>\n        )}\n\n        {datasourceInstance &&\n          !datasourceError && (\n            <div className=\"explore-container\">\n              <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} initialQueries={initialQueries} />\n              <AutoSizer onResize={this.onResize} disableHeight>\n                {({ width }) => (\n                  <main className=\"m-t-2\" style={{ width }}>\n                    <ErrorBoundary>\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\n                      {!showingStartPage && (\n                        <>\n                          {supportsGraph && <GraphContainer exploreId={exploreId} />}\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\n                          {supportsLogs && (\n                            <LogsContainer\n                              exploreId={exploreId}\n                              onChangeTime={this.onChangeTime}\n                              onClickLabel={this.onClickLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundary>\n                  </main>\n                )}\n              </AutoSizer>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    exploreDatasources,\n    initialDatasource,\n    initialQueries,\n    initialized,\n    queryTransactions,\n    range,\n    showingStartPage,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n  } = item;\n  const loading = queryTransactions.some(qt => !qt.done);\n  return {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    exploreDatasources,\n    initialDatasource,\n    initialQueries,\n    initialized,\n    loading,\n    queryTransactions,\n    range,\n    showingStartPage,\n    split,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeDatasource,\n  changeSize,\n  changeTime,\n  clearQueries,\n  initializeExplore,\n  modifyQueries,\n  runQueries,\n  scanStart,\n  scanStop,\n  setQueries,\n  splitClose,\n  splitOpen,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(Explore));\n","import React, { FC } from 'react';\n\ninterface Props {\n  message: any;\n}\n\nexport const Alert: FC<Props> = props => {\n  const { message } = props;\n  return (\n    <div className=\"gf-form-group section\">\n      <div className=\"alert-error alert\">\n        <div className=\"alert-icon\">\n          <i className=\"fa fa-exclamation-triangle\" />\n        </div>\n        <div className=\"alert-body\">\n          <div className=\"alert-title\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleGraph } from './state/actions';\nimport Graph from './Graph';\nimport Panel from './Panel';\n\ninterface GraphContainerProps {\n  onChangeTime: (range: TimeRange) => void;\n  exploreId: ExploreId;\n  graphResult?: any[];\n  loading: boolean;\n  range: RawTimeRange;\n  showingGraph: boolean;\n  showingTable: boolean;\n  split: boolean;\n  toggleGraph: typeof toggleGraph;\n}\n\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\n  onClickGraphButton = () => {\n    this.props.toggleGraph(this.props.exploreId);\n  };\n\n  render() {\n    const { exploreId, graphResult, loading, onChangeTime, showingGraph, showingTable, range, split } = this.props;\n    const graphHeight = showingGraph && showingTable ? '200px' : '400px';\n    return (\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\n        <Graph\n          data={graphResult}\n          height={graphHeight}\n          id={`explore-graph-${exploreId}`}\n          onChangeTime={onChangeTime}\n          range={range}\n          split={split}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\n  return { graphResult, loading, range, showingGraph, showingTable, split };\n}\n\nconst mapDispatchToProps = {\n  toggleGraph,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(GraphContainer));\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { LogsModel } from 'app/core/logs_model';\nimport { StoreState } from 'app/types';\n\nimport { toggleLogs } from './state/actions';\nimport Logs from './Logs';\nimport Panel from './Panel';\n\ninterface LogsContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  logsHighlighterExpressions?: string[];\n  logsResult?: LogsModel;\n  onChangeTime: (range: TimeRange) => void;\n  onClickLabel: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  range: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  showingLogs: boolean;\n  toggleLogs: typeof toggleLogs;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onClickLogsButton = () => {\n    this.props.toggleLogs(this.props.exploreId);\n  };\n\n  render() {\n    const {\n      exploreId,\n      loading,\n      logsHighlighterExpressions,\n      logsResult,\n      onChangeTime,\n      onClickLabel,\n      onStartScanning,\n      onStopScanning,\n      range,\n      showingLogs,\n      scanning,\n      scanRange,\n    } = this.props;\n    return (\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\n        <Logs\n          data={logsResult}\n          exploreId={exploreId}\n          key={logsResult.id}\n          highlighterExpressions={logsHighlighterExpressions}\n          loading={loading}\n          onChangeTime={onChangeTime}\n          onClickLabel={onClickLabel}\n          onStartScanning={onStartScanning}\n          onStopScanning={onStopScanning}\n          range={range}\n          scanning={scanning}\n          scanRange={scanRange}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, showingLogs, range } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logsResult,\n    scanning,\n    scanRange,\n    showingLogs,\n    range,\n  };\n}\n\nconst mapDispatchToProps = {\n  toggleLogs,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(LogsContainer));\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { DataQuery } from '@grafana/ui/src/types';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  initialQueries: DataQuery[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, initialQueries } = this.props;\n    return (\n      <div className={className}>\n        {initialQueries.map((query, index) => (\n          // TODO instead of relying on initialQueries, move to react key list in redux\n          <QueryRow key={query.key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />\n        ))}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport QueryEditor from './QueryEditor';\nimport QueryTransactionStatus from './QueryTransactionStatus';\n\n// Actions\nimport {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpression,\n  modifyQueries,\n  removeQueryRow,\n  runQueries,\n} from './state/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { RawTimeRange, DataQuery, QueryHint } from '@grafana/ui';\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\n\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\n  if (transaction) {\n    return transaction.hints[0];\n  }\n  return undefined;\n}\n\ninterface QueryRowProps {\n  addQueryRow: typeof addQueryRow;\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: any;\n  highlightLogsExpression: typeof highlightLogsExpression;\n  history: HistoryItem[];\n  index: number;\n  initialQuery: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  queryTransactions: QueryTransaction[];\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n  removeQueryRow: typeof removeQueryRow;\n  runQueries: typeof runQueries;\n}\n\nexport class QueryRow extends PureComponent<QueryRowProps> {\n  onExecuteQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  onClickAddButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.addQueryRow(exploreId, index);\n  };\n\n  onClickClearButton = () => {\n    this.onChangeQuery(null, true);\n  };\n\n  onClickHintFix = action => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, action: any) => datasourceInstance.modifyQuery(queries, action);\n      this.props.modifyQueries(exploreId, action, index, modifier);\n    }\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRow(exploreId, index);\n  };\n\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\n      this.props.highlightLogsExpression(this.props.exploreId, expressions);\n    }\n  }, 500);\n\n  render() {\n    const { datasourceInstance, history, index, initialQuery, queryTransactions, exploreEvents, range } = this.props;\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\n    const transactionWithError = transactions.find(t => t.error !== undefined);\n    const hint = getFirstHintFromTransactions(transactions);\n    const queryError = transactionWithError ? transactionWithError.error : null;\n    const QueryField = datasourceInstance.pluginExports.ExploreQueryField;\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-status\">\n          <QueryTransactionStatus transactions={transactions} />\n        </div>\n        <div className=\"query-row-field\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              error={queryError}\n              hint={hint}\n              initialQuery={initialQuery}\n              history={history}\n              onClickHintFix={this.onClickHintFix}\n              onPressEnter={this.onExecuteQuery}\n              onQueryChange={this.onChangeQuery}\n            />\n          ) : (\n            <QueryEditor\n              datasource={datasourceInstance}\n              error={queryError}\n              onQueryChange={this.onChangeQuery}\n              onExecuteQuery={this.onExecuteQuery}\n              initialQuery={initialQuery}\n              exploreEvents={exploreEvents}\n              range={range}\n            />\n          )}\n        </div>\n        <div className=\"query-row-tools\">\n          <button className=\"btn navbar-button navbar-button--tight\" onClick={this.onClickClearButton}>\n            <i className=\"fa fa-times\" />\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight\" onClick={this.onClickAddButton}>\n            <i className=\"fa fa-plus\" />\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight\" onClick={this.onClickRemoveButton}>\n            <i className=\"fa fa-minus\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { datasourceInstance, history, initialQueries, queryTransactions, range } = item;\n  const initialQuery = initialQueries[index];\n  return { datasourceInstance, history, initialQuery, queryTransactions, range };\n}\n\nconst mapDispatchToProps = {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpression,\n  modifyQueries,\n  removeQueryRow,\n  runQueries,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(QueryRow));\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\nimport { getTimeSrv } from 'app/features/dashboard/time_srv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { RawTimeRange, DataQuery } from '@grafana/ui';\nimport 'app/features/plugins/plugin_loader';\n\ninterface QueryEditorProps {\n  datasource: any;\n  error?: string | JSX.Element;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery, override?: boolean) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          this.props.onQueryChange(target, false);\n          this.props.onExecuteQuery();\n        },\n        events: exploreEvents,\n        panel: {\n          datasource,\n          targets: [target],\n        },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.props.onQueryChange(target, false);\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: range,\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleTable } from './state/actions';\nimport Table from './Table';\nimport Panel from './Panel';\nimport TableModel from 'app/core/table_model';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: TableModel;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId);\n  };\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\n    return (\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { queryTransactions, showingTable, tableResult } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TableContainer));\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\n\nimport TableModel from 'app/core/table_model';\n\nconst EMPTY_TABLE = new TableModel();\n// Identify columns that contain values\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\n\ninterface TableProps {\n  data: TableModel;\n  loading: boolean;\n  onClickCell?: (columnKey: string, rowValue: string) => void;\n}\n\nfunction prepareRows(rows, columnNames) {\n  return rows.map(cells => _.zipObject(columnNames, cells));\n}\n\nexport default class Table extends PureComponent<TableProps> {\n  getCellProps = (state, rowInfo, column) => {\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        // Only handle click on link, not the cell\n        if (e.target) {\n          const link = e.target as HTMLElement;\n          if (link.className === 'link') {\n            const columnKey = column.Header;\n            const rowValue = rowInfo.row[columnKey];\n            this.props.onClickCell(columnKey, rowValue);\n          }\n        }\n      },\n    };\n  };\n\n  render() {\n    const { data, loading } = this.props;\n    const tableModel = data || EMPTY_TABLE;\n    const columnNames = tableModel.columns.map(({ text }) => text);\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\n      Header: text,\n      accessor: text,\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\n      show: text !== 'Time',\n      Cell: row => <span className={filterable ? 'link' : ''}>{row.value}</span>,\n    }));\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\n\n    return (\n      <ReactTable\n        columns={columns}\n        data={tableModel.rows}\n        getTdProps={this.getCellProps}\n        loading={loading}\n        minRows={0}\n        noDataText={noDataText}\n        resolveData={data => prepareRows(data, columnNames)}\n        showPagination={Boolean(data)}\n      />\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { RawTimeRange, TimeRange } from '@grafana/ui';\n\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nexport const DEFAULT_RANGE = {\n  from: 'now-6h',\n  to: 'now',\n};\n\n/**\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\n * @param value Epoch or relative time\n */\nexport function parseTime(value: string | moment.Moment, isUtc = false, ensureString = false): string | moment.Moment {\n  if (moment.isMoment(value)) {\n    if (ensureString) {\n      return value.format(DATE_FORMAT);\n    }\n    return value;\n  }\n  if ((value as string).indexOf('now') !== -1) {\n    return value;\n  }\n  let time: any = value;\n  // Possible epoch\n  if (!isNaN(time)) {\n    time = parseInt(time, 10);\n  }\n  time = isUtc ? moment.utc(time) : moment(time);\n  return time.format(DATE_FORMAT);\n}\n\ninterface TimePickerProps {\n  isOpen?: boolean;\n  isUtc?: boolean;\n  range?: RawTimeRange;\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\n}\n\ninterface TimePickerState {\n  isOpen: boolean;\n  isUtc: boolean;\n  rangeString: string;\n  refreshInterval?: string;\n  initialRange?: RawTimeRange;\n\n  // Input-controlled text, keep these in a shape that is human-editable\n  fromRaw: string;\n  toRaw: string;\n}\n\n/**\n * TimePicker with dropdown menu for relative dates.\n *\n * Initialize with a range that is either based on relative time strings,\n * or on Moment objects.\n * Internally the component needs to keep a string representation in `fromRaw`\n * and `toRaw` for the controlled inputs.\n * When a time is picked, `onChangeTime` is called with the new range that\n * is again based on relative time strings or Moment objects.\n */\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\n  dropdownEl: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.isOpen,\n      isUtc: props.isUtc,\n      rangeString: '',\n      fromRaw: '',\n      toRaw: '',\n      initialRange: DEFAULT_RANGE,\n      refreshInterval: '',\n    };\n  } //Temp solution... How do detect if ds supports table format?\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.initialRange && state.initialRange === props.range) {\n      return state;\n    }\n\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\n\n    // Ensure internal string format\n    const fromRaw = parseTime(from, props.isUtc, true);\n    const toRaw = parseTime(to, props.isUtc, true);\n    const range = {\n      from: fromRaw,\n      to: toRaw,\n    };\n\n    return {\n      ...state,\n      fromRaw,\n      toRaw,\n      initialRange: props.range,\n      rangeString: rangeUtil.describeTimeRange(range),\n    };\n  }\n\n  move(direction: number, scanning?: boolean): RawTimeRange {\n    const { onChangeTime } = this.props;\n    const { fromRaw, toRaw } = this.state;\n    const from = dateMath.parse(fromRaw, false);\n    const to = dateMath.parse(toRaw, true);\n    const step = scanning ? 1 : 2;\n    const timespan = (to.valueOf() - from.valueOf()) / step;\n\n    let nextTo, nextFrom;\n    if (direction === -1) {\n      nextTo = to.valueOf() - timespan;\n      nextFrom = from.valueOf() - timespan;\n    } else if (direction === 1) {\n      nextTo = to.valueOf() + timespan;\n      nextFrom = from.valueOf() + timespan;\n      if (nextTo > Date.now() && to < Date.now()) {\n        nextTo = Date.now();\n        nextFrom = from.valueOf();\n      }\n    } else {\n      nextTo = to.valueOf();\n      nextFrom = from.valueOf();\n    }\n\n    const nextRange = {\n      from: moment(nextFrom),\n      to: moment(nextTo),\n    };\n\n    const nextTimeRange: TimeRange = {\n      raw: nextRange,\n      from: nextRange.from,\n      to: nextRange.to,\n    };\n\n    this.setState(\n      {\n        rangeString: rangeUtil.describeTimeRange(nextRange),\n        fromRaw: nextRange.from.format(DATE_FORMAT),\n        toRaw: nextRange.to.format(DATE_FORMAT),\n      },\n      () => {\n        onChangeTime(nextTimeRange, scanning);\n      }\n    );\n\n    return nextRange;\n  }\n\n  handleChangeFrom = e => {\n    this.setState({\n      fromRaw: e.target.value,\n    });\n  };\n\n  handleChangeTo = e => {\n    this.setState({\n      toRaw: e.target.value,\n    });\n  };\n\n  handleClickApply = () => {\n    const { onChangeTime } = this.props;\n    let range;\n    this.setState(\n      state => {\n        const { toRaw, fromRaw } = this.state;\n        range = {\n          from: dateMath.parse(fromRaw, false),\n          to: dateMath.parse(toRaw, true),\n        };\n        const rangeString = rangeUtil.describeTimeRange(range);\n        return {\n          isOpen: false,\n          rangeString,\n        };\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  handleClickLeft = () => this.move(-1);\n  handleClickPicker = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n  handleClickRight = () => this.move(1);\n  handleClickRefresh = () => {};\n  handleClickRelativeOption = range => {\n    const { onChangeTime } = this.props;\n    const rangeString = rangeUtil.describeTimeRange(range);\n    this.setState(\n      {\n        toRaw: range.to,\n        fromRaw: range.from,\n        isOpen: false,\n        rangeString,\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  getTimeOptions() {\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\n  }\n\n  dropdownRef = el => {\n    this.dropdownEl = el;\n  };\n\n  renderDropdown() {\n    const { fromRaw, isOpen, toRaw } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n    const timeOptions = this.getTimeOptions();\n    return (\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Quick ranges</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\n            {Object.keys(timeOptions).map(section => {\n              const group = timeOptions[section];\n              return (\n                <ul key={section}>\n                  {group.map(option => (\n                    <li className={option.active ? 'active' : ''} key={option.display}>\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\n                    </li>\n                  ))}\n                </ul>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Custom range</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\n            <label className=\"small\">From:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-from\"\n                  value={fromRaw}\n                  onChange={this.handleChangeFrom}\n                />\n              </div>\n            </div>\n\n            <label className=\"small\">To:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-to\"\n                  value={toRaw}\n                  onChange={this.handleChangeTo}\n                />\n              </div>\n            </div>\n            <div className=\"gf-form\">\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\n                Apply\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { isUtc, rangeString, refreshInterval } = this.state;\n    return (\n      <div className=\"timepicker\">\n        <div className=\"navbar-buttons\">\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\n            <i className=\"fa fa-chevron-left\" />\n          </button>\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\n            <i className=\"fa fa-clock-o\" />\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\n            <i className=\"fa fa-chevron-right\" />\n          </button>\n        </div>\n        {this.renderDropdown()}\n      </div>\n    );\n  }\n}\n","import React, { FC, ReactNode, PureComponent } from 'react';\nimport { Tooltip } from '@grafana/ui';\n\ninterface ToggleButtonGroupProps {\n  label?: string;\n  children: JSX.Element[];\n  transparent?: boolean;\n}\n\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\n  render() {\n    const { children, label, transparent } = this.props;\n\n    return (\n      <div className=\"gf-form\">\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\n      </div>\n    );\n  }\n}\n\ninterface ToggleButtonProps {\n  onChange?: (value) => void;\n  selected?: boolean;\n  value: any;\n  className?: string;\n  children: ReactNode;\n  tooltip?: string;\n}\n\nexport const ToggleButton: FC<ToggleButtonProps> = ({\n  children,\n  selected,\n  className = '',\n  value = null,\n  tooltip,\n  onChange,\n}) => {\n  const handleChange = event => {\n    event.stopPropagation();\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\n  const button = (\n    <button className={btnClassName} onClick={handleChange}>\n      <span>{children}</span>\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip content={tooltip} placement=\"bottom\">\n        {button}\n      </Tooltip>\n    );\n  } else {\n    return button;\n  }\n};\n","import React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport { LogLabelStatsModel } from 'app/core/logs_model';\n\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\n  const { active, count, proportion, value } = logLabelStatsModel;\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\n\n  return (\n    <div className={className}>\n      <div className=\"logs-stats-row__label\">\n        <div className=\"logs-stats-row__value\">{value}</div>\n        <div className=\"logs-stats-row__count\">{count}</div>\n        <div className=\"logs-stats-row__percent\">{percent}</div>\n      </div>\n      <div className=\"logs-stats-row__bar\">\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nconst STATS_ROW_LIMIT = 5;\n\ninterface Props {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  onClickClose: () => void;\n}\n\nexport class LogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, onClickClose } = this.props;\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find(row => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find(row => row.value === value);\n      otherRows = otherRows.filter(row => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className=\"logs-stats\">\n        <div className=\"logs-stats__header\">\n          <span className=\"logs-stats__title\">\n            {label}: {total} of {rowCount} rows have that label\n          </span>\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\n        </div>\n        <div className=\"logs-stats__body\">\n          {topRows.map(stat => <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />)}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  label: string;\n  plain?: boolean;\n  value: string;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  showStats: boolean;\n  stats: LogLabelStatsModel[];\n}\n\nexport class LogLabel extends PureComponent<Props, State> {\n  state = {\n    stats: null,\n    showStats: false,\n  };\n\n  onClickClose = () => {\n    this.setState({ showStats: false });\n  };\n\n  onClickLabel = () => {\n    const { onClickLabel, label, value } = this.props;\n    if (onClickLabel) {\n      onClickLabel(label, value);\n    }\n  };\n\n  onClickStats = () => {\n    this.setState(state => {\n      if (state.showStats) {\n        return { showStats: false, stats: null };\n      }\n      const allRows = this.props.getRows();\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\n      return { showStats: true, stats };\n    });\n  };\n\n  render() {\n    const { getRows, label, plain, value } = this.props;\n    const { showStats, stats } = this.state;\n    const tooltip = `${label}: ${value}`;\n    return (\n      <span className=\"logs-label\">\n        <span className=\"logs-label__value\" title={tooltip}>\n          {value}\n        </span>\n        {!plain && (\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\n        )}\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\n        {showStats && (\n          <span className=\"logs-label__stats\">\n            <LogLabelStats\n              stats={stats}\n              rowCount={getRows().length}\n              label={label}\n              value={value}\n              onClickClose={this.onClickClose}\n            />\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogsStreamLabels, LogRowModel } from 'app/core/logs_model';\nimport { LogLabel } from './LogLabel';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  labels: LogsStreamLabels;\n  plain?: boolean;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\nexport class LogLabels extends PureComponent<Props> {\n  render() {\n    const { getRows, labels, onClickLabel, plain } = this.props;\n    return Object.keys(labels).map(key => (\n      <LogLabel key={key} getRows={getRows} label={key} value={labels[key]} plain={plain} onClickLabel={onClickLabel} />\n    ));\n  }\n}\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport classnames from 'classnames';\n\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\nimport { LogLabels } from './LogLabels';\nimport { findHighlightChunksInText } from 'app/core/utils/text';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  highlighterExpressions?: string[];\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean | null; // Tristate: null means auto\n  showLocalTime: boolean;\n  showUtc: boolean;\n  getRows: () => LogRowModel[];\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  fieldCount: number;\n  fieldLabel: string;\n  fieldStats: LogLabelStatsModel[];\n  fieldValue: string;\n  parsed: boolean;\n  parser?: LogsParser;\n  parsedFieldHighlights: string[];\n  showFieldStats: boolean;\n}\n\n/**\n * Renders a highlighted field.\n * When hovering, a stats icon is shown.\n */\nconst FieldHighlight = onClick => props => {\n  return (\n    <span className={props.className} style={props.style}>\n      {props.children}\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\n    </span>\n  );\n};\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nexport class LogRow extends PureComponent<Props, State> {\n  mouseMessageTimer: NodeJS.Timer;\n\n  state = {\n    fieldCount: 0,\n    fieldLabel: null,\n    fieldStats: null,\n    fieldValue: null,\n    parsed: false,\n    parser: undefined,\n    parsedFieldHighlights: [],\n    showFieldStats: false,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseMessageTimer);\n  }\n\n  onClickClose = () => {\n    this.setState({ showFieldStats: false });\n  };\n\n  onClickHighlight = (fieldText: string) => {\n    const { getRows } = this.props;\n    const { parser } = this.state;\n    const allRows = getRows();\n\n    // Build value-agnostic row matcher based on the field label\n    const fieldLabel = parser.getLabelFromField(fieldText);\n    const fieldValue = parser.getValueFromField(fieldText);\n    const matcher = parser.buildMatcher(fieldLabel);\n    const fieldStats = calculateFieldStats(allRows, matcher);\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\n\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\n  };\n\n  onMouseOverMessage = () => {\n    // Don't parse right away, user might move along\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\n  };\n\n  onMouseOutMessage = () => {\n    clearTimeout(this.mouseMessageTimer);\n    this.setState({ parsed: false });\n  };\n\n  parseMessage = () => {\n    if (!this.state.parsed) {\n      const { row } = this.props;\n      const parser = getParser(row.entry);\n      if (parser) {\n        // Use parser to highlight detected fields\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\n      }\n    }\n  };\n\n  render() {\n    const {\n      getRows,\n      highlighterExpressions,\n      onClickLabel,\n      row,\n      showDuplicates,\n      showLabels,\n      showLocalTime,\n      showUtc,\n    } = this.props;\n    const {\n      fieldCount,\n      fieldLabel,\n      fieldStats,\n      fieldValue,\n      parsed,\n      parsedFieldHighlights,\n      showFieldStats,\n    } = this.state;\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\n    const needsHighlighter = highlights && highlights.length > 0;\n    const highlightClassName = classnames('logs-row__match-highlight', {\n      'logs-row__match-highlight--preview': previewHighlights,\n    });\n    return (\n      <div className=\"logs-row\">\n        {showDuplicates && (\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\n        )}\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\n        {showUtc && (\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n            {row.timestamp}\n          </div>\n        )}\n        {showLocalTime && (\n          <div className=\"logs-row__time\" title={`${row.timestamp} (${row.timeFromNow})`}>\n            {row.timeLocal}\n          </div>\n        )}\n        {showLabels && (\n          <div className=\"logs-row__labels\">\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\n          </div>\n        )}\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\n          {parsed && (\n            <Highlighter\n              autoEscape\n              highlightTag={FieldHighlight(this.onClickHighlight)}\n              textToHighlight={row.entry}\n              searchWords={parsedFieldHighlights}\n              highlightClassName=\"logs-row__field-highlight\"\n            />\n          )}\n          {!parsed &&\n            needsHighlighter && (\n              <Highlighter\n                textToHighlight={row.entry}\n                searchWords={highlights}\n                findChunks={findHighlightChunksInText}\n                highlightClassName={highlightClassName}\n              />\n            )}\n          {!parsed && !needsHighlighter && row.entry}\n          {showFieldStats && (\n            <div className=\"logs-row__stats\">\n              <LogLabelStats\n                stats={fieldStats}\n                label={fieldLabel}\n                value={fieldValue}\n                onClickClose={this.onClickClose}\n                rowCount={fieldCount}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { RawTimeRange } from '@grafana/ui';\nimport {\n  LogsDedupDescription,\n  LogsDedupStrategy,\n  LogsModel,\n  dedupLogRows,\n  filterLogLevels,\n  LogLevel,\n  LogsMetaKind,\n} from 'app/core/logs_model';\n\nimport { Switch } from 'app/core/components/Switch/Switch';\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\n\nimport Graph from './Graph';\nimport { LogLabels } from './LogLabels';\nimport { LogRow } from './LogRow';\n\nconst PREVIEW_LIMIT = 100;\n\nconst graphOptions = {\n  series: {\n    stack: true,\n    bars: {\n      show: true,\n      lineWidth: 5,\n      // barWidth: 10,\n    },\n    // stack: true,\n  },\n  yaxis: {\n    tickDecimals: 0,\n  },\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} plain />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  data: LogsModel;\n  exploreId: string;\n  highlighterExpressions: string[];\n  loading: boolean;\n  range?: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onClickLabel?: (label: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n}\n\ninterface State {\n  dedup: LogsDedupStrategy;\n  deferLogs: boolean;\n  hiddenLogLevels: Set<LogLevel>;\n  renderAll: boolean;\n  showLabels: boolean | null; // Tristate: null means auto\n  showLocalTime: boolean;\n  showUtc: boolean;\n}\n\nexport default class Logs extends PureComponent<Props, State> {\n  deferLogsTimer: NodeJS.Timer;\n  renderAllTimer: NodeJS.Timer;\n\n  state = {\n    dedup: LogsDedupStrategy.none,\n    deferLogs: true,\n    hiddenLogLevels: new Set(),\n    renderAll: false,\n    showLabels: null,\n    showLocalTime: true,\n    showUtc: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    if (this.state.deferLogs) {\n      const { data } = this.props;\n      const rowCount = data && data.rows ? data.rows.length : 0;\n      // Render all right away if not too far over the limit\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Staged rendering\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.deferLogsTimer);\n    clearTimeout(this.renderAllTimer);\n  }\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    this.setState(prevState => {\n      if (prevState.dedup === dedup) {\n        return { dedup: LogsDedupStrategy.none };\n      }\n      return { dedup };\n    });\n  };\n\n  onChangeLabels = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLabels: target.checked,\n    });\n  };\n\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLocalTime: target.checked,\n    });\n  };\n\n  onChangeUtc = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showUtc: target.checked,\n    });\n  };\n\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\n    this.setState({ hiddenLogLevels });\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStartScanning();\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStopScanning();\n  };\n\n  render() {\n    const {\n      data,\n      exploreId,\n      highlighterExpressions,\n      loading = false,\n      onClickLabel,\n      range,\n      scanning,\n      scanRange,\n    } = this.props;\n    const { dedup, deferLogs, hiddenLogLevels, renderAll, showLocalTime, showUtc } = this.state;\n    let { showLabels } = this.state;\n    const hasData = data && data.rows && data.rows.length > 0;\n    const showDuplicates = dedup !== LogsDedupStrategy.none;\n\n    // Filtering\n    const filteredData = filterLogLevels(data, hiddenLogLevels);\n    const dedupedData = dedupLogRows(filteredData, dedup);\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\n    const meta = [...data.meta];\n    if (dedup !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Staged rendering\n    const processedRows = dedupedData.rows;\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\n\n    // Check for labels\n    if (showLabels === null) {\n      if (hasData) {\n        showLabels = data.rows.some(row => _.size(row.uniqueLabels) > 0);\n      } else {\n        showLabels = true;\n      }\n    }\n\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = () => processedRows;\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <Graph\n            data={data.series}\n            height=\"100px\"\n            range={range}\n            id={`explore-logs-graph-${exploreId}`}\n            onChangeTime={this.props.onChangeTime}\n            onToggleSeries={this.onToggleLogLevel}\n            userOptions={graphOptions}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedup === dedupType}\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData &&\n          meta && (\n            <div className=\"logs-panel-meta\">\n              {meta.map(item => (\n                <div className=\"logs-panel-meta__item\" key={item.label}>\n                  <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                  <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n                </div>\n              ))}\n            </div>\n          )}\n\n        <div className=\"logs-rows\">\n          {hasData &&\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\n            firstRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                highlighterExpressions={highlighterExpressions}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData &&\n            !deferLogs &&\n            renderAll &&\n            lastRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\n        </div>\n        {!loading &&\n          !hasData &&\n          !scanning && (\n            <div className=\"logs-panel-nodata\">\n              No logs found.\n              <a className=\"link\" onClick={this.onClickScan}>\n                Scan for older logs\n              </a>\n            </div>\n          )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nconst INTERVAL = 150;\n\nexport default class ElapsedTime extends PureComponent<any, any> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time } = this.props;\n    const value = (time || elapsed) / 1000;\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryTransaction } from 'app/types/explore';\nimport ElapsedTime from './ElapsedTime';\n\nfunction formatLatency(value) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\ninterface QueryTransactionStatusItemProps {\n  transaction: QueryTransaction;\n}\n\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\n  render() {\n    const { transaction } = this.props;\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\n    return (\n      <div className={className}>\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\n        <div className=\"query-transaction__duration\">\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface QueryTransactionStatusProps {\n  transactions: QueryTransaction[];\n}\n\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\n  render() {\n    const { transactions } = this.props;\n    return (\n      <div className=\"query-transactions\">\n        {transactions.map((t, i) => (\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { updateLocation } from 'app/core/actions';\nimport { StoreState } from 'app/types';\nimport { ExploreId, ExploreUrlState } from 'app/types/explore';\nimport { parseUrlState } from 'app/core/utils/explore';\n\nimport { initializeExploreSplit } from './state/actions';\nimport ErrorBoundary from './ErrorBoundary';\nimport Explore from './Explore';\n\ninterface WrapperProps {\n  initializeExploreSplit: typeof initializeExploreSplit;\n  split: boolean;\n  updateLocation: typeof updateLocation;\n  urlStates: { [key: string]: string };\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  initialSplit: boolean;\n  urlStates: { [key: string]: ExploreUrlState };\n\n  constructor(props: WrapperProps) {\n    super(props);\n    this.urlStates = {};\n    const { left, right } = props.urlStates;\n    if (props.urlStates.left) {\n      this.urlStates.leftState = parseUrlState(left);\n    }\n    if (props.urlStates.right) {\n      this.urlStates.rightState = parseUrlState(right);\n      this.initialSplit = true;\n    }\n  }\n\n  componentDidMount() {\n    if (this.initialSplit) {\n      this.props.initializeExploreSplit();\n    }\n  }\n\n  render() {\n    const { split } = this.props;\n    const { leftState, rightState } = this.urlStates;\n\n    return (\n      <div className=\"explore-wrapper\">\n        <ErrorBoundary>\n          <Explore exploreId={ExploreId.left} urlState={leftState} />\n        </ErrorBoundary>\n        {split && (\n          <ErrorBoundary>\n            <Explore exploreId={ExploreId.right} urlState={rightState} />\n          </ErrorBoundary>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const urlStates = state.location.query;\n  const { split } = state.explore;\n  return { split, urlStates };\n};\n\nconst mapDispatchToProps = {\n  initializeExploreSplit,\n  updateLocation,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(Wrapper));\n"],"sourceRoot":""}